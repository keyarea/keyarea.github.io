<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Key</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.loong.io/"/>
  <updated>2020-06-03T02:37:45.378Z</updated>
  <id>https://blog.loong.io/</id>
  
  <author>
    <name>Key</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java开发常用类库</title>
    <link href="https://blog.loong.io/2019/09/09/java-common-class/"/>
    <id>https://blog.loong.io/2019/09/09/java-common-class/</id>
    <published>2019-09-09T03:10:04.000Z</published>
    <updated>2020-06-03T02:37:45.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UUID类"><a href="#UUID类" class="headerlink" title="UUID类"></a>UUID类</h2><blockquote><p>UUID是一种生成无重复字符串的程序类,这种程序类的主要功能是根据时间戳实现一个自动的无重复的字符串定义.</p></blockquote><blockquote><p>一般在获取UUID的时候往往都是随机生成一个内容,所以可以通过如下方法获取:</p><ul><li>获取UUID对象: <code>public static UUID randomUUID()</code>;</li><li>根据字符串获取UUID内容: <code>public static UUID fromString(String name)</code>;</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UUIDTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UUID uuid = UUID.randomUUID();</span><br><span class="line">        System.out.println(uuid.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在对一些文件进行自动命名处理的情况下,UUID类型非常好用.</p></blockquote><h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h2><blockquote><p>Optional类主要是进行null的相关处理,在以前进行程序开发的时候,如果为了程序之中出现空指向,往往可以追加有null的验证.</p></blockquote><p>范例:传统的引用传递问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        print(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(str.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在引用接收的一方往往都是被动判断,所以为了解决这种被动的处理操作,在Java中提供有一个Optional类,这个类可以实现null的处理操作,在这个类里面提供有如下的操作方法:</p><ul><li>返回空数据: <code>public static &lt;T&gt; Optional&lt;T&gt; empty()</code>;</li><li>获取数据: <code>public T get()</code>;</li><li>保存数据,但是不允许出现null: <code>public static &lt;T&gt; Optional&lt;T&gt; of(T value)</code>;<ul><li>如果在保存数据的时候存在有null,则会抛出NullPointerException异常</li></ul></li><li>保存数据,允许为null: <code>public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T able)</code>;</li><li>空的时候返回其它数据: <code>public T orElse(T other)</code>;</li></ul></blockquote><p><img src="http://imgs.loong.io/20190908101310_wCY5wM_Screenshot.jpeg" alt></p><p>范例: 修改程序,按照正规的结构完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MessageUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;IMessage&gt; <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.of(<span class="keyword">new</span> MessageImpl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useMessage</span><span class="params">(IMessage msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(msg.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span> <span class="keyword">implements</span> <span class="title">IMessage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"www.qipo.net"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IMessage temp = MessageUtil.getMessage().get();</span><br><span class="line">        MessageUtil.useMessage(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Optional类中允许保存有null的内容,所以在数据获取的时候也可以进行null的处理.但是如果为null,则在使用get()获取数据的时候就会出现<code>Exception in thread &quot;main&quot; java.util.NoSuchElementException: No value present</code>的异常.<br>所以此时可以更换为ofElse()方法.</p><p>范例: 处理null的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MessageUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;IMessage&gt; <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useMessage</span><span class="params">(IMessage msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(msg.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span> <span class="keyword">implements</span> <span class="title">IMessage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"www.qipo.net"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IMessage temp = MessageUtil.getMessage().orElse(<span class="keyword">new</span> MessageImpl());</span><br><span class="line">        MessageUtil.useMessage(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在所有引用数据类型的操作处理之中,null是一个重要的技术问题,所以JDK1.8之后对于null的处理很有帮助,同时也是日后进行项目开发之中使用次数最多的一个程序类. </p><h2 id="ThreadLocal类"><a href="#ThreadLocal类" class="headerlink" title="ThreadLocal类"></a>ThreadLocal类</h2><p>在真正的去了解ThreadLocal类作用的时候编写一个简单的程序做一个先期分析 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String meg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMeg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> meg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeg</span><span class="params">(String meg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.meg = meg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Message msg;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Channel</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line">        msg = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[发送消息]"</span> + msg.getMeg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">        msg.setMeg(<span class="string">"消息"</span>);</span><br><span class="line">        Channel.setMessage(msg);</span><br><span class="line">        Channel.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://imgs.loong.io/20190908105406_Oh17FM_Screenshot.jpeg" alt></p><p>对于当前的程序实际上采用的是一种单线程的模式来进行处理的,那么再多线程情况下能否实现完全一致的操作效果呢?为此我们启动三个线程进行处理.</p><p>范例: 多线程的影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String meg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMeg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> meg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeg</span><span class="params">(String meg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.meg = meg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Message msg;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Channel</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line">        msg = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[发送消息]"</span> + Thread.currentThread().getName() + <span class="string">"-"</span> + msg.getMeg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">            msg.setMeg(<span class="string">"线程A的消息"</span>);</span><br><span class="line">            Channel.setMessage(msg);</span><br><span class="line">            Channel.send();</span><br><span class="line">        &#125;, <span class="string">"线程A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">            msg.setMeg(<span class="string">"线程B的消息"</span>);</span><br><span class="line">            Channel.setMessage(msg);</span><br><span class="line">            Channel.send();</span><br><span class="line">        &#125;, <span class="string">"线程B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">            msg.setMeg(<span class="string">"线程C的消息"</span>);</span><br><span class="line">            Channel.setMessage(msg);</span><br><span class="line">            Channel.send();</span><br><span class="line">        &#125;, <span class="string">"线程C"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候消息的处理产生了影响.</p><p><img src="http://imgs.loong.io/20190908112149_vwSI5h_Screenshot.jpeg" alt></p><p>在保持Channel(所有发送的通道)核心结构不改变的情况下,需要考虑到每个线程的独立操作问题.那么在这样的情况下就发现对于Channel类而言,除了要保留有发送的消息之外,还应该多存放有一个每一个线程的标记(当前线程),<br>那么这个时候我们就可以通过ThreadLocal类来存放数据.在ThreadLocal类里面提供有如下的操作方法:</p><ul><li>构造方法: <code>public ThreadLocal()</code>;</li><li>设置数据: <code>public void set(T value)</code>;</li><li>取出数据: <code>public T get()</code>;</li><li>删除数据: <code>public void remove()</code>;</li></ul><p><img src="http://imgs.loong.io/20190908113324_LYlF82_Screenshot.jpeg" alt></p><p>范例: 解决线程同步问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String meg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMeg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> meg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeg</span><span class="params">(String meg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.meg = meg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Message&gt; THREAD_LOCAL = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Channel</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line">        THREAD_LOCAL.set(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[发送消息]"</span> + Thread.currentThread().getName() + <span class="string">"-"</span> + THREAD_LOCAL.get().getMeg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">            msg.setMeg(<span class="string">"线程A的消息"</span>);</span><br><span class="line">            Channel.setMessage(msg);</span><br><span class="line">            Channel.send();</span><br><span class="line">        &#125;, <span class="string">"线程A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">            msg.setMeg(<span class="string">"线程B的消息"</span>);</span><br><span class="line">            Channel.setMessage(msg);</span><br><span class="line">            Channel.send();</span><br><span class="line">        &#125;, <span class="string">"线程B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">            msg.setMeg(<span class="string">"线程C的消息"</span>);</span><br><span class="line">            Channel.setMessage(msg);</span><br><span class="line">            Channel.send();</span><br><span class="line">        &#125;, <span class="string">"线程C"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个线程通过ThreadLocal只允许保存一个数据.</p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器的主要操作是进行定时任务的处理.在Java中提供有定时任务的支持,但是这种任务的处理只是实现了一种间隔触发的操作.</p><p>如果要想实现定时的处理操作主要是需要有一个定时操作的主体类,以及一个定时任务的控制.可以使用两个类实现:</p><ul><li><code>java.util.TimerTask</code>类:实现定时任务处理;</li><li><code>java.util.Timer</code>类:进行任务的处理,启动的方法:<ul><li>任务启动: <code>public void schedule(TimerTask task, long delay)</code>,延迟单位为毫秒;</li><li>间隔触发: <code>public void scheduleAtFixedRate(TimerTask task, long delay, long period)</code>;</li></ul></li></ul><p>范例: 实现定时任务处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"定时任务启动, 当前时间为: "</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer(); <span class="comment">// 定时任务</span></span><br><span class="line">        <span class="comment">// 定义间隔任务,1000毫秒之后开始执行,1000毫秒执行一次</span></span><br><span class="line">        timer.scheduleAtFixedRate(<span class="keyword">new</span> MyTask(), <span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">//        timer.schedule(new MyTask(), 1000); // 1000毫秒之后开始执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://imgs.loong.io/20190908115725_Wqt9ar_Screenshot.jpeg" alt></p><p>这种定时是由JDK最原始的方式提供的支持,但是实际上开发之中利用此类方式进行的定时处理实现的代码会非常复杂.</p><h2 id="Base64加密工具"><a href="#Base64加密工具" class="headerlink" title="Base64加密工具"></a>Base64加密工具</h2><p>正常来说,加密基本上永远都伴随着解密,所谓的加密或者是解密往往都需要有一些所谓的规则.在JDK1.8开始提供有一个新的加密处理操作类,Base64处理,在这个类里面有两个内部类:</p><ul><li>Base64.Encoder:进行加密处理;<ul><li>加密处理: <code>public byte[] encode(byte[] src)</code></li></ul></li><li>Base64.Decoder:进行解密处理;<ul><li>解密处理: <code>public byte[] decode(String src)</code></li></ul></li></ul><p>范例: 加密与解密操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"www.qipo.net"</span>; <span class="comment">// 要进行加密的内容</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 加密操作</span></span><br><span class="line">        String enStr = <span class="keyword">new</span> String(Base64.getEncoder().encode(str.getBytes()));</span><br><span class="line">        System.out.println(enStr); <span class="comment">// 加密之后的字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解密操作</span></span><br><span class="line">        String deStr = <span class="keyword">new</span> String(Base64.getDecoder().decode(enStr));</span><br><span class="line">        System.out.println(deStr); <span class="comment">// 解密之后的字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然Base64可以实现加密与解密操作的处理,但是由于是一个公共的算法,所以如果直接对数据进行加密往往并不安全,最好的做法是使用盐值操作.</p><p>范例: 盐值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String salt = <span class="string">"jfidsj"</span>;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"www.qipo.net"</span> + salt; <span class="comment">// 要进行加密的内容</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加密操作</span></span><br><span class="line">        String enStr = <span class="keyword">new</span> String(Base64.getEncoder().encode(str.getBytes()));</span><br><span class="line">        System.out.println(enStr); <span class="comment">// 加密之后的字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解密操作</span></span><br><span class="line">        String deStr = <span class="keyword">new</span> String(Base64.getDecoder().decode(enStr));</span><br><span class="line">        System.out.println(deStr); <span class="comment">// 解密之后的字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使现在有盐值,实际上加密效果也不是很好,最好的办法就是多次加密。</p><p>范例：复杂的加密操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringUtil</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REPEAT = <span class="number">5</span>; <span class="comment">// 加密次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SALT = <span class="string">"qipo"</span>; <span class="comment">// 盐值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StringUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 需要加密的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String str)</span> </span>&#123; <span class="comment">// 加密处理</span></span><br><span class="line">        String temp =   str + <span class="string">"&#123;"</span> + SALT + <span class="string">"&#125;"</span>; <span class="comment">// 盐值不对外公布</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = temp.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; REPEAT; i++) &#123;</span><br><span class="line">            data = Base64.getEncoder().encode(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 需要进行解密的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密之后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = str.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; REPEAT ; i++) &#123;</span><br><span class="line">            data = Base64.getDecoder().decode(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(data).replaceAll(<span class="string">"\\&#123;\\w+\\&#125;"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String temp = <span class="string">"www.qipo.net"</span>;</span><br><span class="line"></span><br><span class="line">        String encodeStr = StringUtil.encode(temp);</span><br><span class="line">        System.out.println(encodeStr);</span><br><span class="line">        String decodeStr = StringUtil.decode(encodeStr);</span><br><span class="line">        System.out.println(decodeStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好的做法是使用2-3种加密程序，同时再找到一些完全不可解密的加密算法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;UUID类&quot;&gt;&lt;a href=&quot;#UUID类&quot; class=&quot;headerlink&quot; title=&quot;UUID类&quot;&gt;&lt;/a&gt;UUID类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;UUID是一种生成无重复字符串的程序类,这种程序类的主要功能是根据时间戳实现一个自动的无重
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 正则表达式</title>
    <link href="https://blog.loong.io/2019/09/04/java-regex/"/>
    <id>https://blog.loong.io/2019/09/04/java-regex/</id>
    <published>2019-09-04T08:53:33.000Z</published>
    <updated>2020-06-03T02:37:45.376Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过之前一系列的分析，String是一个非常万能的类，因为String不仅仅可以支持有各种字符串的处理操作，也支持有向各个数据类型的转换，所以在项目的开发之中，只要是用户输入的信息基本上都用String表示。<br>于是在向其他数据类型转换时候为了保证转换的正确性，往往需要对其进行一些复杂的验证处理，那么这种情况下如果只是单纯的依靠String类中的方法是非常麻烦的。</p></blockquote><h2 id="认识正则表达式"><a href="#认识正则表达式" class="headerlink" title="认识正则表达式"></a>认识正则表达式</h2><blockquote><p>现在假设有一个字符串要求你判断字符串是否由数字所组成，如果由数字所组成则将其变为数字进行乘法计算。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 正则表达式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToIntTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"123213"</span>;</span><br><span class="line">        <span class="keyword">if</span>(isNumber(str)) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">            System.out.println(num * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] list = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; list.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(list[i] &gt; <span class="string">'9'</span> || list[i] &lt; <span class="string">'0'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际上这种验证的功能是非常简单的，但是如此简单的功能却需要开发者编写大量的程序逻辑代码，那么如果是更加复杂的验证呢？那么在这样的情况下，对于验证最好的做法就是利用正则表达式来完成。</p></blockquote><p>范例：使用正则表达式实现相同的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 正则表达式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        String str = "sdf";</span></span><br><span class="line">        String str = <span class="string">"123"</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.matches(<span class="string">"\\d+"</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">            System.out.println(num * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正则表达式最早是从Perl语言发展而来的，而后在JDK1.4以前如果需要使用到正则表达式的相关定义则需要单独引入其他的*.jar文件，但是从JDK1.4之后已经默认被支持。</p><p>并且提供有java.util.regex开发包，同时针对String类也进行了一些修改，使其有方法可以直接支持正则处理。</p><p>使用正则最大的特点在于方便进行验证处理，以及方便进行复杂字符串的修改处理。</p></blockquote><h2 id="正则标记-记住"><a href="#正则标记-记住" class="headerlink" title="正则标记(记住)"></a>正则标记(记住)</h2><blockquote><p>如果要想进行正则的处理操作，那么首先需要对常用的正则标记有所掌握，从JDK1.4开始，提供有java.util.regex开发包，这个包里面提供有一个Pattern程序类，在这个程序类里面定义有所有支持的正则标记。</p></blockquote><blockquote><p>单个字符匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">任意字符：表示由任意字符组成;</span><br><span class="line">\\: 表示匹配\;</span><br><span class="line">\n: 标识匹配换行;</span><br><span class="line">\t: 匹配制表符;</span><br></pre></td></tr></table></figure><blockquote><p>单个字符集匹配(可以从中任选一个字符)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[abc] : 表示可能是字符a,b,c中的任意一个;</span><br><span class="line">[^abc] : 表示不是由字母a,b,c中的任意一个;</span><br><span class="line">[a-zA-Z] : 表示任意一个字母所组成，不区分大小写;</span><br><span class="line">[0-9] : 表示由一位数字所组成;</span><br></pre></td></tr></table></figure><blockquote><p>简化的字符集</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">. : 表示任意的一个字符;</span><br><span class="line">\d : 表示任意一个数字，等价于[0-9];</span><br><span class="line">\D : 表示不是数字，等价于[^0-9];</span><br><span class="line">\s : 表示匹配任意的一位空格，可能是空格、换行、制表符;  </span><br><span class="line">\S : 表示匹配任意的非空格数据;</span><br><span class="line">\w : 表示匹配字母、数字、下划线，等价于[a-zA-Z_0-9];</span><br><span class="line">\W : 表示匹配非字母、数字、下划线，等价于[^a-zA-Z_0-9];</span><br></pre></td></tr></table></figure><blockquote><p>边界匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^ ：匹配边界开始;</span><br><span class="line">$ : 匹配边界结束;</span><br></pre></td></tr></table></figure><blockquote><p>数量表达,默认情况下只有添加上了数量单位才可以匹配多位字符;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表达式? : 表示该表达式可以出现0次或一次;</span><br><span class="line">表达式* : 表示该表达式可以出现0次1次或多次;</span><br><span class="line">表达式+ : 表示该表达式可以出现1次或多次;</span><br><span class="line">表达式&#123;n&#125; : 表示该表达式出现n次;</span><br><span class="line">表达式&#123;n,&#125; : 表示该表达式出现n次或n次以上;</span><br><span class="line">表达式&#123;m,m&#125; : 表示该表达式出现n-m次;</span><br></pre></td></tr></table></figure><blockquote><p>逻辑表达式: 可以连接多个正则</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表达式X表达式Y ：X表达式之后紧跟上Y表达式;</span><br><span class="line">表达式X|表达式Y ：有一个表达式满足即可;</span><br><span class="line">(表达式): 为表达式设置一个整体描述，可以为整体描述设置数量单位;</span><br></pre></td></tr></table></figure><h2 id="String类对正则的支持"><a href="#String类对正则的支持" class="headerlink" title="String类对正则的支持"></a>String类对正则的支持</h2><blockquote><p>在进行正则表达式大部分处理的情况下都会基于String类来完成，并且在String类里面提供有如下与正则有关的操作方法:</p></blockquote><hr><blockquote><p><code>public boolean matches(String regex)</code></p></blockquote><p>将指定字符串进行正则判断</p><hr><blockquote><p><code>public String replaceAll(String regex, String replacement)</code></p></blockquote><p>替换全部</p><hr><blockquote><p><code>public String replaceFirst(String regex, String replacement)</code></p></blockquote><p>替换首个</p><hr><blockquote><p><code>public String[] split(String regex)</code></p></blockquote><p>正则拆分</p><hr><blockquote><p><code>public String[] split(String regex, int limit)</code></p></blockquote><p>正则拆分</p><hr><p>范例：实现字符串的替换（删除掉非字母与数字）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"djfosdjfoj3j4o3#@#@OJOjojoj@J#$JOjoj"</span>;</span><br><span class="line">        String regex = <span class="string">"[^a-zA-Z0-9]+"</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex, <span class="string">""</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>范例：实现字符串的拆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"fi2121d2jf3oij1fj"</span>;</span><br><span class="line">        String regex = <span class="string">"\\d+"</span>;</span><br><span class="line">        String[] result = str.split(regex);</span><br><span class="line">        System.out.println(Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在正则的处理的时候对于拆分与替换的操作相对容易一些，但是比较麻烦的是数据验证部分。</p></blockquote><p>范例：判断一个字符串是否为小数，如果是小数则将其变为double类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"100.1"</span>;</span><br><span class="line">        String regex = <span class="string">"\\d+(\\.\\d+)?"</span>;</span><br><span class="line">        System.out.println(str.matches(regex));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>范例：判断一个字符串是否是由日期所组成，如果是由日期所组成则将其转为Date类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String str = <span class="string">"1994-09-12"</span>;</span><br><span class="line">        String regex = <span class="string">"\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;"</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.matches(regex)) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>)).parse(str));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，正则表达式无法对里面的内容进行判断，只能对格式进行判断处理</p></blockquote><p>范例：验证email地址:</p><ul><li>email的用户名可以由字母、数字、下划线所组成（不应该使用<code>_</code>开头）;</li><li>email的域名可以由字母、数字、_、-所组成;</li><li>域名的后缀必须是：.net,.com,.cn,.com.cn,.org,.gov</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"mail@qipo.net"</span>;</span><br><span class="line">        String regex = <span class="string">"[a-zA-Z0-9]\\w+@\\w+.(net|com|cn|org|gov|com.cn)"</span>;</span><br><span class="line">        System.out.println(str.matches(regex));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java-util-regex开发包"><a href="#java-util-regex开发包" class="headerlink" title="java.util.regex开发包"></a>java.util.regex开发包</h2><blockquote><p>虽然在大部分的情况下都可以利用String类实现正则的操作，但是也有一些情况下需要使用到java.util.regex开发包中提供的正则处理类。</p><p>在这个包中一共定义有两个类：Pattern（正则表达式的编译类），Matcher（匹配类）。</p></blockquote><h3 id="Pattern类"><a href="#Pattern类" class="headerlink" title="Pattern类"></a>Pattern类</h3><blockquote><p>Pattern类提供有正则表达式的编译处理支持：<code>public static Pattern compile(String regex)</code></p><p>同时也提供有字符串的拆分操作支持: <code>public String[] split(CharSequence input)</code></p></blockquote><p>范例： 字符串拆分（字符串按照非字母进行拆分操作）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"fjsdojo3ojf9gjdfoj4ojfjos3423jofjdosjf"</span>;</span><br><span class="line">        String regex = <span class="string">"[^a-zA-Z]+"</span>;</span><br><span class="line">        Pattern pat = Pattern.compile(regex);</span><br><span class="line">        String[] result = pat.split(str);</span><br><span class="line">        System.out.println(Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Matcher类"><a href="#Matcher类" class="headerlink" title="Matcher类"></a>Matcher类</h3><blockquote><p>实现了正则匹配的处理类，这个类的对象实例化依靠Pattern类完成：</p><ul><li>Pattern类提供的方法： <code>public Mathcher matcher(CharSequence input)</code>;<br>当获取了Matcher类对象之后就可以利用该类中的方法进行如下操作：</li><li>正则匹配：<code>public boolean matches()</code>;</li><li>字符串替换：<code>pulice String replaceAll(String replacement)</code>;</li></ul></blockquote><hr><p>范例：字符串匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"101"</span>;</span><br><span class="line">        String regex = <span class="string">"\\d+"</span>;</span><br><span class="line">        Pattern pat = Pattern.compile(regex);</span><br><span class="line">        Matcher mat = pat.matcher(str);</span><br><span class="line">        System.out.println(mat.matches());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果纯粹的是以拆分、替换、匹配三种操作为例根本用不到java.util.regex开发包，只依靠String类就都可以实现了。</p></blockquote><p>范例： 找出字符串中的所有数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"fjodsijfoi3jjojoi34234jfo3423"</span>;</span><br><span class="line">        String regex = <span class="string">"\\D+"</span>;</span><br><span class="line">        Pattern pat = Pattern.compile(regex);</span><br><span class="line">        Matcher mat = pat.matcher(str);</span><br><span class="line">        System.out.println(mat.replaceAll(<span class="string">""</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>但是Matcher里面提供有一种分组的功能，而这种分组的功能是String所不具备的。   </p></blockquote><p>范例：要求取出${}里面的所有内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"hello$&#123;var&#125;,my name is $&#123;name&#125;"</span>;</span><br><span class="line">        String regEx = <span class="string">"\\$\\&#123;\\w+\\&#125;"</span>;</span><br><span class="line">        Pattern pat = Pattern.compile(regEx);</span><br><span class="line">        Matcher mat = pat.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (mat.find()) &#123; <span class="comment">// 是否有匹配成功的内容</span></span><br><span class="line">            System.out.println(mat.group(<span class="number">0</span>).replaceAll(<span class="string">"\\$|\\&#123;|\\&#125;"</span>, <span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>java.util.regex开发包，如果不是进行一些更为复杂的正则处理是很难使用到的，而String类所提供的功能只适合于正则的基本操作。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;通过之前一系列的分析，String是一个非常万能的类，因为String不仅仅可以支持有各种字符串的处理操作，也支持有向各个数据类型的转换，所以在项目的开发之中，只要是用户输入的信息基本上都用String表示。&lt;br&gt;于是在向其他数据类型转换时候为了
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
      <category term="regex" scheme="https://blog.loong.io/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Java 时间处理类</title>
    <link href="https://blog.loong.io/2019/09/03/java-date/"/>
    <id>https://blog.loong.io/2019/09/03/java-date/</id>
    <published>2019-09-03T08:11:22.000Z</published>
    <updated>2020-06-03T02:37:45.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日期处理类"><a href="#日期处理类" class="headerlink" title="日期处理类"></a>日期处理类</h1><blockquote><p>从整体的java来讲一直在强调简单java类的主要设计来自于数据表的结构，那么在数据表的结构里面常用的类型：数字、字符串、日期。</p></blockquote><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><blockquote><p>在Java里面提供有一个<code>java.util.Date</code>的类，这个类直接实例化就可以获取当前的日期时间。</p></blockquote><p>范例： 观察java.util.Date类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);  <span class="comment">// Tue Sep 03 10:52:01 CST 2019</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个时候需要进一步的去观察Date类中的构造方法：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Date类中的无参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Date类中的有参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">long</span> date)</span> </span>&#123;</span><br><span class="line">    fastTime = date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过以上的源代码分析可以得出一个结论：Date类中只是对long数据的一种包装。所以Date类中一定提供有Date与long数据类型转换的方法：</p><ul><li>将long数据类型转为日期：<code>public Date(long date)</code>;</li><li>将Date转为long数据类型：<code>public long getTime()</code>;</li></ul></blockquote><p>范例：观察Date与long之间的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">long</span> current = date.getTime();</span><br><span class="line">        current += <span class="number">864000</span> * <span class="number">1000</span>; <span class="comment">// 加上10天</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date(current));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>long之中可以保存毫秒的数据级，这样方便程序处理。</p></blockquote><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><blockquote><p>虽然Date可以获取当前的日期时间，但是默认情况下Date类输出的日期时间结构并不能够被我们国人所习惯，那么现在就需要对显示的格式进行格式化的处理，为了可以格式化日期，在java.text<br>包中提供有SimpleDateFormat程序类。<br>该类是DateFormat类的子类，在该类中提供有如下的方法：</p><ul><li>[DateFormat继承]将日期格式化：<code>public final String format(Date date)</code>;</li><li>[DateFormat继承]将字符串转为日期：<code>public Date parse(String source) throws parseException</code>;</li><li>构造方法：<code>public SimpleDateFormat(String pattern)</code>;<ul><li>日期格式：年（yyyy），月（MM），日（dd），时（HH），分（mm），秒（ss），毫秒（SSS）;</li></ul></li></ul></blockquote><p>范例：格式化日期显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:MM:ss.SSS"</span>);</span><br><span class="line">        String str = simpleDateFormat.format(date);</span><br><span class="line">        System.out.println(str); <span class="comment">// 2019-09-03 14:09:24.415</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>除了可以将日期格式化为字符串之后，也可以字符串与日期之间的格式化转换处理。</p></blockquote><p>范例： 将日期转为Date</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String birthday = <span class="string">"1994-06-23 12:23:23.988"</span>;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>);</span><br><span class="line">        Date date = simpleDateFormat.parse(birthday);</span><br><span class="line">        System.out.println(date); <span class="comment">// Thu Jun 23 12:23:23 CST 1994</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果在进行字符串定义的时候，所使用的日期时间数字超过了指定的合理范围，则会自动进位处理</p></blockquote><p>范例：数字格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberFormatTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> num = <span class="number">123232343.23</span>;</span><br><span class="line">        String str = NumberFormat.getInstance().format(num);</span><br><span class="line">        System.out.println(str); <span class="comment">// 123,232,343.23</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>String可以向所有类型转换，基本类型、日期类型。</p></blockquote><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><blockquote><p>Calendar是Java提供的一个util类，在java.util中。我们在开发过程中经常遇到，需要对时间进行处理的方式。而Java中Calendar给我们提供了很好的控制方式。</p></blockquote><p>范例：获取时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用默认时区和语言环境获取一个日历</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        <span class="comment">//  赋值时年月日时分秒常用的6个值，注意月份下标从0开始，所以取月份要+1</span></span><br><span class="line">        System.out.println(<span class="string">"年："</span> + calendar.get(Calendar.YEAR));</span><br><span class="line">        System.out.println(<span class="string">"月："</span> + calendar.get(Calendar.MONTH) + <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"日："</span> + calendar.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">        System.out.println(<span class="string">"时："</span> + calendar.get(Calendar.HOUR_OF_DAY));</span><br><span class="line">        System.out.println(<span class="string">"分: "</span> + calendar.get(Calendar.MINUTE));</span><br><span class="line">        System.out.println(<span class="string">"秒："</span> + calendar.get(Calendar.SECOND));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：设置时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 如果想设置为某个日期，可以一次设置年月日时分秒，由于月份下标从0开始赋值月份要-1</span></span><br><span class="line">        <span class="comment">// cal.set(year, month, date, hourOfDay, minute, second);</span></span><br><span class="line">        cal.set(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">        System.out.println(cal.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单个字段一一设置</span></span><br><span class="line">        Calendar cal1 = Calendar.getInstance();</span><br><span class="line">        cal1.set(Calendar.YEAR, <span class="number">2018</span>);</span><br><span class="line">        cal1.set(Calendar.MONTH, Calendar.FEBRUARY);</span><br><span class="line">        cal1.set(Calendar.DAY_OF_MONTH, <span class="number">15</span>);</span><br><span class="line">        cal1.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">        cal1.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">        cal1.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line">        System.out.println(cal1.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：时间计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.set(<span class="number">2018</span>, Calendar.MARCH, <span class="number">15</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">        cal.add(Calendar.SECOND, <span class="number">1</span>);</span><br><span class="line">        System.out.println(cal.getTime());  <span class="comment">// Fri Feb 16 00:00:00 CST 2018</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1月31号加一个月会出现什么情况呢？是2月31号？</span></span><br><span class="line">        Calendar cal1 = Calendar.getInstance();</span><br><span class="line">        cal1.set(<span class="number">2019</span>, Calendar.JANUARY, <span class="number">31</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(cal1.getTime());</span><br><span class="line">        cal1.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">        System.out.println(cal1.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明 add 月份时，会将不存在的日期归为当月日历的最后一天。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日期处理类&quot;&gt;&lt;a href=&quot;#日期处理类&quot; class=&quot;headerlink&quot; title=&quot;日期处理类&quot;&gt;&lt;/a&gt;日期处理类&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;从整体的java来讲一直在强调简单java类的主要设计来自于数据表的结构，那么在数据表的结
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程相关案例</title>
    <link href="https://blog.loong.io/2019/09/02/java-thread-case/"/>
    <id>https://blog.loong.io/2019/09/02/java-thread-case/</id>
    <published>2019-09-02T14:34:32.000Z</published>
    <updated>2020-06-03T02:37:45.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程相关案例"><a href="#多线程相关案例" class="headerlink" title="多线程相关案例"></a>多线程相关案例</h1><h2 id="多线程案例1-加减操作"><a href="#多线程案例1-加减操作" class="headerlink" title="多线程案例1:加减操作"></a>多线程案例1:加减操作</h2><blockquote><p>设计4个线程对象,两个线程执行减操作,两个线程执行加操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.多线程相关案例;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// flag为true可以执行加法操作,不可以执行减法操作</span></span><br><span class="line">    <span class="comment">// flag为false可以执行减法操作,不可以执行加法操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">while</span> (!<span class="keyword">this</span>.flag) &#123; <span class="comment">// flag为false只能执行减法操作</span></span><br><span class="line">           <span class="keyword">super</span>.wait(); <span class="comment">// 需要等待</span></span><br><span class="line">       &#125;</span><br><span class="line">       Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.num++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"运行, num = "</span> + <span class="keyword">this</span>.num);</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>; <span class="comment">// 可以进行减法操作</span></span><br><span class="line">        <span class="keyword">super</span>.notifyAll(); <span class="comment">// 唤醒其他线程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">this</span>.flag) &#123; <span class="comment">// flag为true只能进行加法操作,减法操作需要等待</span></span><br><span class="line">            <span class="keyword">super</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.num--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"运行, num = "</span> + <span class="keyword">this</span>.num);</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">true</span>    ; <span class="comment">// 可以进行加法操作</span></span><br><span class="line">        <span class="keyword">super</span>.notifyAll(); <span class="comment">// 唤醒其他线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddThread</span><span class="params">(Resource res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">50</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.res.add();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubThread</span><span class="params">(Resource res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">50</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.res.sub();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Resource res = <span class="keyword">new</span> Resource();</span><br><span class="line">        AddThread at = <span class="keyword">new</span> AddThread(res);</span><br><span class="line">        SubThread st = <span class="keyword">new</span> SubThread(res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(at, <span class="string">"加法操作-1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(at, <span class="string">"加法操作-2"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(st, <span class="string">"减法操作-1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(st, <span class="string">"减法操作-2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程案例分析"><a href="#多线程案例分析" class="headerlink" title="多线程案例分析"></a>多线程案例分析</h2><p>设计一个生产电脑和搬运电脑的类,要求生产出一台电脑就搬走一台电脑,如果没有新的电脑生产出来,则搬运工要等待新电脑生产出来;如果产出的电脑没有搬走,则要等待电脑搬走之后再生产,并统计出生产的电脑数量.</p><p>在本程序之中实现的就是一个标准的生产者与消费者的处理模型,那么下面实现具体的程序代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.多线程相关案例;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String name,<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">       <span class="keyword">this</span>.price = price;</span><br><span class="line">       count++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"第"</span> + count + <span class="string">"台电脑,电脑名字: "</span> + <span class="keyword">this</span>.name + <span class="string">", 电脑价格: "</span> + <span class="keyword">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Asset</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.computer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.computer = <span class="keyword">new</span> Computer(<span class="string">"浪潮"</span>, <span class="number">1200.00</span>);</span><br><span class="line">        System.out.println(<span class="string">"生产电脑:"</span> + <span class="keyword">this</span>.computer);</span><br><span class="line">        <span class="keyword">super</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.computer == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">super</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"搬运电脑:"</span> + <span class="keyword">this</span>.computer);</span><br><span class="line">        <span class="keyword">this</span>.computer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">super</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Asset asset;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Asset asset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.asset = asset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">50</span> ; x++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.asset.make();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Asset asset;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Asset asset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.asset = asset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x ++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.asset.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Asset asset = <span class="keyword">new</span> Asset();</span><br><span class="line">        Producer pt = <span class="keyword">new</span> Producer(asset);</span><br><span class="line">        Consumer ct = <span class="keyword">new</span> Consumer(asset);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(pt, <span class="string">"生产电脑-1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(pt, <span class="string">"生产电脑-2"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ct, <span class="string">"搬运电脑-1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ct, <span class="string">"搬运电脑-2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程案例分析3-实现一个竞拍抢答程序"><a href="#多线程案例分析3-实现一个竞拍抢答程序" class="headerlink" title="多线程案例分析3 实现一个竞拍抢答程序"></a>多线程案例分析3 实现一个竞拍抢答程序</h2><blockquote><p>要求设置三个抢答者(三个线程),而后同时发出抢答指令,抢答成功给出成功提示,未抢答成功者给出失败提示.</p></blockquote><p>由于这个多线程的操作由于里面需要牵扯到数据的返回问题,那么现在最好使用的Callable接口是比较方便的一种操作形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.多线程相关案例;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.flag) &#123;</span><br><span class="line">                <span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">"抢答成功!"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">"抢答失败!"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        FutureTask&lt;String&gt; task1 = <span class="keyword">new</span> FutureTask&lt;&gt;(myThread);</span><br><span class="line">        FutureTask&lt;String&gt; task2 = <span class="keyword">new</span> FutureTask&lt;&gt;(myThread);</span><br><span class="line">        FutureTask&lt;String&gt; task3 = <span class="keyword">new</span> FutureTask&lt;&gt;(myThread);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(task1, <span class="string">"竞赛者A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(task2, <span class="string">"竞赛者B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(task3, <span class="string">"竞赛者C"</span>).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(task1.get());</span><br><span class="line">        System.out.println(task2.get());</span><br><span class="line">        System.out.println(task3.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程相关案例&quot;&gt;&lt;a href=&quot;#多线程相关案例&quot; class=&quot;headerlink&quot; title=&quot;多线程相关案例&quot;&gt;&lt;/a&gt;多线程相关案例&lt;/h1&gt;&lt;h2 id=&quot;多线程案例1-加减操作&quot;&gt;&lt;a href=&quot;#多线程案例1-加减操作&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
      <category term="Thread" scheme="https://blog.loong.io/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程深入话题</title>
    <link href="https://blog.loong.io/2019/09/02/java-thread-hight-level/"/>
    <id>https://blog.loong.io/2019/09/02/java-thread-hight-level/</id>
    <published>2019-09-02T14:32:42.000Z</published>
    <updated>2020-06-03T02:37:45.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程深入话题"><a href="#多线程深入话题" class="headerlink" title="多线程深入话题"></a>多线程深入话题</h1><h2 id="优雅的停止线程"><a href="#优雅的停止线程" class="headerlink" title="优雅的停止线程"></a>优雅的停止线程</h2><p>在多线程操作之中如果我们要启动多线程肯定使用Thread类中的start()方法.而如果对于多线程需要进行停止处理,原本Thread类原本提供有stop()方法.<br>但是对于这些方法从JDK1.2版本开始就已经将其废除了,而且一直到现在也不建议出现在你的代码之中,而除了stop()方法之外还有几个方法也被废除了:</p><ul><li>停止多线程: <code>pulic void stop();</code></li><li>销毁多线程: <code>public void destroy()</code></li><li>挂起线程: <code>public final void suspend();</code></li><li>恢复挂起的线程: <code>public final void resume();</code></li></ul><p>之所以废除这些方法,主要的原因是因为这些方法有可能会导致线程的死锁,所以从JDK1.2开始就都不建议使用了.</p><p>这个时候要想实现线程的停止需要通过一种柔和的方式来进行.</p><p>范例: 实现线程柔和的停止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.多线程深入;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"正在运行, num = "</span> + num++);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"运行线程"</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">200</span>); <span class="comment">// 运行200ms</span></span><br><span class="line">        flag = <span class="keyword">false</span>; <span class="comment">// 停止线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万一现在有其他的线程去控制这个flag的内容,那么这个时候对于线程的停止也不是说停就立刻停止的,而是会在执行中判断flag的内容来完成.</p><h2 id="后台守护进程"><a href="#后台守护进程" class="headerlink" title="后台守护进程"></a>后台守护进程</h2><p>现在假设有一个人并且这个人有一个保镖,那么这个保镖一定是在这个人活着的时候进行守护,如果这个人已经死了,那么保镖就没用了,所以在多线程里面可以进行守护进程的定义,也就是说如果现在主线程的程序或者<br>其他的线程还在执行的时候,那么守护线程将一直存在,并且运行在后台状态.</p><p>在Thread类里面提供有如下的守护线程的操作方法:</p><ul><li>设置为守护线程: <code>public final void setDaemon(boolean on)</code></li><li>判断是否为守护线程: <code>public final boolean isDaemon()</code></li></ul><p>范例: 使用守护线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.多线程深入;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread userThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">10</span> ; x++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"正在运行, x = "</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"用户线程"</span>);</span><br><span class="line"></span><br><span class="line">        Thread daemonThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; Integer.MAX_VALUE ; x++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"正在运行, x = "</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"守护线程"</span>);</span><br><span class="line"></span><br><span class="line">        daemonThread.setDaemon(<span class="keyword">true</span>); <span class="comment">// 设置为守护线程</span></span><br><span class="line">        userThread.start();</span><br><span class="line">        daemonThread.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以发现所有的守护线程都是围绕在用户线程的周围,如果程序执行完毕了,守护线程也就消失了,在整个JVM里面最大的守护线程就是GC线程.</p></blockquote><blockquote><p>程序执行中GC线程会一直存在,如果程序执行完毕,GC线程也将消失.</p></blockquote><h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><p>在多线程的定义之中,volatile关键字主要是在属性定义上使用的,表示此属性为直接数据操作,而不进行副本的拷贝处理.<br>这样的话在一些书上就将其错误的理解为同步属性了.</p><p><img src="http://imgs.loong.io/image/Thread/volatile.jpg" alt></p><p>在进行正常的变量处理的时候往往会经历如下的几个步骤:</p><ul><li>获取变量原有的数据内容副本;</li><li>利用副本为变量进行数学计算;</li><li>将计算后的变量,保存到原始空间之中;</li></ul><p>而如果一个属性上追加了volatile关键字,表示的就是不使用副本,而是直接操作原始变量,相当于节约了拷贝副本,重新保存的步骤.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.多线程深入;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket_sale</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> ticket = <span class="number">5</span>; <span class="comment">// 直接进行内存的操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">this</span>.ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"卖票, 现在票数为 "</span> + <span class="keyword">this</span>.ticket--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket_sale ts = <span class="keyword">new</span> Ticket_sale();</span><br><span class="line">        <span class="keyword">new</span> Thread(ts, <span class="string">"票贩子1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ts, <span class="string">"票贩子2"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ts, <span class="string">"票贩子3"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>volatile与synchronized的区别?</p></blockquote><ul><li>volatile主要是在属性上使用的,而synchronized是在代码块与方法上使用的;</li><li>volatile无法描述同步的处理,它只是一种直接操作内存的处理,避免了副本的操作,而synchronized是实现同步的;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程深入话题&quot;&gt;&lt;a href=&quot;#多线程深入话题&quot; class=&quot;headerlink&quot; title=&quot;多线程深入话题&quot;&gt;&lt;/a&gt;多线程深入话题&lt;/h1&gt;&lt;h2 id=&quot;优雅的停止线程&quot;&gt;&lt;a href=&quot;#优雅的停止线程&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
      <category term="Thread" scheme="https://blog.loong.io/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程 生产者与消费者模型</title>
    <link href="https://blog.loong.io/2019/09/02/java-thread-producerAndconsumer/"/>
    <id>https://blog.loong.io/2019/09/02/java-thread-producerAndconsumer/</id>
    <published>2019-09-02T14:30:24.000Z</published>
    <updated>2020-06-03T02:37:45.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java多线程编程-综合案例"><a href="#Java多线程编程-综合案例" class="headerlink" title="Java多线程编程(综合案例)"></a>Java多线程编程(综合案例)</h1><p>在多线程的开发过程之中最为著名的案例就是生产者与消费者操作,该操作的主要流程如下:</p><ul><li>生产者负责信息内容的生产;</li><li>每当生产者生产完一项完整的信息之后消费者要从者里面取走信息;</li><li>如果生产者没有生产则消费者需要等待它生产完成,如果消费者还没有对信息进行消费,则生产者应该等待消费处理完成后在继续生产.</li></ul><h2 id="程序的基本实现"><a href="#程序的基本实现" class="headerlink" title="程序的基本实现"></a>程序的基本实现</h2><p>可以将生产者与消费者定义为两个独立的线程类对象.</p><p>既然生产者与消费者是两个队里的线程,那么这两个独立的线程之间就需要有一个数据的保存的集中点,那么可以定义一个Message类进行数据的保存.</p><p><img src="http://imgs.loong.io/image/Thread/Producer&amp;Comsumer.PNG" alt></p><p>范例: 实现程序的基本结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.生产者与消费者模型;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.msg.setTitle(<span class="string">"王五"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.msg.setContent(<span class="string">"王家第五子"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.msg.setTitle(<span class="string">"赵六"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.msg.setContent(<span class="string">"赵家第六子"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span> <span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x ++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.msg.getTitle() + <span class="string">"-"</span> + <span class="keyword">this</span>.msg.getContent() );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(msg)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(msg)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过整个代码的执行你会发现有两个主要问题:</p></blockquote><ul><li>数据不同步;</li><li>生产一个取走一个,但是发现有重复生产和重复取出的问题;</li></ul><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p>如果要解决问题,首先解决的就是数据同步的处理问题,如果要想解决数据同步最简单的做法是使用synchronized关键字定义同步代码块或者同步方法,于是这个时候对于同步的处理就可以直接在Message类中完成.</p><p>范例:解决数据同步问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.生产者与消费者模型;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span> <span class="params">(String title, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">get</span> <span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.title + <span class="string">" -  "</span> + <span class="keyword">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                msg.set(<span class="string">"王五"</span>, <span class="string">"王家第五子"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                msg.set(<span class="string">"赵六"</span>, <span class="string">"赵家第六字"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span> <span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x ++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(msg.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(msg)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(msg)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在进行同步处理的时候肯定需要一个同步的处理对象,那么此时肯定要将同步操作交与Message类处理是最合适的.</p></blockquote><blockquote><p>这个时候发现数据已经可以正常的保持一致了,但是对于重复操作的问题依然存在.</p></blockquote><h3 id="线程等待与唤醒"><a href="#线程等待与唤醒" class="headerlink" title="线程等待与唤醒"></a>线程等待与唤醒</h3><blockquote><p>如果说现在要解决生产者与消费者的问题,那么最好的解决方案就是使用等待与唤醒机制.而对于等待与<br>唤醒操作机制,主要是依靠Object类中提供的方法处理的;</p></blockquote><blockquote><p>等待机制:</p><ul><li>死等: <code>public final void wait() throws InterruptedException;</code></li><li>设置等待时间: <code>public final void wait(long timeout) throws InterruptedException;</code></li><li>设置等待时间: <code>public final void wait(long timeout, int nanos) throws InterruptedException;</code></li></ul></blockquote><blockquote><p>唤醒机制:</p><ul><li>唤醒一个等待线程: <code>public final void notify();</code></li><li>唤醒全部等待线程: <code>public final void notifyAll()</code></li></ul></blockquote><p>如果此时有若干个等待线程的话,那么notify()表示的是唤醒第一个等待的,而其他的线程继续等待,而notifyAll()会唤醒<br>所有等待的线程,那个线程的优先级高就可能先执行.</p><p>对于当前的问题主要的解决应该是通过Message类完成处理.</p><p>范例: 修改Message类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.生产者与消费者模型;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// flag 为true,代表着允许生产,不允许消费</span></span><br><span class="line">    <span class="comment">// flag 为false,代表着允许消费,不允许生产</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span> <span class="params">(String title, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.flag) &#123; <span class="comment">// 还未消费,等待消费</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>; <span class="comment">// 生产完成了</span></span><br><span class="line">        <span class="keyword">this</span>.notify(); <span class="comment">// 唤醒等待的线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">get</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.flag) &#123; <span class="comment">// 还未生产,等待生产</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.title + <span class="string">" -  "</span> + <span class="keyword">this</span>.content;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.flag = <span class="keyword">true</span>; <span class="comment">// 继续生产</span></span><br><span class="line">            <span class="keyword">super</span>.notify(); <span class="comment">// 唤醒等待的线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                msg.set(<span class="string">"王五"</span>, <span class="string">"王家第五子"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                msg.set(<span class="string">"赵六"</span>, <span class="string">"赵家第六字"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span> <span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x ++) &#123;</span><br><span class="line">            System.out.println(msg.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(msg)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(msg)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种处理形式就是在进程多线程开发过程之中最原始的处理方案,整个的等待,同步,唤醒机制都由开发者自行通过原生代码实现控制.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java多线程编程-综合案例&quot;&gt;&lt;a href=&quot;#Java多线程编程-综合案例&quot; class=&quot;headerlink&quot; title=&quot;Java多线程编程(综合案例)&quot;&gt;&lt;/a&gt;Java多线程编程(综合案例)&lt;/h1&gt;&lt;p&gt;在多线程的开发过程之中最为著名的案例就是
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
      <category term="Thread" scheme="https://blog.loong.io/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程的同步与死锁</title>
    <link href="https://blog.loong.io/2019/09/02/java-thread-synchronized/"/>
    <id>https://blog.loong.io/2019/09/02/java-thread-synchronized/</id>
    <published>2019-09-02T14:27:09.000Z</published>
    <updated>2020-06-03T02:37:45.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程的同步与死锁"><a href="#线程的同步与死锁" class="headerlink" title="线程的同步与死锁"></a>线程的同步与死锁</h1><p>在多线程的处理之中,可以利用Runnable描述多个线程操作的资源,而Thread描述每一个线程对象,于是当多个线程<br>当同一线程访问同一资源的时候如果处理不当就会产生数据的错误操作.</p><h2 id="同步问题的引出"><a href="#同步问题的引出" class="headerlink" title="同步问题的引出"></a>同步问题的引出</h2><p>下面编写一个简单的卖票程序,将创建若干个线程对象实现卖票的处理操作.</p><p>范例: 卖票处理操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程的同步与死锁;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaleTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"卖票, 还有票"</span> + <span class="keyword">this</span>.ticket --);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"票已经卖光了!!"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SaleTicket st = <span class="keyword">new</span> SaleTicket();</span><br><span class="line">        <span class="keyword">new</span> Thread(st, <span class="string">"票贩子1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(st, <span class="string">"票贩子2"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(st, <span class="string">"票贩子3"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的程序将创建三个线程对象,并且这三个线程对象都将进行这10张票的销售.此时的程序在进行卖票处理的时候病没有任何问题(假象),下面可以模拟一下卖票中的延迟操作:</p><figure class="highlight plain"><figcaption><span>线程.线程的同步与死锁;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class SaleTicket implements Runnable &#123;</span><br><span class="line">    private int ticket = 10;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            if(this.ticket &gt; 0) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(100); // 模拟网络延迟</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot;卖票, 还有票&quot; + this.ticket --);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.out.println(&quot;票已经卖光了!!&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ThreadDemo1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SaleTicket st = new SaleTicket();</span><br><span class="line">        new Thread(st, &quot;票贩子1&quot;).start();</span><br><span class="line">        new Thread(st, &quot;票贩子2&quot;).start();</span><br><span class="line">        new Thread(st, &quot;票贩子3&quot;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个时候追加了网络延迟问题就暴露出来了,而实际上这个问题一直都存在.</p></blockquote><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>经过分析以后已经可以确认同步问题所产生的主要原因了,那么下面就需要进行同步问题的解决,但是解决同步问题的关键是什么,是锁.指的是当某一个线程执行操作的时候,其他线程外面等待;</p><p><img src="http://imgs.loong.io/image/Thread/sync.jpg" alt></p><p>如果要想在程序之中实现这把锁的功能,就可以使用synchronized关键字来实现,利用此关键字可以定义我们的同步方法或同步代码快,在同步代码块的操作里面的代码只允许一个线程执行.</p><h3 id="利用同步代码快进行处理"><a href="#利用同步代码快进行处理" class="headerlink" title="利用同步代码快进行处理"></a>利用同步代码快进行处理</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">synchronized</span><span class="params">(同步对象)</span></span> &#123;</span><br><span class="line">    同步代码操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一般要进行同步对象处理的时候可以采用当前对象this进行同步.</p></blockquote><p>范例: 利用同步代码快解决数据同步访问的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程的同步与死锁;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaleThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; <span class="comment">// 同步代码快</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>); <span class="comment">// 模拟网络延迟</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"卖票, 还有票"</span> + <span class="keyword">this</span>.ticket --);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"票已经卖光了!!"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SaleThread saleThread = <span class="keyword">new</span> SaleThread();</span><br><span class="line"></span><br><span class="line">        Thread threadA = <span class="keyword">new</span> Thread(saleThread, <span class="string">"票贩子1"</span>);</span><br><span class="line">        Thread threadB = <span class="keyword">new</span> Thread(saleThread, <span class="string">"票贩子2"</span>);</span><br><span class="line">        Thread threadC = <span class="keyword">new</span> Thread(saleThread, <span class="string">"票贩子3"</span>);</span><br><span class="line"></span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">        threadC.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入同步处理之后.程序的整体性能下降了,同步实际上会造成性能的降低.</p><h3 id="利用同步方法解决"><a href="#利用同步方法解决" class="headerlink" title="利用同步方法解决"></a>利用同步方法解决</h3><blockquote><p>只需要在方法定义上使用synchronized关键字即可.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程的同步与死锁;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>); <span class="comment">// 模拟网络延迟</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"卖票, 还有票"</span> + <span class="keyword">this</span>.ticket --);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"票已经卖光了!!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.sale()) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable run = <span class="keyword">new</span> TicketThread();</span><br><span class="line">        <span class="keyword">new</span> Thread(run, <span class="string">"票贩子1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(run, <span class="string">"票贩子2"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(run, <span class="string">"票贩子3"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在日后学习Java类库的时候会发现,系统中许多的类库使用的同步处理采用的都是同步方法.</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><blockquote><p>死锁是进行多线程同步的处理之中有可能产生的一种问题,所谓的死锁指的是若干个线程彼此互相等待的状态;</p></blockquote><p>下面通过一个简单的代码观察一下死锁的表现形式.</p><p>范例: 死锁的展示</p><blockquote><p>现在死锁造成的主要原因是因为彼此都在互相等待着,等待着对方先让出资源.死锁实际上是一种开发之中出现的不确定的状态,有的时候代码如果处理不当则会不定期出现死锁,这是属于正常开发之中的调试问题.</p></blockquote><blockquote><p>若干个线程访问同意资源时,一定要进行同步处理,而过多的同步会造成死锁.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线程的同步与死锁&quot;&gt;&lt;a href=&quot;#线程的同步与死锁&quot; class=&quot;headerlink&quot; title=&quot;线程的同步与死锁&quot;&gt;&lt;/a&gt;线程的同步与死锁&lt;/h1&gt;&lt;p&gt;在多线程的处理之中,可以利用Runnable描述多个线程操作的资源,而Thread描述每一个
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
      <category term="Thread" scheme="https://blog.loong.io/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程常用操作方法</title>
    <link href="https://blog.loong.io/2019/09/02/java-thread-method/"/>
    <id>https://blog.loong.io/2019/09/02/java-thread-method/</id>
    <published>2019-09-02T14:23:21.000Z</published>
    <updated>2020-06-03T02:37:45.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程常用操作方法"><a href="#线程常用操作方法" class="headerlink" title="线程常用操作方法"></a>线程常用操作方法</h1><p>多线程的主要操作方法都在Thread类中定义了.</p><h2 id="线程的命名与取得"><a href="#线程的命名与取得" class="headerlink" title="线程的命名与取得"></a>线程的命名与取得</h2><p>多线程的运行状态是不确定的,那么在程序的开发之宗为了可以获取到一些需要使用到线程就能够依靠线程的名字来进行操作.所以线程的名字是一个至关重要的概念,这样在Thread类之中就提供有线程名称的处理.</p><blockquote><p>构造方法: <code>public Thread(Runnable target, String name);</code></p></blockquote><blockquote><p>设置名字: <code>public final void setName(String name);</code></p></blockquote><blockquote><p>取得名字: <code>public final String getName();</code></p></blockquote><p>对于线程对象的获得是不可能只是依靠一个this来完成的,因为线程的状态不可控,但是有一点是明确的,所有的线程对象一定要执行run()方法,那么这个时候可以考虑获取当前线程,在Thread类里面提供有获取当前<br>线程的方法:</p><blockquote><p>获取当前线程: <code>public static Thread currentThread();</code></p></blockquote><p>范例: 观察线程的命名操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable, <span class="string">"线程A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable, <span class="string">"线程B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当开发者为线程设置名字的时候就使用设置的名字,而如果没有设置名字,则会自动生成一个不重复的名字,这种自动的属性命名主要是依靠了static属性完成的,在Thread类里面定义有如下操作:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pirvate <span class="keyword">static</span> <span class="keyword">int</span> threadInitNumber;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">nextThreadNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> threadInitNumber++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例: 观察下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="keyword">new</span> Thread(mt, <span class="string">"线程A"</span>).start();</span><br><span class="line">        mt.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过此时的代码可以发现当使用了<code>mt.run()</code>直接在住方法调用线程类对象啊中的run()方法所获得的线程对象的名字为<code>main</code>,所以可以得到一个结论: 住方法也是一个线程.<br>那么现在问题来了,所有的线程都是在进程上的划分,那么进程在哪里?</p><blockquote><p>每当使用java命令执行程序的时候就表示启动了一个JVM的进程,一台电脑上可以启动若干个JVM进程,所以每一个JVM的进程都会有各自的线程.</p></blockquote></blockquote><blockquote><p>在任何的开发之中,主线程可以创建若干个子线程,创建子线程的目的是可以将一些复杂逻辑或者比较耗时的逻辑交由子线程处理;</p></blockquote><p>范例: 子线程处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"任务一"</span>);</span><br><span class="line">        System.out.println(<span class="string">"任务二"</span>);</span><br><span class="line"><span class="comment">//        int temp = 0;</span></span><br><span class="line"><span class="comment">//        for(int i = 0; i&lt; Integer.MAX_VALUE; i++) &#123;</span></span><br><span class="line"><span class="comment">//            temp+=i;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">                temp+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        System.out.println(<span class="string">"任务N"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>子线程负责处理整体流程,而子线程负责处理耗时操作.</p></blockquote><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><blockquote><p>如果说现在希望某一个线程可以暂缓执行一次,那么就可以使用休眠处理,在Thread类中,定义的休眠的方法如下:</p><blockquote><ul><li>休眠: <code>public static void sleep(long millis) throws InterruptedException;</code></li><li>休眠: <code>public static void sleep(long millis, int nanos) throws InterruptedException;</code><br>在休眠的时候有可能会产生中断异常<code>InterruptedException</code>,中断异常属于Exception的子类,所以证明该异常必须进行处理.</li></ul></blockquote></blockquote><p>范例: 观察休眠处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSleepDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">", x = "</span> + x);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"线程A"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>休眠的主要特点就是可以自动实现线程的唤醒,以继续进行后续的处理.但是需要注意的是,如果现在有多个线程对象,那么休眠也是有先后顺序的.</p></blockquote><p>范例: 产生多个线程对象进行休眠处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多个线程休眠</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreadSleepDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">5</span>; x++) &#123;</span><br><span class="line">            Runnable run = ()-&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">10</span>; y++)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">", y = "</span> + y);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">new</span> Thread(run, <span class="string">"线程-"</span>+ x).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时将产生五个线程对象,并且者五个线程对象执行的方法体是相同的.此时从程序执行感觉上来讲好像是若干个线程一起进行了休眠,而后一起进行了唤醒,但是实际上是有差别的.</p><h2 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h2><blockquote><p>在之前发现线程的休眠里面提供有一个中断异常,实际上就证明线程的休眠是可以被打断的,而打断肯定是由其他线程完成的,在Thread类里面提供有这种中断执行的处理方法:</p><blockquote><ul><li>判断线程是否被中断: <code>public boolean isInterrupt();</code></li><li>中断线程执行: <code>public void interrupt();</code></li></ul></blockquote></blockquote><p>范例: 观察线程的中断处理操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadInterruptDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"午休一下!!"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100000</span>);</span><br><span class="line">                System.out.println(<span class="string">"2点到了,该上班了!!"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"打扰老子睡觉,老子宰了你!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!thread.isInterrupted()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"打扰一下,有点急事."</span>);</span><br><span class="line">            thread.interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所有正在执行的线程都是可以被打断的,中断线程必须进行异常的处理.</p></blockquote><h2 id="线程的强制执行"><a href="#线程的强制执行" class="headerlink" title="线程的强制执行"></a>线程的强制执行</h2><blockquote><p>所谓的线程的强制执行指的是当满足某些条件之后,某一个线程对象将一直独占资源,一直到该线程的程序执行结束.</p></blockquote><p>范例: 观察一个没有强制执行的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStart</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++ ) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"线程运行, x = "</span> + x);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"线程对象"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">100</span>; y++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main线程运行, y="</span> + y );</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个时候,主线程和子线程都在交替执行着,但是如果说现在你希望主线程独占执行.那么就可以使用Thread类中的方法:</p><blockquote><ul><li>强制执行: <code>public final void join() throws InterruptException;</code></li></ul></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStart</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread mainThread = Thread.currentThread();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span>(x == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        mainThread.join(); </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"线程运行, x = "</span> + x);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"线程对象"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">100</span>; y++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main线程运行, y="</span> + y );</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在进行线程强制执行的时候一定要获取强制执行线程的对象之后才可以执行join()调用.</p></blockquote><h2 id="线程的礼让"><a href="#线程的礼让" class="headerlink" title="线程的礼让"></a>线程的礼让</h2><blockquote><p>线程的礼让指的是先将资源让出去让别的线程先执行.线程的礼让可以使用Thread中提供的方法:</p><blockquote><ul><li>礼让: <code>public static void yeild();</code></li></ul></blockquote></blockquote><p>范例: 使用礼让操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程礼让</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadYield</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Thread mainThread = Thread.currentThread();</span><br><span class="line">        Thread th = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(x % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    Thread.yield();</span><br><span class="line">                    System.out.println(<span class="string">"子线程礼让"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"线程运行了, x = "</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        th.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">100</span>; y++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main线程运行, y="</span> + y );</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>礼让执行的时候每一次调用<code>yield()</code>方法都只会礼让一次当前的资源.</p><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>从理论上来讲,线程的优先级越高越有可能先执行(越有可能先抢占到资源).在Thread类里面针对<br>优先级有两个处理方法:</p><ul><li>设置优先级: <code>public final void setPriority(int newPriority)</code>;</li><li>获取优先级: <code>public final int getPriority()</code>;</li></ul><p>在进行优先级定义的时候都是通过int型的数字来完成的,而对于此数字的选择在Thread类里面就定义有三个常量:</p><ul><li>最高优先级: <code>public static final int MAX_PRIORITY</code>, 10;</li><li>中等优先级: <code>public static final int NORM_PRIORITY</code>, 5;</li><li>最低优先级: <code>public static final int MIN_PRIORITY</code>, 1;</li></ul><p>范例: 观察优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程优先级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPriority</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable run = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+ <span class="string">"执行"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread threadA = <span class="keyword">new</span> Thread(run, <span class="string">"线程A"</span>);</span><br><span class="line">        Thread threadB = <span class="keyword">new</span> Thread(run, <span class="string">"线程B"</span>);</span><br><span class="line">        Thread threadC = <span class="keyword">new</span> Thread(run, <span class="string">"线程C"</span>);</span><br><span class="line">        threadA.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        threadB.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        threadC.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        </span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">        threadC.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主线程也是一个线程,那么主线程的优先级为多少呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 线程.线程常用操作方法;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程优先级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPriority</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getPriority()); <span class="comment">// 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主线程属于中等优先级,而默认创建的线程也是中等优先级.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线程常用操作方法&quot;&gt;&lt;a href=&quot;#线程常用操作方法&quot; class=&quot;headerlink&quot; title=&quot;线程常用操作方法&quot;&gt;&lt;/a&gt;线程常用操作方法&lt;/h1&gt;&lt;p&gt;多线程的主要操作方法都在Thread类中定义了.&lt;/p&gt;
&lt;h2 id=&quot;线程的命名与取得&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
      <category term="Thread" scheme="https://blog.loong.io/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础类库</title>
    <link href="https://blog.loong.io/2019/09/02/java-base-class/"/>
    <id>https://blog.loong.io/2019/09/02/java-base-class/</id>
    <published>2019-09-02T14:18:23.000Z</published>
    <updated>2020-06-03T02:37:45.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础类库"><a href="#Java基础类库" class="headerlink" title="Java基础类库"></a>Java基础类库</h1><h2 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h2><p>String类是项目开发之中一定会使用到的一个功能类，并且这个类拥有如下的特点：</p><ul><li>每一个字符串常量都属于一个String类的匿名对象，并且不可更改；</li><li>String有两个常量池：静态常量池、运行时常量池；</li><li>String类对象的实例化建议使用直接赋值的形式完成，这样可以直接将对象保存在对象池之中以方便下次重用；</li></ul><p>虽然String类很好用，但是如果认真去思考也会发现其最大的弊端：内容不允许修改，虽然大部分情况下都不会涉及到字符串内容的频繁修改，但是依然可能会出现这样的情况，所以为了解决此问题，所以专门提供了StringBuffer类，<br>可以实现字符串内容的修改处理。</p><p>StringBuffer并不像String类那样拥有两种对象实例化方式，StringBuffer必须像普通类对象那样首先进行对象的实例化，而后才可以调用方法去执行，而这个时候<br>可以考虑使用StringBuffer类中的如下方法：</p><ul><li>构造方法：public StringBuffer()</li><li>构造方法：public StringBuffer(String str) ,接收初始化字符串内容</li><li>数据追加: public StringBuffer append(数据类型 变量): 相当于字符串的加操作；</li></ul><p>范例：观察String与StringBuffer的对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Java基础类库;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String类的引用传递</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaApiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String hello = <span class="string">"Hello"</span>;</span><br><span class="line">        change(hello);</span><br><span class="line">        System.out.println(hello); <span class="comment">// hello字符串并没有发生改变</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String temp)</span> </span>&#123;</span><br><span class="line">        temp += <span class="string">" World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上大部分情况下，很少会出现字符串内容的改变，这种改变并不是针对于静态常量池的改变。</p><p>范例： 分析一下已有问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Java基础类库;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaApiDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"Hello World"</span>;</span><br><span class="line">        String str2 = <span class="string">"Hello "</span> + <span class="string">"World"</span>;</span><br><span class="line">        System.out.println(str1 == str2); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个时候的str2并不算是改变，或者更加严格的意义上来讲，对于现在str2当程序编译之后会变为如下的形式：</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">StringBuffer </span><span class="keyword">bug </span>= new <span class="keyword">StringBuffer();</span></span><br><span class="line"><span class="keyword">buf,append("Hello </span><span class="string">").append("</span>World<span class="string">"):</span></span><br></pre></td></tr></table></figure><p>所有的”+“方法在编译之后都变为了StringBuffer中的append()方法，并且在程序之中StringBuffer与String类对象之间本来就可以直接互相转换：</p><ul><li>String类对象变为StringBuffer类对象可以依靠StringBuffer类的构造方法或者使用append方法；</li><li>所有的类对象都可以通过toString()方法将其变为String类型。</li></ul><p>在StringBuffer类里面除了可以支持有字符串内容的修改之外，实际上也提供有String类所不具备的方法：</p><ul><li>插入数据： public  StringBuffer insert(int offset, 数据类型 b);</li><li>删除指定范围的数据： public StringBuffer delete(int start, int end);</li><li>字符串反转： public StringBuffer reverse();</li></ul><p>实际上还有一个与StringBuffer类类似的功能类：StringBuilder类，这个类是在jdk1.5之后提供的。该类与StringBuffer类提供的功能相同，最大的区别在于StringBuffer类<br>中的方法属于线程安全的，全部使用了synchronized关键字进行标注，而StringBuilder属于非线程安全的。</p><ul><li>String类是字符串的首选类型，其最大的特点是不允许修改；</li><li>StringBuffer和StringBuilder类的内容允许修改；</li><li>StringBuffer是在JDK1.0的时候提供的，属于线程安全的操作，而StringBuilder是在JDK1.5之后提供的，属于非线程安全的操作。</li></ul><h2 id="CharSequence接口"><a href="#CharSequence接口" class="headerlink" title="CharSequence接口"></a>CharSequence接口</h2><blockquote><p>CharSequence是一个描述字符串结构的接口,在这个接口中我们可以发现三种常用的子类:</p></blockquote><blockquote><p>String类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure><blockquote><p>StringBuffer类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuffer</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure><blockquote><p>StringBuilder类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure><p><img src="http://imgs.loong.io/20190901133929_g9g485_Screenshot.jpeg" alt></p><blockquote><p>现在只要有字符串就可以为CharSequence接口实例化.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharSequenceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CharSequence str = <span class="string">"Hello"</span>; <span class="comment">// 子类实例向父类接口转型</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CharSequence本身是一个接口,在该接口中也定义有如下的操作方法:</p></blockquote><ul><li>获取指定索引字符:<code>public char charAt(int index)</code>;</li><li>获取字符串的长度: <code>public int length()</code>;</li><li>截取部分字符串: <code>public CharSequence subSequence(int start, int end)</code>;</li></ul><p>范例: 字符串的截取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharSequenceTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CharSequence str = <span class="string">"helloworld"</span>;</span><br><span class="line">        CharSequence sub = str.subSequence(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(sub); <span class="comment">// world</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以后看见CharSequence描述的就是一个字符串.</p></blockquote><h2 id="AutoCloseable接口"><a href="#AutoCloseable接口" class="headerlink" title="AutoCloseable接口"></a>AutoCloseable接口</h2><blockquote><p>AutoCloseable主要是用于日后进行资源开发的处理上,以实现资源的自动关闭(释放资源),例如:在以后进行文件,<br>网络,数据库的开发过程之后由于服务器的资源有限,所以实用之后一定要关闭资源,这样才可以被更多的使用者所使用.</p><p>下面为了更好的说明资源的问题,将通过一个消息的发送处理来完成. </p></blockquote><p>范例: 手工实现资源的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NetMessage msg = <span class="keyword">new</span> NetMessage(<span class="string">"hello world"</span>);</span><br><span class="line">        msg.send();</span><br><span class="line">        msg.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetMessage</span> <span class="keyword">implements</span> <span class="title">IMessage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NetMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[open]获取消息发送链接资源"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[close]关闭消息发送链接资源"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.open()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[send]发送消息"</span> + <span class="keyword">this</span>.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>既然所有的资源处理完成之后都必须进行关闭操作,那么能否实现一种自动关闭的功能呢?</p><p>在这种的情况下,推出了AutoCloseable访问接口,这个接口是在JDK1.7的时候提供的,并且该接口只提供有一个方法:</p><ul><li>关闭方法: <code>public void close() throws Exception;</code></li></ul></blockquote><p><img src="http://imgs.loong.io/20190901142730_jYHVWN_Screenshot.jpeg" alt></p><blockquote><p>要想实现自动关闭的处理,除了要使用AutoCloseable之外,还需要结合异常处理语句完成才可以正常调用.</p></blockquote><p>范例: 实现自动关闭处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoCloseableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(IMessage msg = <span class="keyword">new</span> NetMessage(<span class="string">"hello"</span>)) &#123;</span><br><span class="line">            msg.send();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> <span class="keyword">extends</span> <span class="title">AutoCloseable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetMessage</span> <span class="keyword">implements</span> <span class="title">IMessage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NetMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[open]获取消息发送链接资源"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[close]关闭消息发送链接资源"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.open()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[send]发送消息"</span> + <span class="keyword">this</span>.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在以后接触到资源的关闭问题,往往都会见到AutoCloseable接口的使用.</p></blockquote><h2 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h2><blockquote><p>Runtime描述的是运行时的状态,也就说在整个的JVM之中,Runtime是唯一一个与JVM运行状态有关的类,并且来讲都会默认提供有一个该类的实例化对象.</p><p>由于在每一个JVM进程里面只允许提供有一个Runtime类的对象,所以这个类的构造方法被默认私有化了,那么就证明该类使用的是单例设计模式,并且每一个单例设计模式一定会提供有一个static方法获取本类<br>实例.</p></blockquote><p><img src="http://imgs.loong.io/20190901144631_8WimLJ_Screenshot.jpeg" alt></p><blockquote><p>由于Runtime类属于单例设计模式,如果想要获取实例化对象,那么就可以依靠类中的getRuntime()方法完成</p><ul><li>获取实例化对象: <code>public static Runtime getRuntime();</code></li></ul><p>通过Runtime类中的availableProcessors()方法可以获取本机的CPU内核数</p></blockquote><p>范例: 获取Runtime对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runtime run = Runtime.getRuntime(); <span class="comment">// 获取实例化对象</span></span><br><span class="line">        System.out.println(run.availableProcessors()); <span class="comment">// 12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>除了以上的方法之外,在Runtime类中还提供有如下的四个重要方法:</p><ul><li>获取最大可用内存空间: <code>public long maxMemory()</code>, 默认配置为系统最大内存的四分之一;</li><li>获取可用内存空间: <code>public long totalMemory()</code>, 默认为系统的64份之一;</li><li>获取空闲内存空间: <code>public long freeMemory()</code>;</li><li>手工进行GC处理: <code>public void gc()</code>;</li></ul></blockquote><p>范例: 观察内存的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runtime run = Runtime.getRuntime();</span><br><span class="line">        System.out.println(<span class="string">"[1]MAX_MEMORY: "</span> + run.maxMemory());</span><br><span class="line">        System.out.println(<span class="string">"[1]TOTAL_MEMORY: "</span> + run.totalMemory());</span><br><span class="line">        System.out.println(<span class="string">"[1]FREE_MEMORY: "</span> + run.freeMemory());</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            str += i; <span class="comment">// 产生大量垃圾空间</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"[2]MAX_MEMORY: "</span> + run.maxMemory());</span><br><span class="line">        System.out.println(<span class="string">"[2]TOTAL_MEMORY: "</span> + run.totalMemory());</span><br><span class="line">        System.out.println(<span class="string">"[2]FREE_MEMORY: "</span> + run.freeMemory());</span><br><span class="line"></span><br><span class="line">        run.gc();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"[3]MAX_MEMORY: "</span> + run.maxMemory());</span><br><span class="line">        System.out.println(<span class="string">"[3]TOTAL_MEMORY: "</span> + run.totalMemory());</span><br><span class="line">        System.out.println(<span class="string">"[3]FREE_MEMORY: "</span> + run.freeMemory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GC(Garbage Collector)垃圾收集器, 是可以由系统自动调用的垃圾释放功能,或者使用Runtime类中的gc()手工调用.</p></blockquote><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><blockquote><p>System是一直陪伴着我们的程序类,之前的输出就是采用System类中的方法,在System类中也定义有一些其他的处理方法:</p><ul><li>数组拷贝:<code>public static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length)</code>;</li><li>获取当前的时间日期数值: <code>public static long currentTimeMillis()</code>;</li><li>进行垃圾回收: <code>public static void gc()</code>;</li></ul></blockquote><p>范例: 操作耗时的统计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        String str = <span class="string">"1"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">30000</span>; i++) &#123;</span><br><span class="line">            str += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"操作耗时: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在System类中也提供有一个gc()方法,但是这个gc()方法并不是定义的新方法,而是继续调用了Runtime类中的gc()方法(Runtime.getRuntime().gc()).</p></blockquote><h2 id="Cleaner类"><a href="#Cleaner类" class="headerlink" title="Cleaner类"></a>Cleaner类</h2><blockquote><p>Cleaner类是在JDK1.9之后提供的一个对象的清理操作,其主要的功能是进行finalize()方法的替代.在C++中有两种特殊的函数:构造函数,析构函数(对象的手工回收),<br>在Java之中所有的垃圾空间都是通过GC自动回收的,所以很多情况下是不需要使用这类析构函数的,也正是因为如此,所以Java并没有提供这方面的支持.</p><p>但是Java本身依然给用户提供了收尾的操作,每一个实例化对象在回收之前至少给他一个喘息的机会,最初实现对象收尾处理方法是Object类中所提供的finalize()方法,这个方法的定义如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span>(since=<span class="string">"9"</span>)</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable</span></span><br></pre></td></tr></table></figure><blockquote><p>已经不建议继续使用这个方法了,而是说子类可以继续使用这个方法名称,但是这个方法上最大的特征就是抛出了一个Throwable异常类型,而这个异常类型分为两个子类型:Error, Exception,平常所处理的一般就是Exception.</p></blockquote><p>范例: 观察传统的回收操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalizeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Member m = <span class="keyword">new</span> Member();</span><br><span class="line">        m = <span class="keyword">null</span>; <span class="comment">// 成为垃圾</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">"照常运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"类诞生了!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"类回收"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"我还活着"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是从JDK1.9开始,这一操作已经不建议使用了,而对于对象的回收释放.从JDK1.9开始建议开发者使用AutoCloseable或者使用java.lang.ref.Cleaner类进行回收处理(Cleaner也支持AutoCloseable的处理).</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Java基础类库;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Example</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"该类被创建了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我还活着"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleCleaner</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cleaner cleaner = Cleaner.create();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Example example;</span><br><span class="line">    <span class="keyword">private</span> Cleanable cleanable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleCleaner</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.example = <span class="keyword">new</span> Example(); <span class="comment">// 创建新对象</span></span><br><span class="line">        <span class="keyword">this</span>.cleanable = <span class="keyword">this</span>.cleaner.register(<span class="keyword">this</span>, <span class="keyword">this</span>.example); <span class="comment">// 注册使用的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cleanable.clean(); <span class="comment">// 启动多线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(ExampleCleaner ec = <span class="keyword">new</span> ExampleCleaner()) &#123;</span><br><span class="line">            <span class="comment">// 执行相关代码</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在新的清除回收处理的过程之中,更多的情况下考虑的是多线程的使用,即为了防止有可能造成的延迟处理,所以许多对象回收前的处理都是单独通过一个线程完成的.</p></blockquote><h2 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h2><blockquote><p>所谓的对象克隆指的就是对象的复制,而且属于全新的复制.即:使用已有的对象内容创建一个新的对象,如果要想进行对象克隆需要使用到Object类中提供的clone()方法:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br></pre></td></tr></table></figure><blockquote><p>所有的类都会继承Object父类,所以所有的类都一定会有clone方法,但是并不是所有的类都希望被克隆.所以如果要想实现对象克隆,那么对象所在的类需要实现一个Cloneable接口,此接口并没有任何的方法提供,<br>是因为它描述的是一种能力.</p></blockquote><p>范例: 实现对象克隆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"王五"</span>, <span class="number">25</span>);</span><br><span class="line">        Person p1 = (Person) p.clone();</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"["</span> + <span class="keyword">super</span>.toString() + <span class="string">"]"</span> + <span class="string">"name:"</span> + <span class="keyword">this</span>.name + <span class="string">" age: "</span> + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在实际的开发之中不是非常特殊的情况下,很少会出现对象克隆的需求.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java基础类库&quot;&gt;&lt;a href=&quot;#Java基础类库&quot; class=&quot;headerlink&quot; title=&quot;Java基础类库&quot;&gt;&lt;/a&gt;Java基础类库&lt;/h1&gt;&lt;h2 id=&quot;StringBuffer类&quot;&gt;&lt;a href=&quot;#StringBuffer类&quot; c
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java数字操作类</title>
    <link href="https://blog.loong.io/2019/09/02/java-math/"/>
    <id>https://blog.loong.io/2019/09/02/java-math/</id>
    <published>2019-09-02T13:59:40.000Z</published>
    <updated>2020-06-03T02:37:45.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字操作类"><a href="#数字操作类" class="headerlink" title="数字操作类"></a>数字操作类</h1><blockquote><p>程序就是一个数学处理的过程,所以在Java语言本身也提供有相应的数字处理类库支持.</p></blockquote><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><blockquote><p>Math类的主要功能是进行数学计算的操作类,提供有基础的计算公式,这个类的构造方法被私有化了,该类中提供的所有方法都是static的方法,即:这些方法都可以通过我们的<br>类名称直接调用.</p></blockquote><p>实例: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Math.abs(<span class="number">12.1</span>)); <span class="comment">// 12.1</span></span><br><span class="line">        System.out.println(Math.abs(-<span class="number">12.1</span>)); <span class="comment">// 12.1</span></span><br><span class="line">        System.out.println(Math.max(<span class="number">12.1</span>, <span class="number">13.1</span>)); <span class="comment">// 13.1</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">12.1</span>)); <span class="comment">// 12</span></span><br><span class="line">        System.out.println(Math.round(-<span class="number">12.1</span>)); <span class="comment">// -12</span></span><br><span class="line">        System.out.println(Math.round(-<span class="number">12.5</span>)); <span class="comment">// -12</span></span><br><span class="line">        System.out.println(Math.round(-<span class="number">12.51</span>)); <span class="comment">// -13</span></span><br><span class="line">        System.out.println(Math.log(<span class="number">5</span>)); <span class="comment">// 1.6094379124341003</span></span><br><span class="line">        System.out.println(Math.pow(<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// 8.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虽然在Math类里面提供有四舍五入的处理方法,但是这个四舍五入在处理的时候是直接将小数点后的所有位进行进位处理了,这样肯定不方便,那么现在最方便的方法就是<br>实现指定位数的保留.</p></blockquote><p>范例: 自定义的四舍五入功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MathUtil</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> num, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.round(num * Math.pow(<span class="number">10</span>, scale)) / Math.pow(<span class="number">10</span>, scale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MathUtil.round(<span class="number">19.4567</span>, <span class="number">2</span>)); <span class="comment">// 19.46</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Math类里面提供的基本上都是基础的数学公式,需要的时候需要自己重新整合.</p></blockquote><h2 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h2><blockquote><p>java.util.Random类的主要功能是产生随机数的,这个类主要是依靠内部提供的方法来完成:</p><ul><li>产生一个不大于边界的随机正整数: <code>public int nextInt(int bound);</code></li></ul></blockquote><p>范例: 产生随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            System.out.print(random.nextInt(<span class="number">100</span>) + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例: 彩票36选7,不能为0,不能重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>]; <span class="comment">// 开辟一个能存放7个值的数组</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> foot = <span class="number">0</span>; <span class="comment">// 脚标</span></span><br><span class="line">        <span class="keyword">while</span> (foot &lt; <span class="number">7</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> flag = random.nextInt(<span class="number">37</span>);</span><br><span class="line">            <span class="keyword">if</span>(isUse(flag, data)) &#123;</span><br><span class="line">                data[foot++] = flag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUse</span><span class="params">(<span class="keyword">int</span> flag, <span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; data.length ; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag == data[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以后的这种随机数的操作都可以利用random来处理.</p></blockquote><h2 id="大数字操作类"><a href="#大数字操作类" class="headerlink" title="大数字操作类"></a>大数字操作类</h2><blockquote><p>在进行数学计算的过程里面还有一个大数字的操作类,可以实现海量数字的计算(能提供的也是基础计算), 现在假设一个数字很大,超过了double范围.<br>那么这个时候将没有任何的数据类型可以保存下此类的内容,最早的时候只能通过String保存.</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"123"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str2 </span>= <span class="string">"244"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果这个时候要想进行加法计算,那么就需要逐位拆分,每一位自己计算,而后自己独立控制进位处理.那么这样的开发难度是非常高的,所以为了解决这类的问题,提供有<br>两个大数字的操作类:BigInteger,BigDecimal;</p></blockquote><p><img src="http://imgs.loong.io/20190902203321_lwmMfr_Screenshot.jpeg" alt></p><blockquote><p>之前分析了,当数字很大的时候只能够利用字符串描述数字操作,所以这一点可以观察两个大数字类的构造方法:</p><ul><li>BigInteger类构造: <code>public BigInteger(String val)</code>;</li><li>BigDecimal类构造: <code>public BigDecimal(String val)</code>;</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigIntegerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigInteger big1 = <span class="keyword">new</span> BigInteger(<span class="string">"1234344354534643"</span>);</span><br><span class="line">        BigInteger big2 = <span class="keyword">new</span> BigInteger(<span class="string">"123423"</span>);</span><br><span class="line">        System.out.println(<span class="string">"加法操作: "</span> + big1.add(big2));</span><br><span class="line">        System.out.println(<span class="string">"减法操作: "</span> + big1.subtract(big2));</span><br><span class="line">        System.out.println(<span class="string">"乘法操作: "</span> + big1.multiply(big2));</span><br><span class="line">        System.out.println(<span class="string">"除法操作: "</span> + big1.divide(big2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是,虽然提供有大数字的操作类,但是整体的操作之中还是需要考虑到我们的性能问题.</p></blockquote><p>范例: 观察性能问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigIntegerTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigInteger bigInteger = <span class="keyword">new</span> BigInteger(<span class="string">"12345678912323213"</span>);</span><br><span class="line">        System.out.println(bigInteger.pow(Integer.MAX_VALUE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时的计算过程是十分缓慢的,所以任何的电脑都是有极限的.既然在进行数学计算的时候有可能无法进行整除处理,那么就可以使用其他的除法计算来求出余数;</p><ul><li>求余: <code>public BigInteger[] divideAndRemainder(BigInteger val)</code>.数组的第一个为商,第二个为余数;</li></ul></blockquote><p>范例: 求余除法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigIntegerTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigInteger big1 = <span class="keyword">new</span> BigInteger(<span class="string">"1233434324324"</span>);</span><br><span class="line">        BigInteger big2 = <span class="keyword">new</span> BigInteger(<span class="string">"12434324"</span>);</span><br><span class="line">        BigInteger[] result = big1.divideAndRemainder(big2);</span><br><span class="line">        System.out.println(<span class="string">"商为 "</span> + result[<span class="number">0</span>] + <span class="string">", 余数为 "</span> + result[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果在开发中真进行计算的时候,该计算没有超过基本数据类型所包含的位数,强烈不建议使用大数字类,因为这种计算性能是非常差的.</p></blockquote><blockquote><p>BigDecimal的操作形式是和BigInteger是非常相似的,都有基础的数学支持.</p></blockquote><p>范例: 使用BigDecimal计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal big1 = <span class="keyword">new</span> BigDecimal(<span class="string">"12312321321"</span>);</span><br><span class="line">        BigDecimal big2 = <span class="keyword">new</span> BigDecimal(<span class="string">"12323"</span>);</span><br><span class="line">        System.out.println(<span class="string">"加法计算: "</span> + big1.add(big2));</span><br><span class="line">        BigDecimal[] result = big1.divideAndRemainder(big2);</span><br><span class="line">        System.out.println(<span class="string">"商为: "</span> + result[<span class="number">0</span>] + <span class="string">", 余数为: "</span> + result[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是在使用BigDecimal的时候会有一个数据进位的问题, 在这个类里面定义有如下的除法操作:</p><ul><li>除法操作: <code>public BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode)</code>;</li></ul></blockquote><p>范例: 使用BigDecimal实现四舍五入处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.RoundingMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> flag = <span class="number">123.2354</span>;</span><br><span class="line">        System.out.println(round(flag, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> num, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(num).divide(<span class="keyword">new</span> BigDecimal(<span class="number">1.0</span>), scale, RoundingMode.HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Math的处理由于使用的都是基本数据类型,所以性能一定要高于大数字处理类的.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字操作类&quot;&gt;&lt;a href=&quot;#数字操作类&quot; class=&quot;headerlink&quot; title=&quot;数字操作类&quot;&gt;&lt;/a&gt;数字操作类&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;程序就是一个数学处理的过程,所以在Java语言本身也提供有相应的数字处理类库支持.&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>centos7 离线安装Nginx</title>
    <link href="https://blog.loong.io/2019/08/26/nginx/"/>
    <id>https://blog.loong.io/2019/08/26/nginx/</id>
    <published>2019-08-26T00:06:46.000Z</published>
    <updated>2020-06-03T02:37:45.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7-如何离线安装Nginx"><a href="#centos7-如何离线安装Nginx" class="headerlink" title="centos7 如何离线安装Nginx"></a>centos7 如何离线安装Nginx</h1><blockquote><p>都知道centos7可以通过yum可以快速安装，但是到了离线环境中，就需要安装二进制包，依赖多如牛毛，安装过程让人头大。</p><p>要知道yum安装的也是从源下载的一个个rpm包，离线安装就基于这个yum下载的包，如何下载下来包，而不进行安装，把下载下来的包移动到离线环境中进行安装。</p></blockquote><h2 id="centos7-在线yum安装"><a href="#centos7-在线yum安装" class="headerlink" title="centos7 在线yum安装"></a>centos7 在线yum安装</h2><blockquote><p>默认的yum源中不包含Nginx，需要我们额外来配置源，我们需要安装EPEL源，里面包含了很多的软件。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><blockquote><p>然后直接调用yum进行Nginx的安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><blockquote><p>然后就可以直接启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><blockquote><p>你就可以在你的80端口上看到运行的Nginx</p></blockquote><h2 id="调用yum-plugin-downloadonly把Nginx包下载下来"><a href="#调用yum-plugin-downloadonly把Nginx包下载下来" class="headerlink" title="调用yum-plugin-downloadonly把Nginx包下载下来"></a>调用yum-plugin-downloadonly把Nginx包下载下来</h2><blockquote><p>和在线安装一样，你需要包含Nginx的源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><blockquote><p>然后你需要调用yum</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install --downloadonly --downloaddir=. nginx</span><br></pre></td></tr></table></figure><blockquote><p>这样你的当前目录就会多了很多rpm包，当然如果不成功，就需要安装yum-plugin-downloadonly插件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install yum-plugin-downloadonly</span><br></pre></td></tr></table></figure><blockquote><p>把这些rpm包移动到离线环境中，在这些包的目录中运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh *.rpm --nodeps --force</span><br></pre></td></tr></table></figure><blockquote><p>运行完毕,就安装成功了,直接调用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><blockquote><p>你就可以在80端口看到nginx，用浏览器输入<code>localhost:80</code></p><p>你就可以看到nginx的欢迎页面</p><p>注意 : 你的离线环境和在线环境需要一致。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;centos7-如何离线安装Nginx&quot;&gt;&lt;a href=&quot;#centos7-如何离线安装Nginx&quot; class=&quot;headerlink&quot; title=&quot;centos7 如何离线安装Nginx&quot;&gt;&lt;/a&gt;centos7 如何离线安装Nginx&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
      <category term="Linux" scheme="https://blog.loong.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.loong.io/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://blog.loong.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>断点续传（Nodejs示例）</title>
    <link href="https://blog.loong.io/2019/08/07/breakpointResume/"/>
    <id>https://blog.loong.io/2019/08/07/breakpointResume/</id>
    <published>2019-08-07T07:42:05.000Z</published>
    <updated>2020-06-03T02:37:45.355Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>什么是断点续传（这里说的是下载断点续传）？怎么实现的断点续传？<br>断点续传就是下载了一半断网或者暂停了，然后可以接着下载。不用从头开始下载。</p><p>当一个服务器支持Range时，客户端可以将需要发送的内容分成很多份发送给服务端，服务端可以每次接收部分内容。有了这样的能力，遇到断网的情况，我们可以在客户端记录下已经传送的文件范围，网络恢复后再将剩余部分发送给服务端，这样就实现了断点续传。</p><p>首先客户端向服务端发送一个请求（下载文件）。然后服务端响应请求，信息包含文件总大小、文件流开始和结束位置、内容大小等。那具体是怎么实现的呢？</p></blockquote><p>HTTP/1.1有个头属性Range。比如你发送请求的时候带上Range:0-199，等于你是请求0到199之间的数据。然后服务器响应请求Content-Range: bytes 0-199/250 ，表示你获取了0到199之间的数据，总大小是250。（也就是告诉你还有数据没有下载完）。</p><p>是不是很简单？这么神奇的东西也就是个“约定”而已，也就是所谓的HTTP协议。</p><p>express 示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> PUBLIC_PATH = path.resolve(__dirname, <span class="string">'../public'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件下载之断点续传</span></span><br><span class="line">router.get(<span class="string">"/transfer/:path"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取参数</span></span><br><span class="line">  <span class="keyword">let</span> filePath = req.params.path;</span><br><span class="line">  <span class="comment">// 拼接文件的绝对路径</span></span><br><span class="line">  <span class="keyword">let</span> downloadPath = path.resolve(PUBLIC_PATH, filePath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 得到文件名</span></span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">base</span>: fileName&#125; = path.parse(downloadPath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 文件的信息</span></span><br><span class="line">  <span class="keyword">let</span> stat;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 通过fs模块获取文件的信息，报错就代表着不存在该文件</span></span><br><span class="line">    stat = fs.statSync(downloadPath);</span><br><span class="line">  &#125;<span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="comment">// 不存在该文件</span></span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">404</span>).end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取文件的大小</span></span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">size</span>: total&#125; = stat;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取请求头部信息</span></span><br><span class="line">  <span class="keyword">let</span> range = req.get(<span class="string">"range"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果包含该头部</span></span><br><span class="line">  <span class="keyword">if</span>(range) &#123;</span><br><span class="line">    <span class="comment">// 获取范围请求的开始和结束位置</span></span><br><span class="line">    <span class="keyword">let</span> [, start, end] = range.match(<span class="regexp">/(\d*)-(\d*)/</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理请求头中范围参数不传的问题</span></span><br><span class="line">    start = start ? <span class="built_in">parseInt</span>(start) : <span class="number">0</span>;</span><br><span class="line">    end = end ? <span class="built_in">parseInt</span>(end) : total - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    res.status(<span class="number">206</span>);</span><br><span class="line"></span><br><span class="line">    res.setHeader(<span class="string">"Accept-Ranges"</span>, <span class="string">"bytes"</span>);</span><br><span class="line">    res.setHeader(<span class="string">"Content-Range"</span>, <span class="string">`bytes <span class="subst">$&#123;start&#125;</span>-<span class="subst">$&#123;end&#125;</span>/<span class="subst">$&#123;total&#125;</span>`</span>);</span><br><span class="line">    res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">    res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">'attachment; filename='</span> + <span class="built_in">encodeURIComponent</span>(fileName));</span><br><span class="line">    res.setHeader(<span class="string">"Content-Length"</span>, total);</span><br><span class="line"></span><br><span class="line">    fs.createReadStream(downloadPath, &#123; start, end &#125;).pipe(res);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    res.status(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">    res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">'attachment; filename='</span> + <span class="built_in">encodeURIComponent</span>(fileName));</span><br><span class="line">    res.setHeader(<span class="string">"Content-Length"</span>, total);</span><br><span class="line"></span><br><span class="line">    fs.createReadStream(downloadPath).pipe(res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;什么是断点续传（这里说的是下载断点续传）？怎么实现的断点续传？&lt;br&gt;断点续传就是下载了一半断网或者暂停了，然后可以接着下载。不用从头开始下载。&lt;/p&gt;
&lt;p&gt;当一个服务器支持Range时，客户端可以将需要发送的内容分成很多份发送给服务端，服务端可
      
    
    </summary>
    
      <category term="HTTP" scheme="https://blog.loong.io/categories/HTTP/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="https://blog.loong.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>浏览器直接下载文件而不是尝试打开文件(Nodejs示例)</title>
    <link href="https://blog.loong.io/2019/08/07/downloadFile/"/>
    <id>https://blog.loong.io/2019/08/07/downloadFile/</id>
    <published>2019-08-07T07:40:42.000Z</published>
    <updated>2020-06-03T02:37:45.357Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在web开发啊过程之中遇到了这么一个文件，想用浏览器下载一个mp4文件，当初思想简单，没想那么深，直接把MP4文件放在了静态资源文件夹中，直接启动服务器，将url指向了该文件，然后浏览器没能如我所愿，去下载这个文件，而是在浏览器中打开了该文件。我也是很无奈，看来事情没那么简单，多方打听，终于明白了这个原理。</p><p>原来服务端向客户端游览器发送文件时，如果是浏览器支持的文件类型，一般会默认使用浏览器打开，比如mp4、txt、jpg等，会直接在浏览器中显示，而不是下载该文件。</p></blockquote><h2 id="如何处理"><a href="#如何处理" class="headerlink" title="如何处理"></a>如何处理</h2><blockquote><p>如果想要下载文件而不是打开文件，则需要在服务器端的响应头加上相应的头部信息。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首部字段ContentType说明了实体主体内对象的媒体类型，这是一个二进制文件类型</span></span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'application/octet-stream'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  Content-Disposition 消息头指示回复的内容该以何种形式展示，是以内联的形式（即网页或者页面的一部分），还是以附件的形式下载并保存到本地。</span></span><br><span class="line"><span class="string">'Content-Disposition'</span>: <span class="string">'attachment; filename=1.mp4'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'Content-Length'</span>: <span class="number">1024</span></span><br></pre></td></tr></table></figure><h3 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h3><blockquote><p>Content-Type 实体头部用于指示资源的MIME类型 media type 。</p><p>在响应中，Content-Type标头告诉客户端实际返回的内容的内容类型。</p></blockquote><h3 id="Content-DisPosition"><a href="#Content-DisPosition" class="headerlink" title="Content-DisPosition"></a>Content-DisPosition</h3><blockquote><p>在HTTP场景中，第一个参数或者是inline（默认值，表示回复中的消息体会以页面的一部分或者整个页面的形式展示），或者是attachment（意味着消息体应该被下载到本地；大多数浏览器会呈现一个“保存为”的对话框，将filename的值预填为下载后的文件名，假如它存在的话）。</p></blockquote><h2 id="nodejs-express-实例"><a href="#nodejs-express-实例" class="headerlink" title="nodejs express 实例"></a>nodejs express 实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> PUBLIC_PATH = path.resolve(__dirname, <span class="string">'../public'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/download/:path'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取参数</span></span><br><span class="line">  <span class="keyword">let</span> filePath = req.params.path;</span><br><span class="line">  <span class="comment">// 拼接文件的绝对路径</span></span><br><span class="line">  <span class="keyword">let</span> downloadPath = path.resolve(PUBLIC_PATH, filePath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 得到文件名</span></span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">base</span>: fileName&#125; = path.parse(downloadPath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 文件的信息</span></span><br><span class="line">  <span class="keyword">let</span> stat;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 通过fs模块获取文件的信息，报错就代表着不存在该文件</span></span><br><span class="line">    stat = fs.statSync(downloadPath);</span><br><span class="line">  &#125;<span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="comment">// 不存在该文件</span></span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">404</span>).end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取文件的大小</span></span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">size</span>: total&#125; = stat;</span><br><span class="line">  <span class="comment">// 设置响应头信息，指示内容应该被下载</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename="</span>+fileName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 说明了实体主体内对象的媒体类型，这是一个二进制文件类型</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 响应状态为200</span></span><br><span class="line">  res.status(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过fs模块创建二进制流，并将其二进制流推送到响应主体中</span></span><br><span class="line">  fs.createReadStream(downloadPath).pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><h2 id="下载文件为中文文件名时"><a href="#下载文件为中文文件名时" class="headerlink" title="下载文件为中文文件名时"></a>下载文件为中文文件名时</h2><blockquote><p>探究 Content-Disposition：解决下载中文文件名乱码</p><p>直接在Content-Disposition中设置中文会导致乱码。</p><p>首先要注意的是disposition-type。由上面给出的是Content-Disposition header 字段我们可以知道，Content-Disposition有两种type，即inline和attachment。根据文档中的介绍可知，inline类型会自动显示附件内容，比如显示一个图片；而attachment不会自动显示，在邮件中可能会显示为一个带图标的附件，在浏览器中可能会提示下载。</p><p>其次就是disposition-parm。主要作用就是提供一个建议的文件名（filename-parm），客户端（浏览器、邮件系统）在尽可能的情况下会以该文件名去保存文件。尽可能的意思是存在不一样的情况，比如文件名非法、存在同名文件，这些情况下客户端会采取一些措施，比如修改文件名。</p><p>最后看看filename-parm的value。这个value就是文件名（本文的目的是给value设置一个中文，主要的坑就是这里）。</p><p>通过上面的介绍，要给前端发送一个文件，并且定义文件的名字为中文，可以在发送文件之前返回这样一个HTTP Response Header ：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: attachment; filename=文件.txt</span><br></pre></td></tr></table></figure><p>但是，如果你这样做了，服务器就会报错。</p><blockquote><p>原因：需要注意的是，RFC 822（ Standard for ARPA Internet Text Messages）规定了文本消息只能为ASCII，因此这个Content-Disposition是非法的。</p><p>在nodejs中，需要将中文文件名给处理一下，如下代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置响应头信息，指示内容应该被下载</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename="</span>+ <span class="built_in">encodeURIComponent</span>(fileName));</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> PUBLIC_PATH = path.resolve(__dirname, <span class="string">'../public'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/download/:path'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取参数</span></span><br><span class="line">  <span class="keyword">let</span> filePath = req.params.path;</span><br><span class="line">  <span class="comment">// 拼接文件的绝对路径</span></span><br><span class="line">  <span class="keyword">let</span> downloadPath = path.resolve(PUBLIC_PATH, filePath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 得到文件名</span></span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">base</span>: fileName&#125; = path.parse(downloadPath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 文件的信息</span></span><br><span class="line">  <span class="keyword">let</span> stat;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 通过fs模块获取文件的信息，报错就代表着不存在该文件</span></span><br><span class="line">    stat = fs.statSync(downloadPath);</span><br><span class="line">  &#125;<span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="comment">// 不存在该文件</span></span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">404</span>).end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取文件的大小</span></span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">size</span>: total&#125; = stat;</span><br><span class="line">  <span class="comment">// 设置响应头信息，指示内容应该被下载</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename="</span>+ <span class="built_in">encodeURIComponent</span>(fileName));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 说明了实体主体内对象的媒体类型，这是一个二进制文件类型</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 响应状态为200</span></span><br><span class="line">  res.status(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过fs模块创建二进制流，并将其二进制流推送到响应主体中</span></span><br><span class="line">  fs.createReadStream(downloadPath).pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在web开发啊过程之中遇到了这么一个文件，想用浏览器下载一个mp4文件，当初思想简单，没想那么深，直接把MP4文件放在了静态资源文件夹中，直接启动服务器，将url指向了该文件，然后浏览器没能如我所愿，去下载这个文件，而是在浏览器中打开了该文件。我也
      
    
    </summary>
    
      <category term="HTTP" scheme="https://blog.loong.io/categories/HTTP/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="HTTP" scheme="https://blog.loong.io/tags/HTTP/"/>
    
      <category term="Node.js" scheme="https://blog.loong.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程编程</title>
    <link href="https://blog.loong.io/2019/06/12/Thread/"/>
    <id>https://blog.loong.io/2019/06/12/Thread/</id>
    <published>2019-06-12T13:31:48.000Z</published>
    <updated>2020-06-03T02:37:45.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java多线程编程"><a href="#Java多线程编程" class="headerlink" title="Java多线程编程"></a>Java多线程编程</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>在Java语言中最大的特点就是支持多线程的开发（也是为数不多支持多线程的编程语言），所以在整个Java技术的学习里面，如果你不能够对多线程的概念有一个全面并且细致的了解，则在以后进行一些<br>项目的设计过程之中尤其并发访问设计的过程之中就会出现严重的技术缺陷。</p><p>如果想要理解线程，那么首先就要了解一下进程的概念，在传统的DOS系统的时代，其本身有一个特征：如果你电脑上出现了病毒，那么所有的程序将无法执行，因为传统的DOS采用的就是单进程处理，而<br>单进程处理的最大特点就是：在同一时间段上只允许一个程序在执行。</p><p>那么后来到了Windows时代就开启了多进程，于是就表示在一个时间段上可以同时运行多个程序，并且这些程序将进行资源的轮流抢占，所以在同一个时间段上会有多个程序依次执行，但是在同一个时间点上只会有一个<br>进程执行，而后来到了多核的CPU，由于可以处理的CPU多了，那么即便有再多的进程出现，也可以比单核CPU处理的速度有所提升。</p><p>线程是在进程基础之上划分的更小的程序单元，线程是在进程的基础上创建并且使用的，所以线程依赖于进程的支持，但是线程的启动速度要比进程快许多，所以当使用多线程进行并发处理的时候，其执行的性能<br>要高于进程。</p><p>Java是多线程的编程语言，所以Java在进行并发访问处理的时候可以得到更高的处理性能。</p><h2 id="Java多线程的实现"><a href="#Java多线程的实现" class="headerlink" title="Java多线程的实现"></a>Java多线程的实现</h2><p>如果要想在Java之中实现多线程的定义，那么就需要有一个专门的线程主体类进行线程的执行任务的定义，而这个主体类的定义是有要求的，必须实现特定的接口或者继承特定的父类才可以完成。</p><h3 id="继承Thread类实现多线程"><a href="#继承Thread类实现多线程" class="headerlink" title="继承Thread类实现多线程"></a>继承Thread类实现多线程</h3><p>Java里面提供有一个java.lang.Thread的程序类，那么一个类只要继承了此类就表示这个类为线程的主体类，但是并不是说这个类就可以实现多线程处理了，因为还需要覆写Thread类中提供的run()方法，而这个方法就属于线程的主方法。</p><p>范例：多线程主体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程编程;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; <span class="comment">// 线程的主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 线程的主体方法</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> x =<span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.title + <span class="string">"运行， x = "</span>  + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多线程要执行的功能都应该在run()方法中定义。需要说明的是：在正常情况下如果要想使用一个类中的方法，那么肯定要产生实例化对象，而后去调用类中提供的方法，但是run()方法是不能够被直接调用的，<br>因为这里面牵扯到一个操作系统的调度问题，所以要想启动多线程必须使用start()方法完成。</p><p>范例：多线程启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程编程;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; <span class="comment">// 线程的主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 线程的主体方法</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> x =<span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.title + <span class="string">"运行， x = "</span>  + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程C"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过此时的调用，你可以发现，虽然调用了start()方法,但是最终执行的是run()方法，并且所有的线程对象都是交替执行的。</p><blockquote><p>疑问：为什么多线程的启动不直接使用run()方法而必须使用Thread类中的start()方法呢？</p><blockquote><p>如果要想清楚这个问题，最好的做法是查看一下start()方法的实现操作，可以直接通过源代码观察。</p></blockquote></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();  <span class="comment">// 抛出了一个异常</span></span><br><span class="line">    group.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0();  <span class="comment">// 在start()方法里面调用了start0()这个方法</span></span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>; <span class="comment">// 只定义了方法名称并没有实现</span></span><br></pre></td></tr></table></figure><p>会发现start()方法里面会抛出一个<code>IllegalThreadStateException</code>异常类对象，但是整个程序并没有使用throws或者明确的try…catch处理，因为该异常一定是RuntimeException的子类，每一个<br>线程类的对象只允许启动一次，如果重复启动则就抛出此异常,例如下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程编程;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; <span class="comment">// 线程的主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 线程的主体方法</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> x =<span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.title + <span class="string">"运行， x = "</span>  + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread th = <span class="keyword">new</span> MyThread(<span class="string">"线程A"</span>);</span><br><span class="line">        th.start();</span><br><span class="line">        th.start(); <span class="comment">//  重复进行了线程的启动 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java程序的执行过程儿之中，考虑到对于不同层次开发者的需求，所以其支持有本地的操作系统函数调用，而这项技术就被称为JNI技术，但是Java开发之中并不推荐这样使用，利用这项技术<br>可以使用一些操作系统提供的底层函数进行一些特殊处理，而在Thread类里面提供的start0()就表示需要将此方法依赖于不同的操作系统实现。</p><p><img src="http://imgs.loong.io/image/Thread/ThreadStart0.jpg" alt></p><p>任何情况下,只要定义了多线程,多线程的启动永远只有一种方案:Thread类中的start()方法.</p><h2 id="基于Runnable接口实现多线程"><a href="#基于Runnable接口实现多线程" class="headerlink" title="基于Runnable接口实现多线程"></a>基于Runnable接口实现多线程</h2><p>虽然可以通过Thread类的继承来实现多线程的定义,但是在Java程序里面对于继承永远都是存在有单继承局限的,所以在Java里面又提供有第二种多线程的主题结构定义形式:实现java.lang.Runnable接口,<br>此接口定义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123; <span class="comment">// 从jdk1.8引入Lambda表达式之后就变为了函数式接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例: 通过Runnable实现多线程的主体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过实现Runnable接口实现多线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123; <span class="comment">// 线程的主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecondThread</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 线程的主体方法</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> x =<span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.title + <span class="string">"运行， x = "</span>  + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是此时由于不再继承Thread父类了,那么对于此时的SecondThread类中也不再支持有start()这个继承的方法,可是如果不使用start()方法是无法进行多线程启动的,<br>那么这个时候就需要观察一下Thread类提供的构造方法:</p><blockquote><p>构造方法:<code>public Thread(Runnable target);</code></p></blockquote><p>范例: 启动多线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过实现Runnable接口实现多线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123; <span class="comment">// 线程的主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecondThread</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 线程的主体方法</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> x =<span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.title + <span class="string">"运行， x = "</span>  + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread threadA = <span class="keyword">new</span> Thread(<span class="keyword">new</span> SecondThread(<span class="string">"线程A"</span>));</span><br><span class="line">        Thread threadB = <span class="keyword">new</span> Thread(<span class="keyword">new</span> SecondThread(<span class="string">"线程B"</span>));</span><br><span class="line">        Thread threadC = <span class="keyword">new</span> Thread(<span class="keyword">new</span> SecondThread(<span class="string">"线程C"</span>));</span><br><span class="line">        threadA.start(); <span class="comment">// 启动多线程</span></span><br><span class="line">        threadB.start(); <span class="comment">// 启动多线程</span></span><br><span class="line">        threadC.start(); <span class="comment">// 启动多线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候的多线程实现里面可以发现,由于只是实现了Runnable接口对象,所以此时线程主体类上就不再有单继承的局限了,那么这样的设计才是一个标准性的设计.</p><p>可以发现从jdk1.8开始,Runnable使用了函数式接口定义,所以也可以直接利用Lambda表达式进行线程类的实现.</p><p>范例: 利用Lambda实现多线程定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 利用Lambda表达式实现多线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x++) &#123;</span><br><span class="line">            String title = <span class="string">"进程"</span> + x;</span><br><span class="line">            Runnable run = () -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">10</span>; y++)&#123;</span><br><span class="line">                    System.out.println(title + <span class="string">"运行, y = "</span> + y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以后的开发之中对于多线程的实现,优先考虑的就是Runnable接口实现,并且永恒都是通过Thread类对象启动多线程.</p><h2 id="Thread和Runnable关系"><a href="#Thread和Runnable关系" class="headerlink" title="Thread和Runnable关系"></a>Thread和Runnable关系</h2><p>经过一系列的分析之后可以发现,在多线程的实现过程之中已经有了两种做法:Thread类和Runnable接口,如果从代码本身来讲使用Runnable是最方便的,因为其可以避免单继承的局限,同时也可以更好的进行功能的扩充.</p><p>但是从结构上也需要来观察Thread和Runnable的联系.Thread类的定义:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="title">implements</span> <span class="title">Runnable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>发现Thread类也是Runnable接口的子类,那么在之前继承Thread类的时候实际上覆写的还是Runnable接口的run()方法,此时来观察一下程序的类结构.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程编程;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; <span class="comment">// 线程的主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 线程的主体方法</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> x =<span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.title + <span class="string">"运行， x = "</span>  + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程C"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://imgs.loong.io/image/Thread/ThreadAndRunnable.jpg" alt></p><p>多线程的设计之中,使用了代理设计模式的结构,用户自定义的线程主体只是负责项目核心功能的实现,而所有的辅助实现全部交与Thread类来处理.</p><p>在进行Thread类启动多线程的时候调用的是start()方法,而后找到的是run方法,当我们通过Thread类的构造方法传递了Runnable的接口对象的时候,那么该接口对象将会被Thread类中的target属性所保存,在start()<br>方法执行的时候会调用Thread类中的run()方法,而这个run()方法去调用了Runnable接口子类被覆写过的run()方法去了.</p><p>多线程开发实质上是在于多个线程可以进行同一资源的抢占,那么Thread主要描述的是线程,而资源的描述是通过Runnable来完成的.</p><p><img src="http://imgs.loong.io/image/Thread/ThreadDevelop.jpg" alt></p><p>范例: 利用卖票程序来实现多个线程的资源并发访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程编程;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卖票程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThirdThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">5</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"现在的票数为:"</span> + <span class="keyword">this</span>.ticket--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleOfTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable run = <span class="keyword">new</span> ThirdThread();</span><br><span class="line">        <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过内存分析图来分析本程序的执行结构.</p><p><img src="http://imgs.loong.io/image/Thread/memoryAnalysis.jpg" alt></p><h2 id="Callable实现多线程"><a href="#Callable实现多线程" class="headerlink" title="Callable实现多线程"></a>Callable实现多线程</h2><p>从最传统的开发来讲,如果要进行多线程的实现肯定依靠的就是Runnable,但是Runnable接口有一个缺点:当线程执行完毕之后无法获取一个返,所以从jdk1.5之后就提出了一个新的线程实现<br>接口:java.util.concurrent.Callable接口,首先观察这个接口的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现Callable定义的时候可以设置一个泛型,此泛型的类型就是返回数据的类型,这样的好处是可以避免向下转型所带来的安全隐患.</p><p><img src="http://imgs.loong.io/image/Thread/Callable.jpg" alt></p><p>范例: 使用Callable实现多线程处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程编程;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FourthThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程执行, i="</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程执行结束"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FutureTask&lt;String&gt; task = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> FourthThread());</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">        System.out.println(<span class="string">"线程返回数据:"</span> + task.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Callable与Runnable之前的区别?</p><blockquote><p>Runnable是在jdk1.0的时候提出的多线程的实现接口,而Callable接口是在jdk1.5之后提出的;<br>java.lang.Runnable接口之中只提供有一个run()方法,并且没有返回值;<br>java.util.concurrent.Callable接口提供有call()方法,提供有返回值;</p></blockquote></blockquote><h2 id="多线程的运行状态"><a href="#多线程的运行状态" class="headerlink" title="多线程的运行状态"></a>多线程的运行状态</h2><p>对于多线程的开支而言,编写程序的过程之中总是按照:定义线程主体类,然后通过Threa类进行线程的启动,但是并不意味着你掉用了start()方法,线程就已经开始运行了,因为<br>整体的线程处理有自己的一套运行的状态.</p><p><img src="http://imgs.loong.io/image/Thread/threadStart.jpg" alt></p><ul><li>任何一个线程的对象都应该使用Thread类进行封装,所以线程的启动使用的是start(),但是启动的时候实际上若干个线程都将进入到一种就绪状态,现在并没有执行;</li><li>进入就绪状态之后就需要等待进行资源调度,当某一个线程调度成功之后则进入到运行状态(run()方法),但是所有的线程不可能一直持续执行下去,中间需要产生一些暂停的状态,<br>例如:某个线程执行一段时间之后就需要让出资源,而后这个线程就将进入到阻塞状态,随后重新回归到就绪状态;</li><li>当run()方法执行完毕之后,实际上该线程的主要任务也就结束了,那么此时就可以直接进入到停止状态.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java多线程编程&quot;&gt;&lt;a href=&quot;#Java多线程编程&quot; class=&quot;headerlink&quot; title=&quot;Java多线程编程&quot;&gt;&lt;/a&gt;Java多线程编程&lt;/h1&gt;&lt;h2 id=&quot;进程与线程&quot;&gt;&lt;a href=&quot;#进程与线程&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java Thread" scheme="https://blog.loong.io/tags/Java-Thread/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="https://blog.loong.io/2019/06/11/LinkedList/"/>
    <id>https://blog.loong.io/2019/06/11/LinkedList/</id>
    <published>2019-06-11T02:41:13.000Z</published>
    <updated>2020-06-03T02:37:45.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>链表的本质是一个动态的对象数组,他可以实现若干个对象的存储.</p><h2 id="链表的基本定义"><a href="#链表的基本定义" class="headerlink" title="链表的基本定义"></a>链表的基本定义</h2><p>在实际的开发之中对象数组是一项非常实用的技术,并且利用其可以描述出”多”方的概念,例如:一个人有<br>多本书,则在人的类里面一定要提供有一个对象数组保存书的信息,但是传统的对象数组依赖于数组的概念,所以<br>数组里面最大的缺点在于:长度是固定的,正是因为如此所以在实际的开发之中,传统的数组应用是非常有限的(数组的接受<br>以及循环使用),但是如果要想进行灵活的数据保存,那么就必须自己来实现结构.</p><p>传统对象数组的开发操作依赖于脚标(索引)的控制,如果要想实现内容的动态维护,那么难度太高了,而且复杂度<br>攀升,所以现在可以发现,对于一成不动的数据可以使用对象数组来实现,但是对于可能随时变化的数据,就必须<br>实现一个可以动态扩充的对象数组.</p><p>所谓的链表实质性的本质是利用引用的逻辑关系来实现类似数组的数据处理操作,以一种保存”多”方数据的形式,<br>实现数组类似的功能.</p><p>如果先要实现链表的处理,那么需要有一个公共的结构,这个结构可以实现数据的保存以及下一个链接的指向,<br>为了描述这样的逻辑,可以把每一个存储理解为一个节点,所以此时应该准备出一个节点类,但是这个节点类里面可以<br>保存各种数据类型的数据.</p><p><img src="http://imgs.loong.io/image/linkedlist/linkedList.jpg" alt></p><p>虽然已经清楚了需要通过Node节点来进行数据的保存,但是毕竟这里面需要牵扯到节点的引用处理关系,那么这个引用处理关系<br>是由使用者控制吗?这样肯定的不可能,所以应该有一个专门的类来进行节点的引用关系的配置.</p><p>范例:直接操作Node很麻烦</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Node&lt;String&gt; n1 = <span class="keyword">new</span> Node&lt;&gt;(<span class="string">"火车头"</span>);</span><br><span class="line">        Node&lt;String&gt; n2 = <span class="keyword">new</span> Node&lt;&gt;(<span class="string">"车厢1"</span>);</span><br><span class="line">        Node&lt;String&gt; n3 = <span class="keyword">new</span> Node&lt;&gt;(<span class="string">"车厢2"</span>);</span><br><span class="line">        Node&lt;String&gt; n4 = <span class="keyword">new</span> Node&lt;&gt;(<span class="string">"车厢4"</span>);</span><br><span class="line">        Node&lt;String&gt; n5 = <span class="keyword">new</span> Node&lt;&gt;(<span class="string">"车厢5"</span>);</span><br><span class="line">        n1.setNext(n2);</span><br><span class="line">        n2.setNext(n3);</span><br><span class="line">        n3.setNext(n4);</span><br><span class="line">        n4.setNext(n5);</span><br><span class="line">        print(n1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Node&lt;?&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node != <span class="keyword">null</span>) &#123;<span class="comment">// 有节点</span></span><br><span class="line">            System.out.println(node.getData());</span><br><span class="line">            print(node.getNext()); <span class="comment">// 递归调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样肯定不可能,所以应该有一个专门的类进行节点的引用关系的配置.因为真实的使用者关心的<br>只是数据的存储与获取,所以现在应该对我们的Node类进行包装处理.</p></blockquote><p><img src="http://imgs.loong.io/image/linkedlist/linkedListStructure.jpg" alt></p><h2 id="数据增加"><a href="#数据增加" class="headerlink" title="数据增加"></a>数据增加</h2><p>通过之前的分析可以发现在进行链表操作的过程之中为了避免转型的异常应该使用泛型,同时也应该<br>设计一个链表的标准接口,同时具体实现该接口的时候还应该通过Node类做出节点的关系描述.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 保存的节点的数据关系</span></span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">// 保存的下一个引用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;  <span class="comment">// 有数据的情况下才有意义</span></span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的结构-----------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在现在所定义的Node类之中并没有出现有setter与getter方法,是因为内部类中的私有属性与方便外类类<br>直接访问.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 保存的节点的数据关系</span></span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">// 保存的下一个引用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;  <span class="comment">// 有数据的情况下才有意义</span></span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次调用: this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">// 第二次调用: this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">// 第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span> <span class="params">(Node newNode)</span> </span>&#123; <span class="comment">// 保存新的Node数据集</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>)&#123;  <span class="comment">// 当前节点的下一个节点为null</span></span><br><span class="line">                <span class="keyword">this</span>.next = newNode; <span class="comment">// 保存当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的成员-----------------</span></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">// 根节点</span></span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的方法-----------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据本身不具有关联特性,只有Node节点有,那么要实现关联就必须将数据包装在Node类中</span></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(e); <span class="comment">// 创建一个新的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; <span class="comment">// 现在没有根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node; <span class="comment">// 第一个节点作为根节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root.addNode(node); <span class="comment">// 将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> LinkImpl&lt;&gt;();</span><br><span class="line">        all.add(<span class="string">"Hello"</span>);</span><br><span class="line">        all.add(<span class="string">"World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Link类只是负责数据的操作与节点的处理,而所有后续节点的处理都是由Node类负责完成的.</p><h2 id="获取集合个数"><a href="#获取集合个数" class="headerlink" title="获取集合个数"></a>获取集合个数</h2><p>在链表之中往往需要保存有大量的数据,那么这些数据往往需要进行数据个数的统计操作,所以应该在<br>LinkImpl里面追加有数据统计信息,同时当增加或删除数据时,有应该对个数进行修改.</p><blockquote><p>1.在ILink接口里面追加有一个获取数据个数的方法;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// 增加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 获取数据的个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.在LinkImpl子类里里里面追加一个个数统计的属性;</p></blockquote><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">count</span>; <span class="comment">// 保存数据的个数</span></span><br></pre></td></tr></table></figure><blockquote><p>3.在add()方法里面进行数据个数的追加</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void add(E e) &#123;</span><br><span class="line">       // 数据本身不具有关联特性,只有<span class="keyword">Node</span><span class="title">节点有,那么要实现关联就必须将数据包装在Node</span>类中</span><br><span class="line">       <span class="keyword">Node</span> <span class="title">node</span> = new <span class="keyword">Node</span><span class="title">(e</span>); // 创建一个新的节点</span><br><span class="line">       if(root == null) &#123; // 现在没有根节点</span><br><span class="line">           this.root = <span class="keyword">node</span><span class="title">; // 第一个节点作为根节点</span></span><br><span class="line"><span class="title">       &#125;else</span>&#123;</span><br><span class="line">           this.root.addNode(<span class="keyword">node</span><span class="title">); // 将新节点保存在合适的位置</span></span><br><span class="line"><span class="title">       &#125;</span></span><br><span class="line"><span class="title">       this</span>.count ++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.需要在LinkImpl子类里面来返回数据的个数</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// 增加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 获取数据的个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 保存的节点的数据关系</span></span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">// 保存的下一个引用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;  <span class="comment">// 有数据的情况下才有意义</span></span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次调用: this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">// 第二次调用: this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">// 第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span> <span class="params">(Node newNode)</span> </span>&#123; <span class="comment">// 保存新的Node数据集</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>)&#123;  <span class="comment">// 当前节点的下一个节点为null</span></span><br><span class="line">                <span class="keyword">this</span>.next = newNode; <span class="comment">// 保存当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的成员-----------------</span></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// 保存数据的个数</span></span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的方法-----------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据本身不具有关联特性,只有Node节点有,那么要实现关联就必须将数据包装在Node类中</span></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(e); <span class="comment">// 创建一个新的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; <span class="comment">// 现在没有根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node; <span class="comment">// 第一个节点作为根节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root.addNode(node); <span class="comment">// 将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> LinkImpl&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"[增加之前]数据的个数:"</span> + all.size());</span><br><span class="line">        all.add(<span class="string">"Hello"</span>);</span><br><span class="line">        all.add(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"[增加之后]数据的个数:"</span> + all.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="空集合判断"><a href="#空集合判断" class="headerlink" title="空集合判断"></a>空集合判断</h2><p>链表里面可以保存有若干个数据,如果说现在链表还没有保存数据,则表示是一个空集合,则应该提供有一个空的判断.</p><blockquote><p>1.在ILink接口里面追加判断方法;</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断是否为空集合</span></span><br></pre></td></tr></table></figure><blockquote><p>2.在LinkImpl中腹泻此方法;</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// return this.root == null;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用根节点或者长度判断其本质是一样的.</p><blockquote><p>完整代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// 增加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 获取数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断是否为空集合</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 保存的节点的数据关系</span></span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">// 保存的下一个引用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;  <span class="comment">// 有数据的情况下才有意义</span></span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次调用: this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">// 第二次调用: this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">// 第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span> <span class="params">(Node newNode)</span> </span>&#123; <span class="comment">// 保存新的Node数据集</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>)&#123;  <span class="comment">// 当前节点的下一个节点为null</span></span><br><span class="line">                <span class="keyword">this</span>.next = newNode; <span class="comment">// 保存当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的成员-----------------</span></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// 保存数据的个数</span></span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的方法-----------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据本身不具有关联特性,只有Node节点有,那么要实现关联就必须将数据包装在Node类中</span></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(e); <span class="comment">// 创建一个新的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; <span class="comment">// 现在没有根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node; <span class="comment">// 第一个节点作为根节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root.addNode(node); <span class="comment">// 将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> LinkImpl&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"[增加之前]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line">        all.add(<span class="string">"Hello"</span>);</span><br><span class="line">        all.add(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"[增加之后]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回集合数据"><a href="#返回集合数据" class="headerlink" title="返回集合数据"></a>返回集合数据</h2><p>链表本身就属于一个动态的对象数组,那么既然是一个对象数组,那么就应该可以把所哦有的数据以<br>数组的形式返回来,那么这个时候就可以定义一个toArray()方法,但是这个时候只能够返回Object型的数组.</p><p><img src="http://imgs.loong.io/image/linkedlist/toArray.jpg" alt></p><blockquote><p>1.在ILink接口里面追加新的处理方法;</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object[] <span class="title">toArray</span>(<span class="params"></span>)</span>; <span class="comment">// 将集合元素以数组的形式返回</span></span><br></pre></td></tr></table></figure><blockquote><p>2.在LinkImpl里面追加有两个属性;</p></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> foot; <span class="comment">// 描述的是操作数组的脚标</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">Object</span> [] returnData; <span class="comment">// 返回的数据</span></span><br></pre></td></tr></table></figure><blockquote><p>3.在Node类中递归获取数据</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void toArrayNode () &#123;</span><br><span class="line">    LinkImpl.<span class="keyword">this</span>.returnData [LinkImpl.<span class="keyword">this</span>.foot ++] = <span class="keyword">this</span>.<span class="keyword">data</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="literal">null</span>) &#123; <span class="comment">// 还有下一个数据</span></span><br><span class="line">        <span class="keyword">this</span>.next.toArrayNode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.在进行数据返回的时候一定要先判断是否为空集合;</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">    <span class="comment">// 判断是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">//脚标清零</span></span><br><span class="line">    <span class="keyword">this</span>.returnData =  new Object[<span class="keyword">this</span>.count]; <span class="comment">// 根据已有的长度新建一个数组</span></span><br><span class="line">    <span class="keyword">this</span>.root.toArrayNode(); <span class="comment">// 利用Node类进行递归获取数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.returnData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// 增加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 获取数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断是否为空集合</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray(); <span class="comment">// 将集合元素以数组的形式返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 保存的节点的数据关系</span></span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">// 保存的下一个引用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;  <span class="comment">// 有数据的情况下才有意义</span></span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次调用: this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">// 第二次调用: this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">// 第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span> <span class="params">(Node newNode)</span> </span>&#123; <span class="comment">// 保存新的Node数据集</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>)&#123;  <span class="comment">// 当前节点的下一个节点为null</span></span><br><span class="line">                <span class="keyword">this</span>.next = newNode; <span class="comment">// 保存当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toArrayNode</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            LinkImpl.<span class="keyword">this</span>.returnData [LinkImpl.<span class="keyword">this</span>.foot ++] = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123; <span class="comment">// 还有下一个数据</span></span><br><span class="line">                <span class="keyword">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的成员-----------------</span></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// 保存数据的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> foot; <span class="comment">// 描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object [] returnData; <span class="comment">// 返回的数据</span></span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的方法-----------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据本身不具有关联特性,只有Node节点有,那么要实现关联就必须将数据包装在Node类中</span></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(e); <span class="comment">// 创建一个新的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; <span class="comment">// 现在没有根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node; <span class="comment">// 第一个节点作为根节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root.addNode(node); <span class="comment">// 将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">//脚标清零</span></span><br><span class="line">        <span class="keyword">this</span>.returnData =  <span class="keyword">new</span> Object[<span class="keyword">this</span>.count]; <span class="comment">// 根据已有的长度新建一个数组</span></span><br><span class="line">        <span class="keyword">this</span>.root.toArrayNode(); <span class="comment">// 利用Node类进行递归获取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.returnData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> LinkImpl&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"[增加之前]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line">        all.add(<span class="string">"Hello"</span>);</span><br><span class="line">        all.add(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"[增加之后]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line"></span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集合的数据一般如果要返回肯定要以对象数组的形式返回.</p><h2 id="获取指定索引数据"><a href="#获取指定索引数据" class="headerlink" title="获取指定索引数据"></a>获取指定索引数据</h2><p>链表可以像数组一样进行处理,所以也应该可以像数组一样进行索引数据的获取,在这样的情况下就可以继续利用<br>递归的形式来完成.</p><p><img src="http://imgs.loong.io/image/linkedlist/getDataByIndex.png" alt></p><blockquote><p>1.在ILink接口里面追加有新的方法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 根据索引获取数据</span></span><br></pre></td></tr></table></figure><blockquote><p>2.在Node类中追加有根据索引获取数据的处理</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> E getNode(int index) &#123;</span><br><span class="line">    <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">data</span>;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.在LinkImpl子类里面定义数据获取的实现</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> E <span class="keyword">get</span>(int index) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">      <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.root.getNode(index);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这一特点是和数组很相似的，但是需要注意的是，数组获取一个数据的时间复杂度为1，而链表获取数据的时间复杂度为n.</p><blockquote><p>完整代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// 增加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 获取数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断是否为空集合</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray(); <span class="comment">// 将集合元素以数组的形式返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 根据索引获取数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 保存的节点的数据关系</span></span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">// 保存的下一个引用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;  <span class="comment">// 有数据的情况下才有意义</span></span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次调用: this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">// 第二次调用: this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">// 第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span> <span class="params">(Node newNode)</span> </span>&#123; <span class="comment">// 保存新的Node数据集</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>)&#123;  <span class="comment">// 当前节点的下一个节点为null</span></span><br><span class="line">                <span class="keyword">this</span>.next = newNode; <span class="comment">// 保存当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toArrayNode</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            LinkImpl.<span class="keyword">this</span>.returnData [LinkImpl.<span class="keyword">this</span>.foot ++] = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123; <span class="comment">// 还有下一个数据</span></span><br><span class="line">                <span class="keyword">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.data;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的成员-----------------</span></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// 保存数据的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> foot; <span class="comment">// 描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object [] returnData; <span class="comment">// 返回的数据</span></span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的方法-----------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据本身不具有关联特性,只有Node节点有,那么要实现关联就必须将数据包装在Node类中</span></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(e); <span class="comment">// 创建一个新的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; <span class="comment">// 现在没有根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node; <span class="comment">// 第一个节点作为根节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root.addNode(node); <span class="comment">// 将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">//脚标清零</span></span><br><span class="line">        <span class="keyword">this</span>.returnData =  <span class="keyword">new</span> Object[<span class="keyword">this</span>.count]; <span class="comment">// 根据已有的长度新建一个数组</span></span><br><span class="line">        <span class="keyword">this</span>.root.toArrayNode(); <span class="comment">// 利用Node类进行递归获取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> LinkImpl&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"[增加之前]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line">        all.add(<span class="string">"Hello"</span>);</span><br><span class="line">        all.add(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"[增加之后]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line"></span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"**************************数据获取***************************"</span>);</span><br><span class="line">        System.out.println(<span class="string">"获取第一个数据: "</span> + all.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取第二个数据: "</span> + all.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改指定索引数据"><a href="#修改指定索引数据" class="headerlink" title="修改指定索引数据"></a>修改指定索引数据</h2><p>现在已经可以根据索引来获取指定的数据了，但是既然可以获取数据，那么也可以进行数据的修改。</p><blockquote><p>1.在ILink接口中追加有新的方法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E data)</span> </span>; <span class="comment">// 修改索引数据</span></span><br></pre></td></tr></table></figure><blockquote><p>2.在Node类中应该提供有数据的修改的处理支持；</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void setNode(int index, E <span class="keyword">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">data</span> = <span class="keyword">data</span>;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.next.setNode(index, <span class="keyword">data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.在LinkImpl的子类里面进行方法的覆写</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> void <span class="keyword">set</span>(int index, E <span class="keyword">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">    <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">    <span class="keyword">this</span>.root.setNode(index, <span class="keyword">data</span>); <span class="comment">// 修改数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种操作的时间复杂度也是n，因为依然需要进行数据的遍历处理。</p><blockquote><p>完整代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// 增加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 获取数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断是否为空集合</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray(); <span class="comment">// 将集合元素以数组的形式返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 根据索引获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E data)</span> </span>; <span class="comment">// 修改索引数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 保存的节点的数据关系</span></span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">// 保存的下一个引用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;  <span class="comment">// 有数据的情况下才有意义</span></span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次调用: this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">// 第二次调用: this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">// 第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span> <span class="params">(Node newNode)</span> </span>&#123; <span class="comment">// 保存新的Node数据集</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>)&#123;  <span class="comment">// 当前节点的下一个节点为null</span></span><br><span class="line">                <span class="keyword">this</span>.next = newNode; <span class="comment">// 保存当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toArrayNode</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            LinkImpl.<span class="keyword">this</span>.returnData [LinkImpl.<span class="keyword">this</span>.foot ++] = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123; <span class="comment">// 还有下一个数据</span></span><br><span class="line">                <span class="keyword">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.data;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNode</span><span class="params">(<span class="keyword">int</span> index, E data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">                <span class="keyword">this</span>.data = data;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.next.setNode(index, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的成员-----------------</span></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// 保存数据的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> foot; <span class="comment">// 描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object [] returnData; <span class="comment">// 返回的数据</span></span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的方法-----------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据本身不具有关联特性,只有Node节点有,那么要实现关联就必须将数据包装在Node类中</span></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(e); <span class="comment">// 创建一个新的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; <span class="comment">// 现在没有根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node; <span class="comment">// 第一个节点作为根节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root.addNode(node); <span class="comment">// 将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">//脚标清零</span></span><br><span class="line">        <span class="keyword">this</span>.returnData =  <span class="keyword">new</span> Object[<span class="keyword">this</span>.count]; <span class="comment">// 根据已有的长度新建一个数组</span></span><br><span class="line">        <span class="keyword">this</span>.root.toArrayNode(); <span class="comment">// 利用Node类进行递归获取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">        <span class="keyword">this</span>.root.setNode(index, data); <span class="comment">// 修改数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> LinkImpl&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"[增加之前]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line">        all.add(<span class="string">"Hello"</span>);</span><br><span class="line">        all.add(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"[增加之后]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line"></span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"***********************数据修改********************"</span>);</span><br><span class="line">        all.set(<span class="number">0</span>, <span class="string">"你好"</span>);</span><br><span class="line">        System.out.println(<span class="string">"**************************数据获取***************************"</span>);</span><br><span class="line">        System.out.println(<span class="string">"获取第一个数据: "</span> + all.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取第二个数据: "</span> + all.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断指定数据是否存在"><a href="#判断指定数据是否存在" class="headerlink" title="判断指定数据是否存在"></a>判断指定数据是否存在</h2><p>在一个集合里面往往会保存有大量的数据，有些时候需要判断某个数据是否存在，这个时候就可以<br>通过对象比较的模式（equals方法）来完成判断.</p><blockquote><p>1.在ILink接口中追加判断的方法</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E data)</span></span>; <span class="comment">// 判断数据 是否存在</span></span><br></pre></td></tr></table></figure><blockquote><p>2.在Node类中进行依次判断</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> boolean containNode(E <span class="keyword">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.<span class="keyword">data</span>.equals(<span class="keyword">data</span>)) &#123; <span class="comment">// 对象比较</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="literal">null</span>) &#123; <span class="comment">// 找不到后续节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 找不到</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.next.containNode(<span class="keyword">data</span>); <span class="comment">// 向后继续寻找</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.在LinkImpl子类里面实现此方法</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> boolean contains(E <span class="keyword">data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">data</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 没有数据</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.root.containNode(<span class="keyword">data</span>); <span class="comment">// 交给Node类判断</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// 增加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 获取数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断是否为空集合</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray(); <span class="comment">// 将集合元素以数组的形式返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 根据索引获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E data)</span> </span>; <span class="comment">// 修改索引数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E data)</span></span>; <span class="comment">// 判断数据 是否存在</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 保存的节点的数据关系</span></span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">// 保存的下一个引用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;  <span class="comment">// 有数据的情况下才有意义</span></span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次调用: this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">// 第二次调用: this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">// 第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span> <span class="params">(Node newNode)</span> </span>&#123; <span class="comment">// 保存新的Node数据集</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>)&#123;  <span class="comment">// 当前节点的下一个节点为null</span></span><br><span class="line">                <span class="keyword">this</span>.next = newNode; <span class="comment">// 保存当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toArrayNode</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            LinkImpl.<span class="keyword">this</span>.returnData [LinkImpl.<span class="keyword">this</span>.foot ++] = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123; <span class="comment">// 还有下一个数据</span></span><br><span class="line">                <span class="keyword">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.data;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNode</span><span class="params">(<span class="keyword">int</span> index, E data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">                <span class="keyword">this</span>.data = data;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.next.setNode(index, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containNode</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.data.equals(data)) &#123; <span class="comment">// 对象比较</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>) &#123; <span class="comment">// 找不到后续节点</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;  <span class="comment">// 找不到</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.next.containNode(data); <span class="comment">// 向后继续寻找</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的成员-----------------</span></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// 保存数据的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> foot; <span class="comment">// 描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object [] returnData; <span class="comment">// 返回的数据</span></span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的方法-----------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据本身不具有关联特性,只有Node节点有,那么要实现关联就必须将数据包装在Node类中</span></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(e); <span class="comment">// 创建一个新的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; <span class="comment">// 现在没有根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node; <span class="comment">// 第一个节点作为根节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root.addNode(node); <span class="comment">// 将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">//脚标清零</span></span><br><span class="line">        <span class="keyword">this</span>.returnData =  <span class="keyword">new</span> Object[<span class="keyword">this</span>.count]; <span class="comment">// 根据已有的长度新建一个数组</span></span><br><span class="line">        <span class="keyword">this</span>.root.toArrayNode(); <span class="comment">// 利用Node类进行递归获取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">        <span class="keyword">this</span>.root.setNode(index, data); <span class="comment">// 修改数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 没有数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.root.containNode(data); <span class="comment">// 交给Node类判断</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> LinkImpl&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"[增加之前]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line">        all.add(<span class="string">"Hello"</span>);</span><br><span class="line">        all.add(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"[增加之后]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line"></span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"***********************数据修改********************"</span>);</span><br><span class="line">        all.set(<span class="number">0</span>, <span class="string">"你好"</span>);</span><br><span class="line">        System.out.println(<span class="string">"**************************数据获取***************************"</span>);</span><br><span class="line">        System.out.println(<span class="string">"获取第一个数据: "</span> + all.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取第二个数据: "</span> + all.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"*************************数据包含判断********************"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据是否包含World:"</span> + all.contains(<span class="string">"World"</span>));</span><br><span class="line">        System.out.println(<span class="string">"数据是否包含hello:"</span> + all.contains(<span class="string">"hello"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于整个链表没有null数据的存在，所以整体的程序在判断的时候直接使用每一个的节点数据发出equals()<br>方法调用即可。</p><p>##　数据的删除处理</p><p>数据的删除指的是可以从集合里面删除掉指定的一个数据内容，也就是说此时传递的是数据内容，<br>如果要实现这种操作依然需要对象比较的支持。但是对于集合数据的删除我们需要考虑两种情况：</p><ul><li>要删除是根节点数据(LinkImpl与根节点有关，所以这个判断由根节点完成)；</li></ul><p><img src="http://imgs.loong.io/image/linkedlist/deleteData.png" alt></p><ul><li>要删除的不是根节点数据（由Node类负责）；</li></ul><p><img src="http://imgs.loong.io/image/linkedlist/deleteData1.png" alt></p><blockquote><p>1.在ILink接口里面追加新的删除方法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E data)</span></span>; <span class="comment">// 数据删除</span></span><br></pre></td></tr></table></figure><blockquote><p>2.在LinkImpl里面实现根节点的判断</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> void remove(E <span class="keyword">data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.contains(<span class="keyword">data</span>))&#123; <span class="comment">// 判断数据是否存在</span></span><br><span class="line">          <span class="keyword">if</span>(<span class="keyword">data</span>.equals(<span class="keyword">this</span>.root.<span class="keyword">data</span>)) &#123; <span class="comment">// 要删除节点为根节点</span></span><br><span class="line">              <span class="keyword">this</span>.root = <span class="keyword">this</span>.root.next;  <span class="comment">// 根的下一个节点</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.count --;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.如果要删除节点不为根节点就需要进行后续节点判断，但是请一定要记住，此时根节点已经判断完成了，再判断应该从根节点的下一个开始判断，在Node类中追加删除处理；</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void removeNode(Node previous, E <span class="keyword">data</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span>(<span class="keyword">data</span>.equals(<span class="keyword">this</span>.<span class="keyword">data</span>)) &#123;</span><br><span class="line">               previous.next = <span class="keyword">this</span>.next; <span class="comment">// 空出当前节点</span></span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="literal">null</span>) &#123;  <span class="comment">// 有后续节点</span></span><br><span class="line">                   <span class="keyword">this</span>.next.removeNode(<span class="keyword">this</span>, <span class="keyword">data</span>); <span class="comment">//向后继续删除</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.完善LinkImpl子类中的方法</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> void remove(E <span class="keyword">data</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.contains(<span class="keyword">data</span>))&#123; <span class="comment">// 判断数据是否存在</span></span><br><span class="line">           <span class="keyword">if</span>(<span class="keyword">data</span>.equals(<span class="keyword">this</span>.root.<span class="keyword">data</span>)) &#123; <span class="comment">// 要删除节点为根节点</span></span><br><span class="line">               <span class="keyword">this</span>.root = <span class="keyword">this</span>.root.next;  <span class="comment">// 根的下一个节点</span></span><br><span class="line">           &#125;<span class="keyword">else</span> &#123; <span class="comment">// 交由Node类负责删除</span></span><br><span class="line">               <span class="keyword">this</span>.root.next.removeNode(<span class="keyword">this</span>.root, <span class="keyword">data</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">this</span>.count --;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// 增加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 获取数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断是否为空集合</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray(); <span class="comment">// 将集合元素以数组的形式返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 根据索引获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E data)</span> </span>; <span class="comment">// 修改索引数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E data)</span></span>; <span class="comment">// 判断数据 是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E data)</span></span>; <span class="comment">// 数据删除</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 保存的节点的数据关系</span></span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">// 保存的下一个引用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;  <span class="comment">// 有数据的情况下才有意义</span></span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次调用: this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">// 第二次调用: this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">// 第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span> <span class="params">(Node newNode)</span> </span>&#123; <span class="comment">// 保存新的Node数据集</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>)&#123;  <span class="comment">// 当前节点的下一个节点为null</span></span><br><span class="line">                <span class="keyword">this</span>.next = newNode; <span class="comment">// 保存当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toArrayNode</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            LinkImpl.<span class="keyword">this</span>.returnData [LinkImpl.<span class="keyword">this</span>.foot ++] = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123; <span class="comment">// 还有下一个数据</span></span><br><span class="line">                <span class="keyword">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.data;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNode</span><span class="params">(<span class="keyword">int</span> index, E data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">                <span class="keyword">this</span>.data = data;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.next.setNode(index, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containNode</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="keyword">this</span>.data)) &#123; <span class="comment">// 对象比较</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>) &#123; <span class="comment">// 找不到后续节点</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;  <span class="comment">// 找不到</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.next.containNode(data); <span class="comment">// 向后继续寻找</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node previous, E data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="keyword">this</span>.data)) &#123;</span><br><span class="line">                previous.next = <span class="keyword">this</span>.next; <span class="comment">// 空出当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123;  <span class="comment">// 有后续节点</span></span><br><span class="line">                    <span class="keyword">this</span>.next.removeNode(<span class="keyword">this</span>, data); <span class="comment">//向后继续删除</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的成员-----------------</span></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// 保存数据的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> foot; <span class="comment">// 描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object [] returnData; <span class="comment">// 返回的数据</span></span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的方法-----------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据本身不具有关联特性,只有Node节点有,那么要实现关联就必须将数据包装在Node类中</span></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(e); <span class="comment">// 创建一个新的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; <span class="comment">// 现在没有根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node; <span class="comment">// 第一个节点作为根节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root.addNode(node); <span class="comment">// 将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">//脚标清零</span></span><br><span class="line">        <span class="keyword">this</span>.returnData =  <span class="keyword">new</span> Object[<span class="keyword">this</span>.count]; <span class="comment">// 根据已有的长度新建一个数组</span></span><br><span class="line">        <span class="keyword">this</span>.root.toArrayNode(); <span class="comment">// 利用Node类进行递归获取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">        <span class="keyword">this</span>.root.setNode(index, data); <span class="comment">// 修改数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 没有数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.root.containNode(data); <span class="comment">// 交给Node类判断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.contains(data))&#123; <span class="comment">// 判断数据是否存在</span></span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="keyword">this</span>.root.data)) &#123; <span class="comment">// 要删除节点为根节点</span></span><br><span class="line">                <span class="keyword">this</span>.root = <span class="keyword">this</span>.root.next;  <span class="comment">// 根的下一个节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">// 交由Node类负责删除</span></span><br><span class="line">                <span class="keyword">this</span>.root.next.removeNode(<span class="keyword">this</span>.root, data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.count --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> LinkImpl&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"[增加之前]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line">        all.add(<span class="string">"Hello"</span>);</span><br><span class="line">        all.add(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"[增加之后]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line"></span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"***********************数据修改********************"</span>);</span><br><span class="line">        all.set(<span class="number">0</span>, <span class="string">"你好"</span>);</span><br><span class="line">        System.out.println(<span class="string">"**************************数据获取***************************"</span>);</span><br><span class="line">        System.out.println(<span class="string">"获取第一个数据: "</span> + all.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取第二个数据: "</span> + all.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"*************************数据包含判断********************"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据是否包含World:"</span> + all.contains(<span class="string">"World"</span>));</span><br><span class="line">        System.out.println(<span class="string">"数据是否包含hello:"</span> + all.contains(<span class="string">"hello"</span>));</span><br><span class="line">        System.out.println(<span class="string">"*************************删除数据********************"</span>);</span><br><span class="line">        all.remove(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据是否包含World:"</span> + all.contains(<span class="string">"World"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除的逻辑就是用了引用改变。</p><h2 id="清空链表"><a href="#清空链表" class="headerlink" title="清空链表"></a>清空链表</h2><p>有的时候需要进行链表的整体清空处理，这个时候结可以直接根据根元素来进行控制，只要root设置为了null，那么后续的节点就都不存在了。</p><blockquote><p>1.在ILink接口里面追加有清空处理方法；<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span>; <span class="comment">// 数据的清空</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.在LinkImpl子类里覆写方法</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="keyword">null</span>; <span class="comment">// 后续的节点都没有了</span></span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;  <span class="comment">// 个数清零</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 链表;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// 设置泛型避免安全隐患</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// 增加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 获取数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断是否为空集合</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray(); <span class="comment">// 将集合元素以数组的形式返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 根据索引获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E data)</span> </span>; <span class="comment">// 修改索引数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E data)</span></span>; <span class="comment">// 判断数据 是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E data)</span></span>; <span class="comment">// 数据删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span>; <span class="comment">// 数据的清空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 保存的节点的数据关系</span></span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">// 保存的下一个引用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;  <span class="comment">// 有数据的情况下才有意义</span></span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次调用: this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">// 第二次调用: this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">// 第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span> <span class="params">(Node newNode)</span> </span>&#123; <span class="comment">// 保存新的Node数据集</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>)&#123;  <span class="comment">// 当前节点的下一个节点为null</span></span><br><span class="line">                <span class="keyword">this</span>.next = newNode; <span class="comment">// 保存当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toArrayNode</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            LinkImpl.<span class="keyword">this</span>.returnData [LinkImpl.<span class="keyword">this</span>.foot ++] = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123; <span class="comment">// 还有下一个数据</span></span><br><span class="line">                <span class="keyword">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.data;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNode</span><span class="params">(<span class="keyword">int</span> index, E data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot ++ == index) &#123; <span class="comment">// 索引相同</span></span><br><span class="line">                <span class="keyword">this</span>.data = data;  <span class="comment">// 要返回当前数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.next.setNode(index, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containNode</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="keyword">this</span>.data)) &#123; <span class="comment">// 对象比较</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>) &#123; <span class="comment">// 找不到后续节点</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;  <span class="comment">// 找不到</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.next.containNode(data); <span class="comment">// 向后继续寻找</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node previous, E data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="keyword">this</span>.data)) &#123;</span><br><span class="line">                previous.next = <span class="keyword">this</span>.next; <span class="comment">// 空出当前节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123;  <span class="comment">// 有后续节点</span></span><br><span class="line">                    <span class="keyword">this</span>.next.removeNode(<span class="keyword">this</span>, data); <span class="comment">//向后继续删除</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的成员-----------------</span></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// 保存数据的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> foot; <span class="comment">// 描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object [] returnData; <span class="comment">// 返回的数据</span></span><br><span class="line">    <span class="comment">// ---------------以下为Link类中定义的方法-----------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据本身不具有关联特性,只有Node节点有,那么要实现关联就必须将数据包装在Node类中</span></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(e); <span class="comment">// 创建一个新的节点</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; <span class="comment">// 现在没有根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node; <span class="comment">// 第一个节点作为根节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root.addNode(node); <span class="comment">// 将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">//脚标清零</span></span><br><span class="line">        <span class="keyword">this</span>.returnData =  <span class="keyword">new</span> Object[<span class="keyword">this</span>.count]; <span class="comment">// 根据已有的长度新建一个数组</span></span><br><span class="line">        <span class="keyword">this</span>.root.toArrayNode(); <span class="comment">// 利用Node类进行递归获取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// 索引应该在指定范围之内</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; <span class="comment">// 索引数据的获取应该由Node来完成</span></span><br><span class="line">        <span class="keyword">this</span>.foot = <span class="number">0</span>; <span class="comment">// 重置角标</span></span><br><span class="line">        <span class="keyword">this</span>.root.setNode(index, data); <span class="comment">// 修改数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 没有数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.root.containNode(data); <span class="comment">// 交给Node类判断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.contains(data))&#123; <span class="comment">// 判断数据是否存在</span></span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="keyword">this</span>.root.data)) &#123; <span class="comment">// 要删除节点为根节点</span></span><br><span class="line">                <span class="keyword">this</span>.root = <span class="keyword">this</span>.root.next;  <span class="comment">// 根的下一个节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">// 交由Node类负责删除</span></span><br><span class="line">                <span class="keyword">this</span>.root.next.removeNode(<span class="keyword">this</span>.root, data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.count --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = <span class="keyword">null</span>; <span class="comment">// 后续的节点都没有了</span></span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;  <span class="comment">// 个数清零</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> LinkImpl&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"[增加之前]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line">        all.add(<span class="string">"Hello"</span>);</span><br><span class="line">        all.add(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"[增加之后]数据的个数:"</span> + all.size());</span><br><span class="line">        System.out.println(<span class="string">"是否为空集合:"</span> + all.isEmpty());</span><br><span class="line"></span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"***********************数据修改********************"</span>);</span><br><span class="line">        all.set(<span class="number">0</span>, <span class="string">"你好"</span>);</span><br><span class="line">        System.out.println(<span class="string">"**************************数据获取***************************"</span>);</span><br><span class="line">        System.out.println(<span class="string">"获取第一个数据: "</span> + all.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取第二个数据: "</span> + all.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"*************************数据包含判断********************"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据是否包含World:"</span> + all.contains(<span class="string">"World"</span>));</span><br><span class="line">        System.out.println(<span class="string">"数据是否包含hello:"</span> + all.contains(<span class="string">"hello"</span>));</span><br><span class="line">        System.out.println(<span class="string">"*************************删除数据********************"</span>);</span><br><span class="line">        all.remove(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据是否包含World:"</span> + all.contains(<span class="string">"World"</span>));</span><br><span class="line">        System.out.println(<span class="string">"*************************清空数据********************"</span>);</span><br><span class="line">        all.clean();</span><br><span class="line">        System.out.println(<span class="string">"数据的个数:"</span> + all.size());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是最简单最基础的单向链表的实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;p&gt;链表的本质是一个动态的对象数组,他可以实现若干个对象的存储.&lt;/p&gt;
&lt;h2 id=&quot;链表的基本定义&quot;&gt;&lt;a href=&quot;#链表的基本定义&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java函数式编程</title>
    <link href="https://blog.loong.io/2019/06/07/function/"/>
    <id>https://blog.loong.io/2019/06/07/function/</id>
    <published>2019-06-07T06:10:43.000Z</published>
    <updated>2020-06-03T02:37:45.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>从JDK1.8开始为了简化使用者进行代码的开发，专门提供有Lambda表达式的支持，利用此操作形式可以实现函数式的编程。利用函数式的编程可以避免掉面向对象编程之中的一些繁琐的处理问题。</p><p>面向对象在其长期的发展的过程之中，一直有一部分的反对者，这些反对者认为面向对象的设计过于复杂了，并且过于繁琐了。</p><p>以一个最简单的程序为例：</p><p>范例：观察传统开发中的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        IMessage message = <span class="keyword">new</span> IMessage() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"消息发送："</span> + str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        message.send(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这样一个程序里面，实际上核心的功能只有一条语句<code>System.out.println(&quot;消息发送：&quot; + str);</code><br>但是为了这一条核心语句依然需要按照完整的面向对象给出的设计结构进行开发。</p><p>于是这些问题随着技术的不断发展也是越来越突出了。</p><p>范例：使用Lambda表达式实现与之前完全一样的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IMessage message = str -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"发送消息："</span> + str);</span><br><span class="line">        &#125;;</span><br><span class="line">        message.send(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用这种形式就避免了复杂的面向对象结构化的要求。</p><blockquote><p>Lambda表达式如果要想使用，那么就必须有一个重要的实现要求：ASM（Single Abstract Method），<br>只有一个抽象方法，以之前IMessage接口为例，在这个接口里面发现只是提供有一个send()方法，<br>除此之外没有任何的其他方法的定义，所以这样的接口又被称之为函数式接口，而只有函数式的接口才可以<br>被Lambda表达式所使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 函数式接口注解</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IMessage message = str -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"发送消息："</span> + str);</span><br><span class="line">        &#125;;</span><br><span class="line">        message.send(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于Lambda表达式而言，提供有如下的几种格式：</p><ul><li>方法没有参数: <code>()-&gt;{};</code></li><li>方法有参数：<code>(参数,参数)-&gt;{};</code></li><li>如果现在只有一行语句返回：<code>(参数,参数)-&gt;语句;</code></li></ul><p>范例：定义没有参数的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPrint</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoArgumentsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        IPrint print = ()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"hello world!!"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        print.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：定义有参数的处理形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMath</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        IMath math = (x, y)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(math.add(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的表达式之中你会发现只有一行语句，这个时候也可以进一步简化。</p><p>范例：简化Lambda操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMath</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//        IMath math = (x, y)-&gt;&#123;</span></span><br><span class="line"><span class="comment">//            return x + y;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line">        IMath math = (x, y)-&gt;x +y;</span><br><span class="line"></span><br><span class="line">        System.out.println(math.add(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用Lambda表达式的确可以摆脱传统面向对象之中关于结构的限制，使得代码更加的简便。</p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>引用数据类型最大的特点是可以进行内存的指向处理,但是在传统的开发之中一直使用的只是对象引用操作,<br>而jdk1.8之后也提供有方法的引用,即:不同的方法名称可以描述同一个方法.如果要进行方法的引用在Java<br>里面提供有如下的四种形式:</p><ul><li>引用静态方法: <code>类名称::static 方法名称;</code></li><li>引用某个实例对象: <code>实例化对象 :: 普通方法;</code></li><li>应用特定类型的方法: <code>特定类 :: 普通方法;</code></li><li>引用构造方法: <code>类名称 :: new;</code></li></ul><h3 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h3><p>范例: 引用静态方法</p><blockquote><p>在<code>String</code>类里面提供有<code>String.valueOf()</code>方法,这个方法就属于静态方法.</p><blockquote><p>方法定义: <code>public static String valueOf(int i)</code>,该方法有参数,并且还有返回值.</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// P描述的是参数,R描述的是返回值</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IFunction</span>&lt;<span class="title">P</span>,<span class="title">R</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">change</span><span class="params">(P p)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        IFunction&lt;Integer, String&gt; fun = String :: valueOf;</span><br><span class="line">        String str = fun.change(<span class="number">100</span>);</span><br><span class="line">        System.out.println(str.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用方法引用这一概念可以为一个方法定义多个名字,但是要求必须是函数式接口.</p></blockquote><h3 id="引用实例化对象的方法"><a href="#引用实例化对象的方法" class="headerlink" title="引用实例化对象的方法"></a>引用实例化对象的方法</h3><p>范例:引用实例化对象中的方法</p><blockquote><p>在<code>String</code>类里面有一个转大写的方法: <code>public String toUpperCase();</code></p><blockquote><p>这个方法是必须在有实例化对象提供的情况下才可以调用;</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMethod</span>&lt;<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">upper</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 方法引用,实例化对象方法</span></span><br><span class="line">        IMethod&lt;String&gt; method = <span class="string">"hello world"</span> :: toUpperCase;</span><br><span class="line">        String upperStr = method.upper();</span><br><span class="line">        System.out.println(upperStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用特定类型的方法"><a href="#应用特定类型的方法" class="headerlink" title="应用特定类型的方法"></a>应用特定类型的方法</h3><p>在进行方法的引用的时候也可以引用特定类中的一些操作方法, 在String类里面提供有一个字符串大小<br>关系的比较;</p><blockquote><p>比较大小: <code>public int compareTo(String anotherString);</code></p></blockquote><p>这是一个普通方法,如果要引用普通方法,则往往都需要实例化对象,但是如果说现在你不想给出实力化<br>对象,只是想引用这个方法,则就可以使用特定类进行引用处理.</p><p>范例: 引用指定类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICompare</span>&lt;<span class="title">P</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(P p1, P p2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 引用特定类中方法</span></span><br><span class="line">        ICompare&lt;String&gt; function = String::compareTo;</span><br><span class="line">        <span class="keyword">int</span> num = function.compare(<span class="string">"A"</span>, <span class="string">"a"</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法的引用"><a href="#构造方法的引用" class="headerlink" title="构造方法的引用"></a>构造方法的引用</h3><p>范例:引用构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名:"</span> + <span class="keyword">this</span>.name + <span class="string">", 年龄: "</span> + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICreate</span>&lt;<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">create</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 引用构造方法</span></span><br><span class="line">        ICreate&lt;Person&gt; f = Person::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(f.create(<span class="string">"王五"</span>, <span class="number">23</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供方法引用的概念更多的情况下也只是弥补了对于引用的支持功能.</p><h2 id="内建函数式接口"><a href="#内建函数式接口" class="headerlink" title="内建函数式接口"></a>内建函数式接口</h2><p>在JDK1.8之中提供有 Lambda表达式也提供有方法引用,但是你会发现如果由开发者自己定义<br>函数式接口,往往都需要使用<code>@FunctionInterface</code>注解来进行大量声明,于是很多的情况下<br>如果为了方便则可以引用系统中提供的函数式接口.</p><p>在系统之中专门提供有一个<code>java.util.function</code>的开发包,里面可以直接使用函数式接口.<br>在这个包下面一共有如下的几个核心接口供我们使用:</p><h3 id="功能性函数式接口"><a href="#功能性函数式接口" class="headerlink" title="功能性函数式接口"></a>功能性函数式接口</h3><h4 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>,<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildInFunctionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 功能性函数式接口</span></span><br><span class="line">        Function&lt;String, Boolean&gt; fun = <span class="string">"**Hello"</span>::startsWith;</span><br><span class="line">        System.out.println(fun.apply(<span class="string">"**"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费性函数式接口"><a href="#消费性函数式接口" class="headerlink" title="消费性函数式接口"></a>消费性函数式接口</h3><blockquote><p>只能供进行数据的处理操作,而没有任何的返回;</p><blockquote><p>在进行系统数据输出的时候使用的是:<code>System.out.println();</code></p></blockquote></blockquote><h4 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的使用-1"><a href="#接口的使用-1" class="headerlink" title="接口的使用"></a>接口的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildInFunctionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 消费性函数式接口</span></span><br><span class="line">        Consumer&lt;String&gt; con = System.out::println;</span><br><span class="line">        con.accept(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="供给型函数式接口"><a href="#供给型函数式接口" class="headerlink" title="供给型函数式接口"></a>供给型函数式接口</h3><blockquote><p>在<code>String</code>类中提供有转小写的方法,这个方法没有接收参数,但是有返回值;</p><blockquote><p>方法: <code>public String toLowerCase()</code></p></blockquote></blockquote><h4 id="接口的定义-1"><a href="#接口的定义-1" class="headerlink" title="接口的定义"></a>接口的定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的使用-2"><a href="#接口的使用-2" class="headerlink" title="接口的使用"></a>接口的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildInFunctionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 供给性函数式接口</span></span><br><span class="line">        Supplier&lt;String&gt; supplier = <span class="string">"HELLO"</span>::toLowerCase;</span><br><span class="line">        String str = supplier.get();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="断言性函数式接口"><a href="#断言性函数式接口" class="headerlink" title="断言性函数式接口"></a>断言性函数式接口</h3><blockquote><p>进行判断处理</p><blockquote><p>在<code>String</code>类中有一个<code>equalsIgnoreCase()</code>方法</p></blockquote></blockquote><h4 id="接口的定义-2"><a href="#接口的定义-2" class="headerlink" title="接口的定义"></a>接口的定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的使用-3"><a href="#接口的使用-3" class="headerlink" title="接口的使用"></a>接口的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildInFunctionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言性函数式接口</span></span><br><span class="line">        Predicate&lt;String&gt; predicate = <span class="string">"hello"</span>::equalsIgnoreCase;</span><br><span class="line">        System.out.println(predicate.test(<span class="string">"HELLO"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以后对于实际项目开发之中,如果JDK本身提供的函数式接口可以被我们所使用,那么就没有必要重新定义了.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h1&gt;&lt;h2 id=&quot;Lambda表达式&quot;&gt;&lt;a href=&quot;#Lambda表达式&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java Lambda" scheme="https://blog.loong.io/tags/Java-Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="https://blog.loong.io/2019/05/17/reflect/"/>
    <id>https://blog.loong.io/2019/05/17/reflect/</id>
    <published>2019-05-17T09:40:28.000Z</published>
    <updated>2020-06-03T02:37:45.342Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/keyarea/java-base/tree/master/src/%E5%8F%8D%E5%B0%84" target="_blank" rel="noopener">源码</a></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射库提供了一个非常丰富且精心设计的工具集，以便编写能够动态操纵Java代码的程序。</p><p>Java反射说的是在运行状态中，对于任何一个类，我们都能够知道这个类有哪些方法和属性。对于任何一个对象，我们都能够对它的方法和属性进行调用。我们把这种动态获取对象信息和调用对象方法的功能称之为反射机制。</p><blockquote><p>能够分析类能力的程序被称为反射。</p></blockquote><p>反射主要可以用来：</p><ul><li>在运行时分析类的能力；</li><li>在运行时查看对象，例如编写一个toString方法供所有类使用；</li><li>实现通用数组的操作代码;</li><li>利用Method对象。</li></ul><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>在程序运行期间，Java运行时系统始终为所有对象维护了一个被称为运行时的类型标识。<br>这个信息跟踪每个对象所属的类。虚拟机利用运行时类型信息选择相应的方法执行。</p><h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h3><p>然而，可以通过专门的Java类访问这些信息。保存这些信息的类被称为Class，这个名字很容易让人<br>混淆。Object类中的getClass()方法将会返回一个Class类型的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个对象</span></span><br><span class="line">        People p = <span class="keyword">new</span> People();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对象的class对象</span></span><br><span class="line">        Class c = p.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类名称</span></span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Class-forName"><a href="#Class-forName" class="headerlink" title="Class.forName"></a>Class.forName</h3><p>调用静态方法 forName 获得类名对应的 Class 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 通过静态方法获取类名对应的Class对象</span></span><br><span class="line">        String className = <span class="string">"反射.People"</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class c1 = Class.forName(className);</span><br><span class="line">            System.out.println(c1.getName());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果类名保存在字符串中， 并可在运行中改变， 就可以使用这个方法。当然， 这个方法<br>  只有在 dassName 是类名或接口名时才能够执行。 否则， forName 方法将抛出一个 checked<br>  exception ( 已检查异常）。无论何时使用这个方法， 都应该提供一个异常处理器（ exception<br>  handler) o</p></blockquote><h3 id="T-class"><a href="#T-class" class="headerlink" title="T.class"></a>T.class</h3><p>获得 Class 类对象的第三种方法非常简单。如果 T 是任意的 Java 类型（或 void 关键字，)<br>T.class 将代表匹配的类对象。例如：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span> cl = Random.<span class="keyword">class</span>; // <span class="keyword">if</span> you <span class="keyword">import</span> java.util</span><br><span class="line"><span class="keyword">Class</span> c2 = <span class="built_in">int</span>.<span class="keyword">class</span>;</span><br><span class="line"><span class="keyword">Class</span> c3 = <span class="keyword">Double</span>.<span class="keyword">class</span>;</span><br></pre></td></tr></table></figure><p>请注意， 一个 Class 对象实际上表示的是一个类型， 而这个类型未必一定是一种类。 例如，<br>int 不是类， 但 int.class 是一个 Class 类型的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Class c2 = People.class;</span><br><span class="line">        System.out.println(c2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类对象比较"><a href="#类对象比较" class="headerlink" title="类对象比较"></a>类对象比较</h3><p>虚拟机为每个类型管理一个 Class 对象。 因此， 可以利用==运算符实现两个类对象比较<br>的操作。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">c</span> == c2)&#123;</span><br><span class="line">    <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"两个类对象相同"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="newlnstance"><a href="#newlnstance" class="headerlink" title="newlnstance()"></a>newlnstance()</h3><p><code>newlnstance()</code>，可以用来动态地创建一个类的实例。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">c</span><span class="selector-class">.getClass</span>()<span class="selector-class">.newlnstance</span>();</span><br></pre></td></tr></table></figure><p>创建了一个与c具有相同类类型的实例。 <code>newlnstance</code> 方法调用默认的构造器 （没有参数的构<br>造器）初始化新创建的对象。 如果这个类没有默认的构造器， 就会抛出一个异常。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    People p1 = (People) c.<span class="keyword">new</span><span class="type">Instance</span>();</span><br><span class="line">    System.out.println(p1.getName());</span><br><span class="line">&#125;<span class="keyword">catch</span> (InstantiationException | IllegalAccessException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用反射分析类的能力"><a href="#利用反射分析类的能力" class="headerlink" title="利用反射分析类的能力"></a>利用反射分析类的能力</h2><p>在 <code>java.lang.reflect</code> 包中有三个类 <code>Field</code>、 <code>Method</code> 和 <code>Constructor</code> 分别用于描述类的域、 方<br>法和构造器。</p><p> 这三个类都有一个叫做 <code>getName</code> 的方法， 用来返回项目的名称。</p><p> <code>Field</code> 类有一个<code>getType</code>方法， 用来返回描述域所属类型的 Class 对象。</p><p> <code>Method</code> 和<code>Constructor</code>类有能够报告参数类型的方法， <code>Method</code> 类还有一个可以报告返回类型的方法。</p><p> 这三个类还有一个叫做<code>getModifiers</code>的方法， 它将返回一个整型数值， 用不同的位开关描述<code>public</code> 和<code>static</code>这样的修饰符使用状况。</p><p> 还可以利用 <code>java.lang.reflect</code> 包中的 <code>Modifier</code> 类的静态方法分析<code>getModifiers</code> 返回的整型数值。 例如， 可以使用 <code>Modifier</code> 类中的 <code>isPublic</code>、 <code>isPrivate</code> 或 <code>isFinal</code><br> 判断方法或构造器是否是 <code>public</code>、 <code>private</code> 或 <code>final</code>。 我们需要做的全部工作就是调用 <code>Modifier</code><br> 类的相应方法， 并对返回的整型数值进行分析， 另外，还可以利用 <code>Modifier.toString</code>方法将<br> 修饰符打印出来。</p><p> <code>Class</code>类中的 <code>getFields</code>、 <code>getMethods</code> 和 <code>getConstructors</code> 方 法 将 分 别 返 回 类 提 供 的<br> public域、方法和构造器数组， 其中包括超类的公有成员。<code>Class</code> 类的 <code>getDeclareFields</code>、<br> <code>getDeclareMethods</code> 和 <code>getDeclaredConstructors</code> 方法将分别返回类中声明的全部域、 方法和构<br> 造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><h3 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        得到类对象的构造方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 得到类对象</span></span><br><span class="line">        Class c = Class.forName(<span class="string">"反射.People"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"____________得到类对象的所有共有构造方法______________"</span>);</span><br><span class="line">        <span class="comment">// 得到类对象的所有公用构造方法</span></span><br><span class="line">        Constructor[] constructors = c.getConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor constructor: constructors )&#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"_______________________得到类对象的所有构造方法____________________________"</span>);</span><br><span class="line">        <span class="comment">// 得到类对象的所有构造方法</span></span><br><span class="line">        Constructor[] constructors1 = c.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor constructor: constructors1 )&#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"_______________________得到类对象的公有无参构造____________________________"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Constructor constructor = c.getConstructor(<span class="keyword">null</span>);</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"_______________________得到类对象的公有有参构造____________________________"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Constructor constructor = c.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"_______________________得到类对象的私有有参构造____________________________"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor constructor = c.getDeclaredConstructor(String.class);</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">____________得到类对象的所有共有构造方法______________</span><br><span class="line">public 反射.People(java.lang.String,int)</span><br><span class="line">public 反射.People()</span><br><span class="line">_______________________得到类对象的所有构造方法____________________________</span><br><span class="line">private 反射.People(java.lang.String)</span><br><span class="line">public 反射.People(java.lang.String,int)</span><br><span class="line">public 反射.People()</span><br><span class="line">_______________________得到类对象的公有无参构造____________________________</span><br><span class="line">public 反射.People()</span><br><span class="line">_______________________得到类对象的公有有参构造____________________________</span><br><span class="line">public 反射.People(java.lang.String,int)</span><br><span class="line">_______________________得到类对象的私有有参构造____________________________</span><br><span class="line">private 反射.People(java.lang.String)</span><br></pre></td></tr></table></figure><h3 id="获取类属性"><a href="#获取类属性" class="headerlink" title="获取类属性"></a>获取类属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 得到类对象</span></span><br><span class="line">        Class c = Class.forName(<span class="string">"反射.People"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"_______________________得到类对象的公共字段____________________________"</span>);</span><br><span class="line">        Field[] fields = c.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"_______________________得到类对象的所有字段____________________________"</span>);</span><br><span class="line">        Field[] fields1 = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields1)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"______________________获取共有字段并使用_____________________________"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取指定共有字段</span></span><br><span class="line">            Field field = c.getField(<span class="string">"eName"</span>);</span><br><span class="line">            <span class="comment">// 获取共有构造方法并实例化</span></span><br><span class="line">            Object obj = c.getConstructor().newInstance();</span><br><span class="line">            <span class="comment">// 为属性设置值</span></span><br><span class="line">            field.set(obj, <span class="string">"hello"</span>);</span><br><span class="line">            <span class="comment">// 转型</span></span><br><span class="line">            People people = (People) obj;</span><br><span class="line">            System.out.println(people.geteName());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"______________________获取私有字段并使用_____________________________"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取指定私有字段</span></span><br><span class="line">            Field field = c.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">            <span class="comment">// 获取构造方法并实例化</span></span><br><span class="line">            Object obj = c.getConstructor().newInstance();</span><br><span class="line">            <span class="comment">// 暴力反射</span></span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 给属性设置值</span></span><br><span class="line">            field.set(obj, <span class="string">"wang"</span>);</span><br><span class="line">            People people = (People) obj;</span><br><span class="line">            System.out.println(people.getName());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">___得到类对象的公共字段__</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span>_</span><br><span class="line">public java.lang.String 反射.People.eName</span><br><span class="line"><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">___得到类对象的所有字段__</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span>_</span><br><span class="line">private java.lang.String 反射.People.name</span><br><span class="line">private int 反射.People.age</span><br><span class="line">public java.lang.String 反射.People.eName</span><br><span class="line"><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">__获取共有字段并使用__</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span>__</span><br><span class="line">hello</span><br><span class="line"><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">__获取私有字段并使用__</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span>__</span><br><span class="line">wang</span><br></pre></td></tr></table></figure><h3 id="获取类中的方法"><a href="#获取类中的方法" class="headerlink" title="获取类中的方法"></a>获取类中的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Class c = Class.forName(<span class="string">"反射.People"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"______________________获取public修饰的方法_____________________________"</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Method[] methods= c.getMethods();</span><br><span class="line">                    <span class="keyword">for</span> (Method method : methods)&#123;</span><br><span class="line">                        System.out.println(method);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">                System.out.println(<span class="string">"______________________获取所有的方法_____________________________"</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Method[] methods= c.getDeclaredMethods();</span><br><span class="line">                    <span class="keyword">for</span> (Method method : methods)&#123;</span><br><span class="line">                        System.out.println(method);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">                System.out.println(<span class="string">"______________________获取特定方法(带参数)并使用_____________________________"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Method method = c.getMethod(<span class="string">"method"</span>, String.class);</span><br><span class="line">                    System.out.println(method);</span><br><span class="line">        </span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                System.out.println(<span class="string">"______________________获取特定方法(不带参数)并使用_____________________________"</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Method method = c.getDeclaredMethod(<span class="string">"method1"</span>);</span><br><span class="line">                    System.out.println(method);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Method method = c.getDeclaredMethod(<span class="string">"method2"</span>, String.class);</span><br><span class="line">                    <span class="comment">// 获取构造方法，实例化一个对象</span></span><br><span class="line">                    Constructor constructor = c.getConstructor();</span><br><span class="line">                    Object obj = constructor.newInstance();</span><br><span class="line">        </span><br><span class="line">                    <span class="comment">// 给方法传值 调用</span></span><br><span class="line">                    Object invoke = method.invoke(obj,<span class="string">"hello"</span>);</span><br><span class="line">        </span><br><span class="line">                    <span class="comment">// 调用</span></span><br><span class="line">                    System.out.println(invoke);</span><br><span class="line">        </span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">______________________获取public修饰的方法_____________________________</span><br><span class="line">public java<span class="selector-class">.lang</span><span class="selector-class">.String</span> 反射<span class="selector-class">.People</span><span class="selector-class">.getName</span>()</span><br><span class="line">public void 反射<span class="selector-class">.People</span><span class="selector-class">.setName</span>(java<span class="selector-class">.lang</span><span class="selector-class">.String</span>)</span><br><span class="line">public void 反射<span class="selector-class">.People</span><span class="selector-class">.method</span>(java<span class="selector-class">.lang</span><span class="selector-class">.String</span>)</span><br><span class="line">public int 反射<span class="selector-class">.People</span><span class="selector-class">.getAge</span>()</span><br><span class="line">public java<span class="selector-class">.lang</span><span class="selector-class">.String</span> 反射<span class="selector-class">.People</span><span class="selector-class">.geteName</span>()</span><br><span class="line">public void 反射<span class="selector-class">.People</span><span class="selector-class">.setAge</span>(int)</span><br><span class="line">public final void java<span class="selector-class">.lang</span><span class="selector-class">.Object</span><span class="selector-class">.wait</span>() throws java<span class="selector-class">.lang</span><span class="selector-class">.InterruptedException</span></span><br><span class="line">public final void java<span class="selector-class">.lang</span><span class="selector-class">.Object</span><span class="selector-class">.wait</span>(long,int) throws java<span class="selector-class">.lang</span><span class="selector-class">.InterruptedException</span></span><br><span class="line">public final native void java<span class="selector-class">.lang</span><span class="selector-class">.Object</span><span class="selector-class">.wait</span>(long) throws java<span class="selector-class">.lang</span><span class="selector-class">.InterruptedException</span></span><br><span class="line">public boolean java<span class="selector-class">.lang</span><span class="selector-class">.Object</span><span class="selector-class">.equals</span>(java<span class="selector-class">.lang</span><span class="selector-class">.Object</span>)</span><br><span class="line">public java<span class="selector-class">.lang</span><span class="selector-class">.String</span> java<span class="selector-class">.lang</span><span class="selector-class">.Object</span><span class="selector-class">.toString</span>()</span><br><span class="line">public native int java<span class="selector-class">.lang</span><span class="selector-class">.Object</span><span class="selector-class">.hashCode</span>()</span><br><span class="line">public final native java<span class="selector-class">.lang</span><span class="selector-class">.Class</span> java<span class="selector-class">.lang</span><span class="selector-class">.Object</span><span class="selector-class">.getClass</span>()</span><br><span class="line">public final native void java<span class="selector-class">.lang</span><span class="selector-class">.Object</span><span class="selector-class">.notify</span>()</span><br><span class="line">public final native void java<span class="selector-class">.lang</span><span class="selector-class">.Object</span><span class="selector-class">.notifyAll</span>()</span><br><span class="line">______________________获取所有的方法_____________________________</span><br><span class="line">public java<span class="selector-class">.lang</span><span class="selector-class">.String</span> 反射<span class="selector-class">.People</span><span class="selector-class">.getName</span>()</span><br><span class="line">public void 反射<span class="selector-class">.People</span><span class="selector-class">.setName</span>(java<span class="selector-class">.lang</span><span class="selector-class">.String</span>)</span><br><span class="line">public void 反射<span class="selector-class">.People</span><span class="selector-class">.method</span>(java<span class="selector-class">.lang</span><span class="selector-class">.String</span>)</span><br><span class="line">protected void 反射<span class="selector-class">.People</span><span class="selector-class">.method3</span>()</span><br><span class="line">public int 反射<span class="selector-class">.People</span><span class="selector-class">.getAge</span>()</span><br><span class="line">private void 反射<span class="selector-class">.People</span><span class="selector-class">.method1</span>()</span><br><span class="line">public java<span class="selector-class">.lang</span><span class="selector-class">.String</span> 反射<span class="selector-class">.People</span><span class="selector-class">.geteName</span>()</span><br><span class="line">public void 反射<span class="selector-class">.People</span><span class="selector-class">.setAge</span>(int)</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.String</span> 反射<span class="selector-class">.People</span><span class="selector-class">.method2</span>(java<span class="selector-class">.lang</span><span class="selector-class">.String</span>)</span><br><span class="line">______________________获取特定方法(带参数)并使用_____________________________</span><br><span class="line">public void 反射<span class="selector-class">.People</span><span class="selector-class">.method</span>(java<span class="selector-class">.lang</span><span class="selector-class">.String</span>)</span><br><span class="line">______________________获取特定方法(不带参数)并使用_____________________________</span><br><span class="line">private void 反射<span class="selector-class">.People</span><span class="selector-class">.method1</span>()</span><br><span class="line">hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/keyarea/java-base/tree/master/src/%E5%8F%8D%E5%B0%84&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;反射&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java reflect" scheme="https://blog.loong.io/tags/Java-reflect/"/>
    
  </entry>
  
  <entry>
    <title>Android中活动（Activity）中的基本用法</title>
    <link href="https://blog.loong.io/2019/05/04/activityBasic/"/>
    <id>https://blog.loong.io/2019/05/04/activityBasic/</id>
    <published>2019-05-04T12:47:38.000Z</published>
    <updated>2020-06-03T02:37:45.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="活动是什么"><a href="#活动是什么" class="headerlink" title="活动是什么"></a>活动是什么</h1><p>活动（Activity）是一种可以包含用户界面的组件，主要用于和用户进行交互。一个应用程序中可以包含零个或多个活动，但不包含任何活动的应用程序很少见。</p><h1 id="活动的基本用法"><a href="#活动的基本用法" class="headerlink" title="活动的基本用法"></a>活动的基本用法</h1><h2 id="活动的创建"><a href="#活动的创建" class="headerlink" title="活动的创建"></a>活动的创建</h2><p>项目中的任何活动都应该重写Activity中的Activity的onCreate()方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，onCreate()方法非常简单，就是调用了父类的onCreate()方法。当然这只是默认的实现，后面我们还需要在里面加入很多自己的逻辑。</p><h2 id="创建和加载布局"><a href="#创建和加载布局" class="headerlink" title="创建和加载布局"></a>创建和加载布局</h2><p>Android程序的设计讲究逻辑和视图分离，最好每一个活动都能对应一个布局，布局就是用来显示界面的内容的，因此我们来手动创建一个布局文件。</p><p>在res文件夹下创建或者打开layout文件夹，然后创建一个<code>first_layout.xml</code>的文件，在该文件中输入以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    LinearLayout:线性布局，可以视为html中的div，用于对于整个界面进行布局</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    xmlns:andorid:指定的是xml文件的命名空间，不是对布局的主要设置，但是要有</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    android:layout_width="match_parent"指的是当前的线性布局宽度占整个父元素，这里相对于</span></span><br><span class="line"><span class="comment">    当前的线性布局父元素为当前的窗体,所以宽度占满窗体</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    android:layout_height="match_parent"指的是当前的线性布局高度占整个父元素，这里相对于</span></span><br><span class="line"><span class="comment">    当前的线性布局父元素为当前的窗体,所以高度占满窗体</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">    android:orientation="vertical":指的是当前控件为垂直摆放</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    android:orientation 值:horizontal 元素水平摆放  |  vertical 元素垂直摆放</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        这里添加了一个Button元素，并在Button元素的内部增加了几个属性：</span></span><br><span class="line"><span class="comment">        android:id 这个是为当前元素定义了一个唯一标识符，之后可以在代码中对这个元素进行操作。</span></span><br><span class="line"><span class="comment">        @id+id/button_1 定义了一个id</span></span><br><span class="line"><span class="comment">        android:layout_width="match_parent" 表示当前元素的宽度和父元素一样宽。 </span></span><br><span class="line"><span class="comment">        android:layout_height="wrap_content" 表示当前元素的高度只能刚好包含里面的内容就行</span></span><br><span class="line"><span class="comment">        android:text="按钮" 指定了元素中显示的文字内容</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button_1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"按钮"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来要做的就是在活动中加载这个布局。</p><p>在Activity中的onCreate()方法中加入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="comment">// 这里调用了setContentView()方法来给当前的活动加载了一个布局，而在该方法中我们一般会传入一个布局文件的id，项目添加的任何资源都会在R文件中生成一个相应的资源id。只要调用`R.layout.first_layout`就会得到这个布局文件。</span></span><br><span class="line">    setContentView(R.layout.first_layout);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在AndroidMainifest文件中注册"><a href="#在AndroidMainifest文件中注册" class="headerlink" title="在AndroidMainifest文件中注册"></a>在AndroidMainifest文件中注册</h2><p>所有的活动都要在<code>AndroidMainifest.xml</code>中进行注册才能生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.example.myapplication"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          android:name=".FirstActivity" 用来指定具体注册的是哪一个活动</span></span><br><span class="line"><span class="comment">          这里的".FirstActivity"是"com.example.myapplication.FirstActivity"的缩写</span></span><br><span class="line"><span class="comment">          </span></span><br><span class="line"><span class="comment">          android:label 指定活动中标题栏的内容，标题栏是显示在活动最顶部的。</span></span><br><span class="line"><span class="comment">          需要注意的是，给主活动指定的label不仅会成为标题栏中的内容，还会成为启动器（Launcher）中应用程序显示的名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".FirstActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"MyApplication"</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">          <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            配置主活动    </span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;活动是什么&quot;&gt;&lt;a href=&quot;#活动是什么&quot; class=&quot;headerlink&quot; title=&quot;活动是什么&quot;&gt;&lt;/a&gt;活动是什么&lt;/h1&gt;&lt;p&gt;活动（Activity）是一种可以包含用户界面的组件，主要用于和用户进行交互。一个应用程序中可以包含零个或多个活动，
      
    
    </summary>
    
      <category term="Android" scheme="https://blog.loong.io/categories/Android/"/>
    
    
      <category term="Java Android" scheme="https://blog.loong.io/tags/Java-Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的日志工具Log</title>
    <link href="https://blog.loong.io/2019/05/02/androidLog/"/>
    <id>https://blog.loong.io/2019/05/02/androidLog/</id>
    <published>2019-05-02T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.340Z</updated>
    
    <content type="html"><![CDATA[<p>这里说一下Android中的日志工具的使用方法，这对以后的Android开发会有很大的帮助。</p><h1 id="使用Android的日志工具Log"><a href="#使用Android的日志工具Log" class="headerlink" title="使用Android的日志工具Log"></a>使用Android的日志工具Log</h1><p>Android中的日志工具类是Log（android.util.Log）,这个类中提供了如下5个方法来供我们打印日志。</p><ul><li>Log.v():用于打印那些最为琐碎的，意义最小的日志信息。对应级别verbose，是android日志类面级别最低的一种。</li><li>Log.d():用于打印一些调试信息，这些信息对你调试程序和分析问题应该帮助的。对应级别debug，比verbose高一级。</li><li>Log.i(): 用于打印一些比较重要的数据，这些数据应该是你非常想看到的，可以帮你分析用户行为数据。对应级别info，比debug高一级。</li><li>Log.w(): 用于打印一些警告信息。提示程序在这个地方可能会有潜在风险，最好去修复这些出现警告的地方。对应级别warn，比info高一级。</li><li>Log.e(): 用于打印程序中的错误信息。比如程序进入到了catch语句当中。当有错误信息打印出来的时候，一般代表你的程序出现了严重问题了，必须尽快修复。对应级别error，比wran高一级。</li></ul><p>实例：打开Activity，在onCreate()方法中添加一行打印日志的语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle saveInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.hello_world_layout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法传入两个参数：</span></span><br><span class="line">    <span class="comment">// 第一个参数是tag，一般传入当前的类名，主要用于对打印信息进行过滤；</span></span><br><span class="line">    <span class="comment">// 第二个参数是msg，即想要打印的具体的内容</span></span><br><span class="line">    Log.d(<span class="string">"HelloWorldActivity"</span>, <span class="string">"onCreate execute"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="为什么使用Log而不使用System-out"><a href="#为什么使用Log而不使用System-out" class="headerlink" title="为什么使用Log而不使用System.out"></a>为什么使用Log而不使用System.out</h1><p><code>System.out.println();</code>：该方法缺点很多，日志打印不可控制、打印时间无法确定、不能添加过滤器、日志没有级别区分……</p><p>Log把上面的所有缺点全部改好了吗？虽然谈不上全部，但是Log已经做的相当不错了。</p><p>在Android Studio当中，比如你想打印一条debug级别的日志，那么只需要输入<code>logd</code>,然后按下Tab键，结汇帮你自动补全一条完整的打印语句。</p><ul><li>logd：debug级别的打印日志；</li><li>logi: info级别的打印日志；</li><li>logw：warn级别的打印日志；</li><li>loge： error级别的打印日志。</li></ul><p>生成的完整的打印日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.d(TAG, <span class="string">"onCreate: "</span>);</span><br></pre></td></tr></table></figure><blockquote><p>由于Log所有的打印方法都要求传入一个tag参数，每次输入显然太过麻烦。<br>这里有一个小技巧，我们在onCreate()方法的外面输入<code>logt</code>,然后按下Tab键，这时就会以当前的类名作为值自动生成一个TAG常量，如下所示：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里说一下Android中的日志工具的使用方法，这对以后的Android开发会有很大的帮助。&lt;/p&gt;
&lt;h1 id=&quot;使用Android的日志工具Log&quot;&gt;&lt;a href=&quot;#使用Android的日志工具Log&quot; class=&quot;headerlink&quot; title=&quot;使用An
      
    
    </summary>
    
      <category term="Android" scheme="https://blog.loong.io/categories/Android/"/>
    
    
      <category term="Java Android" scheme="https://blog.loong.io/tags/Java-Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 简介</title>
    <link href="https://blog.loong.io/2019/05/01/android/"/>
    <id>https://blog.loong.io/2019/05/01/android/</id>
    <published>2019-05-01T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.339Z</updated>
    
    <content type="html"><![CDATA[<p>Android系统是目前世界上市场占有率最高的移动操作系统，不管你在哪里，都可以看到Android手机几乎无处不在、</p><h1 id="Android系统架构"><a href="#Android系统架构" class="headerlink" title="Android系统架构"></a>Android系统架构</h1><blockquote><p>为了更好的理解Android系统是怎么工作的，我们先来看看它的系统架构。Android大致可以分为四层架构：Linux内核层、系统运行库层、应用框架层、应用层。</p></blockquote><h2 id="Linux系统架构"><a href="#Linux系统架构" class="headerlink" title="Linux系统架构"></a>Linux系统架构</h2><p>Android系统是基于Linux内核的，这一层为Android设备的各种硬件提供了底层的驱动，如显示驱动、音频驱动、照相机驱动、蓝牙驱动、Wi-Fi驱动、电源管理等。</p><h2 id="系统运行库层"><a href="#系统运行库层" class="headerlink" title="系统运行库层"></a>系统运行库层</h2><p>这一层通过一些C/C++库来为Android系统提供了主要的特性支持。如SQLite库提供了数据库的支持，OpenGL|ES库提供了3D绘图的支持，Webkit库提供了浏览器内核的支持等。</p><p>同样在这一层还有Android运行时库，它主要提供了一些核心库，能够允许开发者使用Java语言来编写Android应用。另外，Android运行时库中还包含了Dalvik虚拟机（5.0之后改为ART运行环境），它使得每一个Android应用都能运行在独立的进程之中，并且拥有一个自己的Dalvik虚拟机实例。相较于Java虚拟机，Dalvik是专门为移动设备定制的，它针对手机内存、CPU性能有限等情况作了优化处理。</p><h2 id="应用框架层"><a href="#应用框架层" class="headerlink" title="应用框架层"></a>应用框架层</h2><p>这一层主要提供了构建应用程序时可能用到的各种API，Android自带的一些核心应用就是使用这些API完成的，开发者也可以使用这些API来构建自己的应用程序。</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>所有安装在手机上的应用程序都是属于这一层，比如系统自带的联系人、短信等程序，或者你自己开发的程序</p><h1 id="Android已发布的版本"><a href="#Android已发布的版本" class="headerlink" title="Android已发布的版本"></a>Android已发布的版本</h1><blockquote><p>目前4.0以上的系统已经占据超过98%的Android市场份额，因此我们开发的应用程序可以只面向4.0以上的系统，2.x的系统可以不去兼容。</p></blockquote><blockquote><p>关于目前主要的Android系统版本及其详细信息，你可以在<a href="http://developer.android.google.cn/about/dashboards" target="_blank" rel="noopener">这里</a>得到。当然需要科学上网。</p></blockquote><h1 id="Android应用开发特色"><a href="#Android应用开发特色" class="headerlink" title="Android应用开发特色"></a>Android应用开发特色</h1><h2 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h2><p>Android系统四大组件分别是活动（Activity）、服务（Service）、广播接收器（Boardcast Receiver）、内容提供器（Content Provider）。</p><ul><li>活动（Activity）：是所有Android应用程序的门面，凡是在应用中看到的东西，都是放在活动中的。</li><li>服务（Service）：服务比较低调，你无法看到他，但它会一直在后台默默地运行，即使用户退出了应用，服务仍然是可以继续运行的。</li><li>广播接收器（Boardcast Receiver）：广播接收器允许你的应用接收来自于各处的广播消息，比如电话、短信等，当然你的应用同样也可以向外发出广播消息。</li><li>内容提供器（Content Provider）：为应用程序之间共享数据提供了可能，比如你想要读取系统电话薄中的联系人，就需要通过内容提供器来实现。</li></ul><h2 id="丰富的系统控件"><a href="#丰富的系统控件" class="headerlink" title="丰富的系统控件"></a>丰富的系统控件</h2><p>Android系统为开发者提供了丰富的系统控件，使得我们可以轻松的编写出漂亮的界面。当然你可以定义属于自己的控件。</p><h2 id="SQLite数据库"><a href="#SQLite数据库" class="headerlink" title="SQLite数据库"></a>SQLite数据库</h2><p>Android系统自带了这种轻量级、运算速度极快的嵌入式关系型数据库、它不仅支持标准的SQL语法，还可以通过Android封装好的API进行操作，让存储和读取数据变得非常方便。</p><h2 id="强大的多媒体"><a href="#强大的多媒体" class="headerlink" title="强大的多媒体"></a>强大的多媒体</h2><p>Android系统还提供了丰富的多媒体服务，如音乐、视频等等，这一切你都可以在程序中通过代码进行控制，让你的应用变得更加丰富多彩。</p><h2 id="地理位置定位"><a href="#地理位置定位" class="headerlink" title="地理位置定位"></a>地理位置定位</h2><p>移动设备和PC相比，地理位置定位功能应该可以算是很大的一个亮点。现在的Android手机都内置GPS，走到哪都可以定位到字节的位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android系统是目前世界上市场占有率最高的移动操作系统，不管你在哪里，都可以看到Android手机几乎无处不在、&lt;/p&gt;
&lt;h1 id=&quot;Android系统架构&quot;&gt;&lt;a href=&quot;#Android系统架构&quot; class=&quot;headerlink&quot; title=&quot;Andr
      
    
    </summary>
    
      <category term="Android" scheme="https://blog.loong.io/categories/Android/"/>
    
    
      <category term="Java Android" scheme="https://blog.loong.io/tags/Java-Android/"/>
    
  </entry>
  
  <entry>
    <title>Java 异常的捕获与处理</title>
    <link href="https://blog.loong.io/2019/04/29/Exception/"/>
    <id>https://blog.loong.io/2019/04/29/Exception/</id>
    <published>2019-04-29T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.338Z</updated>
    
    <content type="html"><![CDATA[<p>几乎所有的代码里面都有可能产生异常，所以为了保证程序出现异常之后可以正常执行完毕，就需要进行处理。</p><h1 id="异常的影响"><a href="#异常的影响" class="headerlink" title="异常的影响"></a>异常的影响</h1><p>异常是导致程序中断执行的一种指令流。但是程序之中如果出现异常并且没有合理处理的话，就会导致程序终止执行。</p><p>范例：观察没有异常产生的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoError</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[1] 数学计算前"</span>);</span><br><span class="line">        System.out.println(<span class="string">"[2] 数学计算中：result = "</span> + (<span class="number">10</span> / <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"[3] 数学计算后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时没有任何异常产生，那么程序可以正常的执行完毕。</p><p>范例：观察产生异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasError</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[1] 数学计算前"</span>);</span><br><span class="line">        System.out.println(<span class="string">"[2] 数学计算中：result = "</span> + (<span class="number">10</span> / <span class="number">0</span>)); <span class="comment">// 错误 分母不能为0</span></span><br><span class="line">        System.out.println(<span class="string">"[3] 数学计算后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1] 数学计算前</span><br><span class="line">Exception in thread "main" java.lang.ArithmeticException: / by zero</span><br><span class="line">at 异常与处理.HasError.main(HasError.java:6)</span><br></pre></td></tr></table></figure><blockquote><p>程序之中产生了异常，但是在异常语句之前的代码依然可以正常执行完毕，而异常产生之后程序将直接进行了结束。</p></blockquote><blockquote><p>为了保证程序出现异常后还可以继续向下执行，就需要进行异常处理。</p></blockquote><h1 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h1><blockquote><p>为了保证程序出现错误之后依然能够正常的执行，那么就可以使用异常的处理操作，异常处理的代码格式如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    有可能出现异常的语句;</span><br><span class="line">&#125;[<span class="keyword">catch</span> (异常类 对象)&#123;</span><br><span class="line">    异常的处理语句;</span><br><span class="line">&#125;<span class="keyword">catch</span> (异常类 对象)&#123;</span><br><span class="line">    异常的处理语句;</span><br><span class="line">&#125; ......][</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    异常的统一出口;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>对于以上的三个关键字，可以出现的组合：<code>try...catch</code>、<code>try...finally</code>、<code>try...catch...finally</code>。</p></blockquote><p>范例：对异常进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[1] 数学计算前"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[2] 数学计算中：result = "</span> + (<span class="number">10</span> / <span class="number">0</span>)); <span class="comment">// 错误 分母不能为0</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"[catch] 异常已经被处理！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"[3] 数学计算后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>发现出现了异常之后，整个的程序由于存在有异常的处理机制，那么依然可以正常的执行完毕。</p></blockquote><blockquote><p>以上的代码虽然进行了异常的处理，但是这里面会存在有一个严重的问题，也就是说你现在根本就不知道你的程序产生了什么样的异常，所以为了明确的取得异常的信息，可以直接输出异常类对象，或者直接调用所有异常类中提供的<code>printStackTrace()</code>,进行完整异常信息的输出。</p></blockquote><p>范例：取得异常的完整信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[1] 数学计算前"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[2] 数学计算中：result = "</span> + (<span class="number">10</span> / <span class="number">0</span>)); <span class="comment">// 错误 分母不能为0</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"[3] 数学计算后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在进行异常信息处理的时候还可以使用<code>try...catch...finally</code>来进行处理。</p></blockquote><p>范例：观察<code>try...catch...finally</code>操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[1] 数学计算前"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[2] 数学计算中：result = "</span> + (<span class="number">10</span> / <span class="number">0</span>)); <span class="comment">// 错误 分母不能为0</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[finally] 不管是否有异常都一定执行此语句。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"[3] 数学计算后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不管此时是否产生有异常，最终都要执行finally程序代码，所以finally会作为程序的统一出口。<br>以上的程序是直接固定好了两个数字进行除法运算，现在希望通过初始化参数来进行除法计算。</p></blockquote><p>范例：接收参数进行计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[1] 数学计算前"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            System.out.println(<span class="string">"[2] 数学计算中：result = "</span> + (x / y));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            <span class="comment">// System.out.println("[catch] 异常已经被处理！");</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[finally] 不管是否有异常都一定执行此语句。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"[3] 数学计算后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么下面来执行以上的程序，正确的执行：<code>java ExceptionHandle 10 2</code><br>但是这个时候有可能会存在有如下的问题：</p><ul><li>用户执行的时候没有输入参数：<code>java ExceptionHandle</code>：<code>ArrayIndexOutOfBoundsException</code></li><li>用户执行的时候没有输入参数：<code>java ExceptionHandle a b</code>：<code>NumberFormatException</code></li><li>被除数为0：<code>java ExceptionHandle 10 0</code></li></ul></blockquote><blockquote><p>通过以上代码可以发现，原来在进行catch捕获异常的时候，如果没有捕获指定的异常，那么程序依然无法进行处理，所以现在最直白的解决方案就是使用多个catch:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[1] 数学计算前"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            System.out.println(<span class="string">"[2] 数学计算中：result = "</span> + (x / y));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            <span class="comment">// System.out.println("[catch] 异常已经被处理！");</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[finally] 不管是否有异常都一定执行此语句。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"[3] 数学计算后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题是如果真这么写，那么测试，不使用异常处理也一样，因为完全可以使用if…else判断。如果想要更好的处理异常，那么你必须清除异常的处理流程。</p><h1 id="throw关键字"><a href="#throw关键字" class="headerlink" title="throw关键字"></a>throw关键字</h1><p>throw是直接编写在语句之中的，表示人为进行异常的抛出。例如，在之前使用过了一个<code>10/0</code>这样的语言，而这样的语句执行之后所产生的数学异常是由JVM负责进行异常类的对象实例化的。而现在如果不希望异常类对象由我们的系统产生，希望由用户来控制异常类实例化对象的产生，就可以使用<code>throw</code>来完成。</p><p>范例：使用throw来产生异常类实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"一个异常"</span>); <span class="comment">// 抛出一个异常</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一般而言throw和break、continue、return一样，都需要结合if判断来执行。</p></blockquote><p>面试题：请解释throw和throws的区别？</p><ul><li>throw用于方法内部主要表示进行手工的异常抛出。</li><li>throws主要在方法声明上使用，明确的告诉用户本方法可能产生的异常，同时该方法可能不处理此异常。</li></ul><h1 id="异常处理模型"><a href="#异常处理模型" class="headerlink" title="异常处理模型"></a>异常处理模型</h1><p><strong>综合案例：异常处理标准格式</strong></p><p>现在为止异常中的所有核心概念都掌握了：try、catch、finally、throw、throws、</p><p>现在要求编写一个方法–进行除法操作，但是对于此方法的要求如下：</p><ul><li>在进行除法计算操作之前首先要打印一行语句；</li><li>在进行除法计算的过程中出现错误，则应该将异常返回给调用处；</li><li>不管追中是否有错误的产生，都要求打印一行计算结束的信息；</li></ul><p>范例：观察程序的实现 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMath</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果该方法不进行异常的处理，一定要使用throw进行抛出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"除法计算前"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            result = x / y; <span class="comment">// 此处有异常，后面不进行处理</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e; <span class="comment">// 将错误抛出去</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"除法计算后"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(MyMath.div(<span class="number">10</span>, <span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当然，对于以上的格式还可以进行进一步简化：直接使用<code>try...finally</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMath</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果该方法不进行异常的处理，一定要使用throw进行抛出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"除法计算前"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            result = x / y; <span class="comment">// 此处有异常，后面不进行处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"除法计算后"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(MyMath.div(<span class="number">10</span>, <span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RuntimeException类"><a href="#RuntimeException类" class="headerlink" title="RuntimeException类"></a>RuntimeException类</h1><p>首先看一段简单的程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">'100'</span>;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">        System.out.println(num * <span class="number">2</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来观察一下Integer类中关于parseInt()方法的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function">                   <span class="keyword">throws</span> NumberFormatException</span></span><br></pre></td></tr></table></figure><p>这个方法上已经明确的跑出了一个异常，但是在进行调用的时候发现，即使没有进行异常处理，也可以正常执行，这个就属于<code>RuntimeException</code>的范畴了，来观察<code>NumberFormException</code>的继承结构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.Object</span></span><br><span class="line">  java<span class="selector-class">.lang</span><span class="selector-class">.Throwable</span></span><br><span class="line">      java<span class="selector-class">.lang</span><span class="selector-class">.Exception</span></span><br><span class="line">          java<span class="selector-class">.lang</span><span class="selector-class">.RuntimeException</span></span><br><span class="line">              java<span class="selector-class">.lang</span><span class="selector-class">.IllegalArgumentException</span></span><br><span class="line">                  java<span class="selector-class">.lang</span><span class="selector-class">.NumberFormatException</span></span><br></pre></td></tr></table></figure><p>很多的代码上都可能会出现异常，例如：数学计算：‘10/0’都可能会产生异常，那么如果所有有可能产生异常的地方都进行强制性的异常处理，这个代码就太复杂了。所以在进行异常设计的时候考虑到一些异常可能是一些简单的问题，所以将这类的异常统一称为<code>RuntimeException</code>，也就是说使用<code>RuntimeException</code>定义的异常可以不需要强制性进行异常处理。</p><p>面试题：请解释Exception与RuntimeException的区别？请列举出几个常见的RuntimeException？</p><ul><li>Exception是RuntimeException的父类，使用Exception定义的异常都要求必须使用异常处理；</li><li>RuntimeException可以由用户选择性的来进行异常处理；</li><li>常见的<code>RuntimeException</code>：<code>ClassCastException</code>、<code>IndexOutOfBoundsException</code>、<code>NullPointerException</code>、<code>ArithmeticException</code>；</li></ul><h1 id="断言：assert"><a href="#断言：assert" class="headerlink" title="断言：assert"></a>断言：assert</h1><p>断言是从jdk1.4引入的一个概念。所谓断言的概念指的是当我们的程序执行到某些语句之后其某数据的内容一定是约定的内容。</p><p>范例：观察断言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssertDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 中间经过很多步骤，预计num的值变为300</span></span><br><span class="line">        <span class="keyword">assert</span> num == <span class="number">100</span> : <span class="string">"错误：num的值不为100"</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果要想让断言起作用，则必须使用一个<code>-ea</code>的参数：<code>java -ea AssertDemo</code>；</p></blockquote><p>其实断言的意义并不是很大，java之所以引入主要是为了与C++相同。</p><h1 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h1><p>在Java里面实际上针对可能出现的公共程序问题都会提供有相应的异常信息，但是很多时候这些异常信息往往不够我们去处理的；现在在进行加法处理的时候，如果发现两个内容的相加结果为30，那么就应该抛出一个<code>AddException</code>的异常。但是这样的异常java不会提供的，所以就必须定义一个属于自己的异常类。</p><p>如果想要定义属于自己的异常类可以继承两种父类：<code>Exception</code>、<code>RuntimeException</code>；</p><p>范例：实现自定义异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 异常与处理;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">if</span>((x+y) == <span class="number">30</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AddException(<span class="string">"错误的相加操作"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般你如果做一些项目的系统设计的时候，会用到自定义异常类。</p><h1 id="需要注意的"><a href="#需要注意的" class="headerlink" title="需要注意的"></a>需要注意的</h1><ul><li>异常的处理流程；</li><li>异常的处理格式；</li><li>异常处理的模型。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;几乎所有的代码里面都有可能产生异常，所以为了保证程序出现异常之后可以正常执行完毕，就需要进行处理。&lt;/p&gt;
&lt;h1 id=&quot;异常的影响&quot;&gt;&lt;a href=&quot;#异常的影响&quot; class=&quot;headerlink&quot; title=&quot;异常的影响&quot;&gt;&lt;/a&gt;异常的影响&lt;/h1&gt;&lt;p&gt;异
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的访问控制权限</title>
    <link href="https://blog.loong.io/2019/04/25/control/"/>
    <id>https://blog.loong.io/2019/04/25/control/</id>
    <published>2019-04-25T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.319Z</updated>
    
    <content type="html"><![CDATA[<p>在之前学到的<code>private</code>就属于一种访问控制权限，而这种访问控制权限只是封装的一部分，在java中提供有四种访问控制权限：<code>private</code> <code>default</code> <code>protected</code> <code>public</code>，而这四种访问控制权限定义如下：</p><table><thead><tr><th>No.</th><th>范围</th><th>private</th><th>default</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>1</td><td>同一包中的同一类</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>2</td><td>同一包中的不同类</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>3</td><td>不同包中的子类</td><td>❌</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>4</td><td>不同包中的非子类</td><td>❌</td><td>❌</td><td>❌</td><td>✅</td></tr></tbody></table><blockquote><p>实际上public永远都可以访问，但是对于封装而言主要是由三个权限：<code>private</code>、<code>default</code>、<code>protected</code>。</p></blockquote><p>范例：观察protected访问权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 访问控制权限.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此时出现的是一个protected访问控制权限</span></span><br><span class="line">    <span class="keyword">protected</span> String str = <span class="string">"keyarea"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：定义另外一个包进行该类的继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 访问控制权限.package2;  <span class="comment">// 不同包</span></span><br><span class="line"><span class="keyword">import</span> 访问控制权限.package1.Info;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同包的子类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubInfo</span> <span class="keyword">extends</span> <span class="title">Info</span></span>&#123; <span class="comment">// Info的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">priint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.str); <span class="comment">// 在父类中属于protected权限</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：定义一个测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 访问控制权限.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> 访问控制权限.package2.SubInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SubInfo subInfo = <span class="keyword">new</span> SubInfo();</span><br><span class="line">        subInfo.priint();  <span class="comment">// keyarea</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在SubInfo虽然与Info属于不同的开发包，但是毕竟是其子类，所以可以访问，但是反过来，要想在TestInfo中直接使用Info类（非子类）则就会出现错误。</p><p>范例：错误的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 访问控制权限.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> 访问控制权限.package1.Info;</span><br><span class="line"><span class="keyword">import</span> 访问控制权限.package2.SubInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//        SubInfo subInfo = new SubInfo();</span></span><br><span class="line"><span class="comment">//        subInfo.priint();  // keyarea</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Info().str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>str</code>是<code>protected</code>权限，所以此处一定无法访问。</p><blockquote><p>结论：关于权限的选择</p><ul><li>对于封装的描述90%使用的都是<code>private</code>，只有10%的情况下会使用<code>protected</code>，这两个都叫封装；</li><li>属性都使用<code>private</code>，方法都使用<code>public</code>。</li></ul></blockquote><blockquote><p>封装性指的就是<code>private</code>、<code>default</code>、<code>protected</code>三个权限的使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在之前学到的&lt;code&gt;private&lt;/code&gt;就属于一种访问控制权限，而这种访问控制权限只是封装的一部分，在java中提供有四种访问控制权限：&lt;code&gt;private&lt;/code&gt; &lt;code&gt;default&lt;/code&gt; &lt;code&gt;protected&lt;/code
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的jar命令</title>
    <link href="https://blog.loong.io/2019/04/25/jar/"/>
    <id>https://blog.loong.io/2019/04/25/jar/</id>
    <published>2019-04-25T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.334Z</updated>
    
    <content type="html"><![CDATA[<p>现在的电脑使用中往往会将许多相关联的文件为了存储方便以及节约空间都会将其放在压缩文件里面。</p><p>实际上jar也是一种压缩文件，只不过里面保存的都是<code>*.class</code>文件,也就是说现在要实现某一个功能模块，可能有几百个类，那么最终交付给用户使用的时候为了方便管理，就会将这些文件形成一个压缩包提供给用户。</p><p>在jdk之中提供有实现jar文件操作的命令，只需要输入一个jar即可。对于这个jar命令有如下几个常用参数：</p><ul><li><code>c</code>：创建一个新的归档文件；</li><li><code>f</code>：指定生成的jar文件的名称；</li><li><code>v</code>：详细显示出所有的压缩处理过程；</li></ul><p>范例：定义一个Message的程序类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jar命令;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello, my name is key!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后需要将其进行编译而后变为jar文件使用：</p><ul><li>打包进行程序的编译：<code>javac -d . *.java</code>;</li><li>将生成的程序类大包为jar文件：<code>jar -cvf jar命令.jar jar命令</code>；</li><li>此文件可以通过winrar工具打开，而且打开之后会发现有一个META-INF的目录；</li><li>此时的jar文件就包含了所需要使用到的程序类；</li></ul><blockquote><p>但是要想使用这个jar文件，并不是说将其放到程序的目录之中就可以的，还需要为其配置CLASSPATH，设置你的*.jar文件的加载路径：<br><code>SET CLASSPATH=.;/Users/kai/Documents/java/java-base/src/jar命令/jar命令.jar</code></p></blockquote><p>范例：编写一个测试程序，调用<code>jar命令.jar</code>包中提供的<code>Message</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jar命令;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        jar命令.Message message = <span class="keyword">new</span> jar命令.Message();</span><br><span class="line">        message.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后的开发会使用大量的jar文件。</p><blockquote><p>以后的开发之中会使用大量的第三方程序包，这些开发包都必须在CLASSPATH中进行配置后才可以使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在的电脑使用中往往会将许多相关联的文件为了存储方便以及节约空间都会将其放在压缩文件里面。&lt;/p&gt;
&lt;p&gt;实际上jar也是一种压缩文件，只不过里面保存的都是&lt;code&gt;*.class&lt;/code&gt;文件,也就是说现在要实现某一个功能模块，可能有几百个类，那么最终交付给用户使用
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的package</title>
    <link href="https://blog.loong.io/2019/04/25/package/"/>
    <id>https://blog.loong.io/2019/04/25/package/</id>
    <published>2019-04-25T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.311Z</updated>
    
    <content type="html"><![CDATA[<p>包的本质实际上就属于一个文件夹。在任何的一个项目里面你很难避免重复的类名称出现。而且如果所有的<code>*.class</code>文件都存放在一个目录之中，那么就有可能出现覆盖的情况。而这样就会造成项目的整体的开发困难，所以为了解决这样的冲突，所有的java的程序都应该保存在各自的目录里面，而这个目录就称为包。</p><h2 id="包的定义"><a href="#包的定义" class="headerlink" title="包的定义"></a>包的定义</h2><p>如果要想进行包的定义，只需要在<code>*.java</code>源文件的第一行编写：<code>package 包名称;</code>的语句即可。</p><p>范例：观察包的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包的定义及使用;  <span class="comment">// '.'表示子目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!!"</span>);   </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一旦程序出现有包名称了，那么<code>*.class</code>文件在存放的时候就必须保存在相应的目录之中，不过这种手工创建目录的形式非常的麻烦，所有在JDK进行java程序编译的时候可以追加一些配置参数：</p></blockquote><blockquote><blockquote><p>打包编译：<code>javac -d . 类.java</code>;</p><ul><li><code>-d</code>：表示生成目录，根据package的定义生成;</li><li><code>.</code>：表示在当前所在目录中生成目录;<br>按照此种方式编译完成之后会发现自动的会在当前目录中生成相应的文件夹以及保存各自的<code>*.class</code>文件。</li></ul></blockquote></blockquote><blockquote><p>一旦我们的程序类上出现了包名称之后，那么在进行执行的时候就要带上包名称，而不是进入到包里面执行，也就是说完成的类名称就是<code>包.类</code>。</p></blockquote><blockquote><p>在以后进行项目开发的过程之中，所有的<code>*.java</code>文件都一定要使用<code>package</code>定义包。</p></blockquote><h2 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h2><p>开发之中一旦使用了包的定义之后，实际上就相当于把一个大的项目分别按照一定的要求保存在了不同的包里面（文件夹里面），但是这些程序类彼此之间一定会发生互相调用的情况，所以这种时候就需要采用导入包的的处理方式。</p><p>范例：编写一个简单的程序类，本类将被其他程序所导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包的定义及使用.message;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"message"</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：希望通过不同的包导入以上的程序类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包的定义及使用.test;</span><br><span class="line"><span class="keyword">import</span> 包的定义及使用.message.Message; <span class="comment">// 导入程序类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.print();   </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果从正常的角度来讲，<code>MyTest</code>类去引用了<code>Message</code>类，那么应该首先编译的就是<code>Message</code>类，而后才是<code>MyTest</code>类；但是如果都按照这样的顺序进行编译，编译会消耗很长时间。所以最好的做法是让java自己去匹配先后顺序，那么最常用的打包编译：<code>javac -d . *.java</code>;</p></blockquote><blockquote><p>注意：类使用<code>class</code>和<code>public class</code>的区别？</p><ul><li><code>public class</code>：文件名称必须与类名称保持一致，如果希望一个类被其他包所访问，则必须定义为<code>public class</code>；</li><li><code>class</code>：文件名称可以与类名称不一致，在一个<code>*.java</code>中可以定义多个class，但是这个类不允许被其他包所访问。</li></ul></blockquote><p>另外需要注意一点，在上面的程序之中导入的时候采用的是<code>import 包.类</code>这样只会导入一个类，如果说现在要想导入一个包中的多个类，建议可以直接采用通配符<code>*</code>完成；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.fangcun.*; <span class="comment">// 导入程序类</span></span><br></pre></td></tr></table></figure><blockquote><p>这种<code>*</code>并不意味着要将该包中的全部类都进行导入，而是根据你的需求进行导入。</p></blockquote><blockquote><p>但是在很多开发情况中也有可能出现不同包但是相同类的情况。在同一个程序类中需要同时导入这两个包，那么这个时候如果你还是直接使用Message类，就会造成一个编译上的歧义。那么此时最好的做法是明确的导入所需要的<code>包.类</code>;或者直接在使用的类上采用全名的方式定义。</p></blockquote><blockquote><p>所以以后的开发之中这类情况一定会出现，如果出现了，最好使用全名。</p></blockquote><h2 id="系统常用包（了解）"><a href="#系统常用包（了解）" class="headerlink" title="系统常用包（了解）"></a>系统常用包（了解）</h2><p>当包的学习完成之后就可以来看一下有哪些系统常用的开发包：</p><ul><li><code>java.lang</code>：系统常用的基础类，例如：String、Object，此包从JDK1.1开始自动导入；</li><li><code>java.lang..reflect</code>: java的反射编程包；</li><li><code>java.math</code>：数学的支持包，但是支持有限；</li><li><code>java.net</code>：进行网络编程的开发包；</li><li><code>java.sql</code>：进行数据库开发的支持包;</li><li><code>java.util</code>：是java提供的工具程序包；</li><li><code>java.io</code>：IO编程的开发包；</li><li><code>java.applet</code>：进行applet程序的开发包,Applet程序是从1995年开始的，java最主要的技术，不过现在几乎所有的浏览器都不支持了；</li><li><code>java.awt</code> 、<code>javax.swing</code>：UI开发包，主要进行UI界面的编写。</li><li><ul><li>java2（最主要的支持就是javax.swing包）；</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;包的本质实际上就属于一个文件夹。在任何的一个项目里面你很难避免重复的类名称出现。而且如果所有的&lt;code&gt;*.class&lt;/code&gt;文件都存放在一个目录之中，那么就有可能出现覆盖的情况。而这样就会造成项目的整体的开发困难，所以为了解决这样的冲突，所有的java的程序都应该
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式-单例设计模式</title>
    <link href="https://blog.loong.io/2019/04/25/singleton/"/>
    <id>https://blog.loong.io/2019/04/25/singleton/</id>
    <published>2019-04-25T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.337Z</updated>
    
    <content type="html"><![CDATA[<p>所谓的单例设计指的是一个类只允许产生一个实例化对象。</p><p>范例：编写一个简单的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DesignMode.单例模式;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Singleton singleton = <span class="keyword">null</span>; <span class="comment">// 声明一个变量</span></span><br><span class="line">        singleton = <span class="keyword">new</span> Singleton(); <span class="comment">// 实例化对象</span></span><br><span class="line">        singleton.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上的程序在进行对象实例化的时候调用了Singleton类的无参构造方法，因为在Singleton类里面并没有提供任何的构造方法，所以会自动生成一个无参的，什么都不做的构造方法。但是如果说现在将Singleton类中定义一个私有参数的构造呢？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DesignMode.单例模式;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;  <span class="comment">// 任何方法都可以使用那四种权限</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Singleton singleton = <span class="keyword">null</span>; <span class="comment">// 声明一个变量</span></span><br><span class="line">        singleton = <span class="keyword">new</span> Singleton(); <span class="comment">// 实例化对象 错误 构造函数私有</span></span><br><span class="line">        singleton.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个时候类中已经明确的提供有了一个私有的构造方法，那么默认的无参构造将一定不会自动生成，那么也就是说此时在进行对象实例化的时候一定会有错误。</p></blockquote><blockquote><p>首先一旦构造方法被私有化了，那么就表示外部无法调用构造了，也就证明外部不能产生新的实例化对象了。那么也就证明此时的类是一个相对而言封闭的状态了。<br>可是现在如果还想调用Singleton类中的<code>print()</code>这个普通方法，那么就必须提供有实例化对象。于是根据封装的特点，可以考虑在类的内部产生一个实例化对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DesignMode.单例模式;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在类的内部是允许访问私有的结构的，所以可以在类的内部产生实例化对象</span></span><br><span class="line">    Singleton instance = <span class="keyword">new</span> Singleton(); <span class="comment">// 内部产生实例化对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;  <span class="comment">// 任何方法都可以使用那四种权限</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Singleton singleton = <span class="keyword">null</span>; <span class="comment">// 声明一个变量</span></span><br><span class="line">        <span class="comment">// singleton = new Singleton(); // 实例化对象</span></span><br><span class="line">        <span class="comment">// singleton.print();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在Singleton类内部的instance对象（属性）是一个普通属性，所有的普通属性必须在有实例化对象的时候才能够进行内存空间的分配，而现在外部无法产生实例化对象，所以就必须想一个办法，可以在Singelton类没有实例化对象产生的时候也可以将instance进行使用。那么自然会联想到要使用static关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DesignMode.单例模式;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在类的内部是允许访问私有的结构的，所以可以在类的内部产生实例化对象</span></span><br><span class="line">    <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton(); <span class="comment">// 内部产生实例化对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;  <span class="comment">// 任何方法都可以使用那四种权限</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Singleton singleton = <span class="keyword">null</span>; <span class="comment">// 声明一个变量</span></span><br><span class="line">        <span class="comment">// singleton = new Singleton(); // 实例化对象</span></span><br><span class="line">        <span class="comment">// singleton.print();</span></span><br><span class="line">        singleton = Singleton.instance; <span class="comment">// 实例化对象</span></span><br><span class="line">        singleton.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上虽然取得了Singleton类的实例化对象，但是对于类中的属性应该使用private封装，而如果要想取得封装的属性就必须提供有一个getter方法，不过此时访问的是一个static属性，并且这个类无法在外部进行实例化对象的创建，所以要再提供有一个static方法，因为static方法也不受实例化对象的控制。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DesignMode.单例模式;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在类的内部是允许访问私有的结构的，所以可以在类的内部产生实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton(); <span class="comment">// 内部产生实例化对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;  <span class="comment">// 任何方法都可以使用那四种权限</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Singleton singleton = <span class="keyword">null</span>; <span class="comment">// 声明一个变量</span></span><br><span class="line">        <span class="comment">// singleton = new Singleton(); // 实例化对象</span></span><br><span class="line">        <span class="comment">// singleton.print();</span></span><br><span class="line">        singleton = Singleton.getInstance(); <span class="comment">// 实例化对象</span></span><br><span class="line">        singleton.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先现在的问题已经解决了，但是这样的做法的目的是什么呢？只希望类中产生唯一的一个实例化对象。</p><p>不过对于这种单例设计模式，也有两类的形式：懒汉式，饿汉式。之前的程序实际上就属于饿汉式的应用，因为不管你是否去使用Singelton类的对象，只要该类加载了，那么一定会自动创建好一个公共的instace对象。既然是饿汉式，就希望整体的操作之中只能够有一个实例化对象，所以一般会给其加上<code>finnal</code>.</p><p>范例：饿汉式的单例设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DesignMode.单例模式;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在类的内部是允许访问私有的结构的，所以可以在类的内部产生实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton(); <span class="comment">// 内部产生实例化对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;  <span class="comment">// 任何方法都可以使用那四种权限</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Singleton singleton = <span class="keyword">null</span>; <span class="comment">// 声明一个变量</span></span><br><span class="line">        <span class="comment">// singleton = new Singleton(); // 实例化对象</span></span><br><span class="line">        <span class="comment">// singleton.print();</span></span><br><span class="line">        singleton = Singleton.getInstance(); <span class="comment">// 实例化对象</span></span><br><span class="line">        singleton.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>特点：构造方法私有化，外部无法产生新的实例化对象，只能通过static方法获取对象。</p></blockquote><p>范例：懒汉式单例</p><ul><li>指的是当第一次去使用Singleton类对象的时候才会为其进行实例化的处理操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DesignMode.单例模式;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉式单例</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Message instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Message();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Message</span><span class="params">()</span></span>&#123;&#125;;  <span class="comment">// 构造函数私有化， 外部无法实例化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Wolrd!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Message message = <span class="keyword">null</span>; <span class="comment">// 声明一个对象</span></span><br><span class="line">        message = Message.getInstance();</span><br><span class="line">        message.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要的是需要将单例设计的核心组成记住，以及慢慢理解他的用法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所谓的单例设计指的是一个类只允许产生一个实例化对象。&lt;/p&gt;
&lt;p&gt;范例：编写一个简单的程序&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式-多例设计模式</title>
    <link href="https://blog.loong.io/2019/04/25/multiton/"/>
    <id>https://blog.loong.io/2019/04/25/multiton/</id>
    <published>2019-04-25T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.336Z</updated>
    
    <content type="html"><![CDATA[<p>多例的对象的类实际上在生活中也经常出现，例如：要求描述一周时间数的类，只能有七个对象，描述性别类的对象只能够有两个，这些都属于多例设计模式。</p><p>所谓的多例只是比单例追加了更多个内部实例化对象的产生而已。</p><p>范例： 现在定义一个表示性别的多例类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DesignMode.多例模式;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAN_FLAG = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> WOMEN_FLAG = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Sex MAN = <span class="keyword">new</span> Sex(<span class="string">"男"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Sex WOMEN = <span class="keyword">new</span> Sex(<span class="string">"女"</span>);</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sex <span class="title">getInstance</span><span class="params">(<span class="keyword">int</span> flag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">case</span> MAN_FLAG:</span><br><span class="line">                <span class="keyword">return</span> MAN;</span><br><span class="line">            <span class="keyword">case</span> WOMEN_FLAG:</span><br><span class="line">                <span class="keyword">return</span> WOMEN;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Sex</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Sex sex = Sex.getInstance(Sex.MAN_FLAG);</span><br><span class="line">        System.out.println(sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不管是多例还是单例特点很明显：</p><ul><li>构造方法私有化；</li><li>类内部一定会提供有一个static方法用户取得类的实例化对象。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多例的对象的类实际上在生活中也经常出现，例如：要求描述一周时间数的类，只能有七个对象，描述性别类的对象只能够有两个，这些都属于多例设计模式。&lt;/p&gt;
&lt;p&gt;所谓的多例只是比单例追加了更多个内部实例化对象的产生而已。&lt;/p&gt;
&lt;p&gt;范例： 现在定义一个表示性别的多例类&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Object类</title>
    <link href="https://blog.loong.io/2019/04/25/Object/"/>
    <id>https://blog.loong.io/2019/04/25/Object/</id>
    <published>2019-04-25T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><p>Object类是java默认提供的一个类，可以这么说，java里面除了Object类之外，所有的类都是存在有继承关系的。<br>默认会继承Object父类，也就说以下的两种类的定义最终效果是完全相同的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么也就证明所有类的对象都可以使用Object进行接收。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        fun(<span class="keyword">new</span> Message());</span><br><span class="line">        fun(<span class="keyword">new</span> Person());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在开发之中，Object类是参数的最高统一类型。本身Object类本身也具备有一些定义的方法：</p><h2 id="Object本身的方法"><a href="#Object本身的方法" class="headerlink" title="Object本身的方法"></a>Object本身的方法</h2><table><thead><tr><th style="text-align:center">NO.</th><th style="text-align:center">方法名称</th><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center"><code>public Object()</code></td><td style="text-align:center">构造</td><td style="text-align:center">无参构造主要是为子类提供服务的</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center"><code>public String toString()</code></td><td style="text-align:center">普通</td><td style="text-align:center">取得对象信息</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center"><code>public boolean equals(Object obj)</code></td><td style="text-align:center">普通</td><td style="text-align:center">对象的比较</td></tr></tbody></table><h3 id="取得对象信息"><a href="#取得对象信息" class="headerlink" title="取得对象信息"></a>取得对象信息</h3><p>在使用对象直接输出的时候发现默认情况下输出的是一个地址编码。但是如果说现在使用的是一个String类，该类对象直接输出的时候就是内容，主要的原因就是这个<code>toString()</code>方法；</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Produce</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Produce</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String是Object类的子类</span></span><br><span class="line">        fun(<span class="string">"helloworld"</span>);      <span class="comment">// helloworld</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义对象</span></span><br><span class="line">        fun(<span class="keyword">new</span> Produce(<span class="string">"kyle"</span>, <span class="number">24</span>));  <span class="comment">// Object类.Produce@61bbe9ba</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"helloworld"</span>);  <span class="comment">//  helloworld</span></span><br><span class="line">        print(<span class="keyword">new</span> Produce(<span class="string">"kyel"</span>, <span class="number">24</span>)); <span class="comment">// Object类.Produce@610455d6</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认输出，对象调用的就是toString()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        System.out.println(obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就发现了默认情况下Object类中提供的toString()方法只能够得到一个对象的地址（而这是所有对象都共同具备的特征）。而现在如果觉得默认给出的toString()功能不足，就建议在需要的子类上覆写toString()方法。</p><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 覆写Object中的toString()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + <span class="keyword">this</span>.name + <span class="string">"，年龄："</span> + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        print(<span class="string">"hello"</span>);  <span class="comment">// hello</span></span><br><span class="line">        print(<span class="keyword">new</span> Dog(<span class="string">"doudou"</span>, <span class="number">12</span>)); <span class="comment">// 姓名：doudou，年龄：12</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以toString()方法的目的在于取得对象信息。相当于替换了之前简单java类中getInfo()方法的功能。</p><blockquote><p>String是作为信息输出的重要的数据类型，在java中所有的数据类型只要遇见了String，并且执行了<code>+</code>这种连接操作，<br>那么都要求将其变为字符串后连接，而所有对象要想变为字符串就默认使用toString()方法。</p></blockquote><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + <span class="keyword">this</span>.name + <span class="string">"，年龄："</span> + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String result = <span class="string">"hello,"</span> + <span class="keyword">new</span> Animal(<span class="string">"doudou"</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(result); <span class="comment">// hello,姓名：doudou，年龄：12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象比较"><a href="#对象比较" class="headerlink" title="对象比较"></a>对象比较</h3><p>String类内容的比较使用的是equals()方法，实际上这个equals()方法就是String类覆写的Object类的方法。</p><blockquote><p>String类中的equals()方法:<code>public boolean equals(Object obj)</code></p></blockquote><p>以后在编写对象的比较处理，不要再使用之前的compare()，统一更换为equals()。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + <span class="keyword">this</span>.name + <span class="string">"，年龄："</span> + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(anObject == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(anObject == <span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须先判断这个，不然转型失败就会出现ClassCastException错误</span></span><br><span class="line">        <span class="keyword">if</span>(!(anObject <span class="keyword">instanceof</span> Student))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须将Obejct类型变为Person类型后才能调用name，age属性</span></span><br><span class="line">        Student stu = (Student) anObject;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(stu.name) &amp;&amp; <span class="keyword">this</span>.age == stu.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">24</span>);</span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">24</span>);</span><br><span class="line">        System.out.println(stu1.equals(stu2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(stu1.equals(<span class="string">"hello"</span>)); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>public boolean equals(Student anObject)</code>由于Object类equals方法中使用的参数是Object，所以以上的方法严格来讲已经不是覆写了，是重载。</p></blockquote><h3 id="Object接收引用数据类型"><a href="#Object接收引用数据类型" class="headerlink" title="Object接收引用数据类型"></a>Object接收引用数据类型</h3><p>在之前已经分析了Object可以接收任意的对象，因为从定义的结构上来讲，Object是所有类的父类，<br>但是Object的概念并不仅仅局限于此，他可以接收所有的引用数据类型，包括：数组、接口。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 利用Object接收数组，向上转型</span></span><br><span class="line">        Object arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">// 向下转型，需要强制类型转换</span></span><br><span class="line">        <span class="keyword">int</span>[] result = (<span class="keyword">int</span>[]) arr;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++)&#123;</span><br><span class="line">            System.out.println(result[i]+ <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而Object可以接收接口更是java中的强制性要求，因为接口本身是不可能继承任何类的，所以这种类型的接收就是自己的规定。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span> <span class="keyword">implements</span> <span class="title">IMessage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="comment">// 覆写Object方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 子类向父接口转型</span></span><br><span class="line">        IMessage mes = <span class="keyword">new</span> MessageImpl();</span><br><span class="line">        <span class="comment">// 接口向Object转型</span></span><br><span class="line">        Object obj = mes;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object真正达到了参数的统一，如果一个类希望可以接收所有的数据类型，就使用Object完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Object类&quot;&gt;&lt;a href=&quot;#Object类&quot; class=&quot;headerlink&quot; title=&quot;Object类&quot;&gt;&lt;/a&gt;Object类&lt;/h1&gt;&lt;p&gt;Object类是java默认提供的一个类，可以这么说，java里面除了Object类之外，所有的类都
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的注解</title>
    <link href="https://blog.loong.io/2019/04/25/annotation/"/>
    <id>https://blog.loong.io/2019/04/25/annotation/</id>
    <published>2019-04-25T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="annotation-注解"><a href="#annotation-注解" class="headerlink" title="annotation(注解)"></a>annotation(注解)</h1><p>Annotation是jdk1.5之后提出的一个新的开发技术结构，利用Annotation可以有效减少程序配置的代码，<br>并且可以利用Annotation进行一些结构化的定义。</p><p>Annotation是以一种注解的形式实现的程序开发。</p><p>如果要想清除Annotation的产生意义，则必须了解一下程序开发结构的历史，从历史来讲，程序开发一共分为了<br>三个过程：</p><blockquote><p>过程一：在程序定义的时候将所有可能使用到的资源全部定义在代码之中；</p><ul><li>如果此时服务器的相关的地址发生了改变，那么对于程序而言，就需要进行源代码的修改了，维护需要开发人员来完成。<br>这样的做法明显是不方便的。</li></ul></blockquote><blockquote><p>过程二：引入配置文件，在配置文件中定义全部要使用的服务器资源。</p><ul><li>在配置项不多的情况下，此类配置非常好用，并且十分的简单，但是如果这个时候所有的项目都是采用这种结构开发，那么就<br>可能出现一种可怕的场景：配置文件太多；</li><li>所有的操作都需要通过配置文件完成，这样对于开发的难度提升了；</li></ul></blockquote><blockquote><p>过程三：将配置信息重新写回到程序里面，利用一些特殊的标记与程序代码进行分离，这就是注解的作用，<br>也就是annotation提出的基本依据。</p><ul><li>如果全部使用注解进行开发，难度太高了，配置文件有好处也有缺点，所以现在的开发是围绕着配置文件+注解的形式完成的；</li></ul></blockquote><p>基本的几个注解：@Override , @Deprecated , @SuppressWarnings。</p><h2 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a>基本注解</h2><h3 id="Override-覆写"><a href="#Override-覆写" class="headerlink" title="@Override 覆写"></a>@Override 覆写</h3><p>当子类继承某一个父类之后发现父类中的某些方法功能不足的时候，往往会采用覆写的形式来对我们功能进行扩充，于是下面首先来观察一种覆写操作。</p><p>范例：<a href="TestDemo.java">观察覆写的问题</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Channel</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*********** Channel *************"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseChannel</span> <span class="keyword">extends</span> <span class="title">Channel</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"************ DatabaseChannel ************"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> DatabaseChannel().content();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>开发之中经常出现的两个问题：</p><ul><li>虽然明确的继承一个父类，并且进行父类的覆写，但是有可能由于疏忽忘记编写extends，于是这个时候不是覆写；</li><li>在进行方法覆写的时候单词写错了。</li></ul></blockquote><blockquote><p>此时即便是以上的两个问题都发生了，实际上程序在编译的时候也不会出现任何的错误信息，因为它认为这是一个新的方法。</p><p>所以在开发之中为了避免这种问题的出现，可以在明确覆写的方法上追加有一个注解。</p></blockquote><p>范例：<a href="TestDemo1.java">追加注解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是一个人"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// 明确标识这是一个覆写操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是一个男人"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Man().say();  <span class="comment">// 我是一个男人</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该注解主要是帮助开发者在程序编译的时候可以检查出程序的错误。</p><h3 id="Deprecated-过期操作"><a href="#Deprecated-过期操作" class="headerlink" title="@Deprecated 过期操作"></a>@Deprecated 过期操作</h3><p>所谓的过期操作指的是在一个软件项目的迭代开发过程之中，可能有某一个方法或者某一个类，由于在最初设计的时候考虑不周（存在有缺陷），导致新版本的应用会有不适应的地方（老版本不影响），<br>这个时候又不可能直接删除掉这些操作，那么就希望给一个过渡的时间，于是就可以采用过期的声明，目的告诉新的用户这些操作不要再用了，老的用户你用就用了。<br>这些方法就必须利用我们的<code>@Deprecated</code>注解进行定义。</p><p>范例：<a href="TestDemo2.java">声明过期操作</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Women</span></span>&#123;</span><br><span class="line">    <span class="meta">@Deprecated</span> <span class="comment">// 过期的方法，不建议使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你好"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Women().say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在有一些开源项目里面特别讨厌的一点：新版本出现之后，将里面的方法彻底变个样。</p><h3 id="SuppressWarnings-压制警告"><a href="#SuppressWarnings-压制警告" class="headerlink" title="@SuppressWarnings 压制警告"></a>@SuppressWarnings 压制警告</h3><p>以之前的过期程序为例，可以发现在进行程序编译的时候会出现一个错误的提示信息。</p><blockquote><p>如果此时不愿意见到这些错误信息（或者已经明确了错误在那里），那么就可以进行警告信息的压制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Women</span></span>&#123;</span><br><span class="line">    <span class="meta">@Deprecated</span> <span class="comment">// 过期的方法，不建议使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你好"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"deprecation"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Women().say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它要做的只是让警告信息不出现，不骚然你而已。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;annotation-注解&quot;&gt;&lt;a href=&quot;#annotation-注解&quot; class=&quot;headerlink&quot; title=&quot;annotation(注解)&quot;&gt;&lt;/a&gt;annotation(注解)&lt;/h1&gt;&lt;p&gt;Annotation是jdk1.5之后提出的一个
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>海康摄像头rtsp</title>
    <link href="https://blog.loong.io/2018/11/23/rtsp/"/>
    <id>https://blog.loong.io/2018/11/23/rtsp/</id>
    <published>2018-11-23T06:44:27.000Z</published>
    <updated>2020-06-03T02:37:45.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="海康摄像头rtsp"><a href="#海康摄像头rtsp" class="headerlink" title="海康摄像头rtsp"></a>海康摄像头rtsp</h1><p>海康威视IP摄像头rtsp协议地址如下：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtsp://<span class="string">[username]</span>:<span class="string">[passwd]</span>@<span class="string">[ip]</span>:<span class="string">[port]</span>/<span class="string">[codec]</span>/<span class="string">[channel]</span>/<span class="string">[subtype]</span>/av_stream</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><p><code>username</code>：用户名，例如admin</p><p><code>passwd</code>：密码，例如12345</p><p><code>ip</code>：设备的ip地址，例如192.0.0.64</p><p><code>port</code>：端口号默认554，若为默认可以不写</p><p><code>codec</code>：有h264、MPEG-4、mpeg4这几种</p><p><code>channel</code>：通道号，起始为1</p><p><code>subtype</code>：码流类型，主码流为main,子码流为sub</p></blockquote><p>例如，请求海康IP摄像机通道1的码流，url如下：</p><p>主码流：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rtsp:<span class="regexp">//</span>admin:<span class="number">12345</span>@<span class="number">192.0</span>.<span class="number">0.64</span>:<span class="number">554</span><span class="regexp">/h264/</span>ch1<span class="regexp">/main/</span>av_stream</span><br><span class="line"> </span><br><span class="line">rtsp:<span class="regexp">//</span>admin:<span class="number">12345</span>@<span class="number">192.0</span>.<span class="number">0.64</span>:<span class="number">554</span><span class="regexp">/MPEG-4/</span>ch1<span class="regexp">/main/</span>av_stream</span><br></pre></td></tr></table></figure><p>子码流：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">rtsp:</span>//admin:<span class="number">12345</span><span class="subst">@192</span><span class="number">.0</span><span class="number">.0</span><span class="number">.64</span>/mpeg4/ch1/<span class="keyword">sub</span>/av_stream</span><br><span class="line"> </span><br><span class="line"><span class="symbol">rtsp:</span>//admin:<span class="number">12345</span><span class="subst">@192</span><span class="number">.0</span><span class="number">.0</span><span class="number">.64</span>/h264/ch1/<span class="keyword">sub</span>/av_stream</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;海康摄像头rtsp&quot;&gt;&lt;a href=&quot;#海康摄像头rtsp&quot; class=&quot;headerlink&quot; title=&quot;海康摄像头rtsp&quot;&gt;&lt;/a&gt;海康摄像头rtsp&lt;/h1&gt;&lt;p&gt;海康威视IP摄像头rtsp协议地址如下：&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="rtsp" scheme="https://blog.loong.io/categories/rtsp/"/>
    
    
      <category term="rtsp" scheme="https://blog.loong.io/tags/rtsp/"/>
    
  </entry>
  
  <entry>
    <title>Ionic3打包APP</title>
    <link href="https://blog.loong.io/2018/10/24/ionic3/"/>
    <id>https://blog.loong.io/2018/10/24/ionic3/</id>
    <published>2018-10-24T06:42:50.000Z</published>
    <updated>2020-06-03T02:37:45.309Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oujvmc3la.bkt.clouddn.com/ica-slidebox-img-1.png" alt></p><h1 id="ionic-特点"><a href="#ionic-特点" class="headerlink" title="ionic 特点"></a>ionic 特点</h1><blockquote><ol><li>ionic 基于Angular语法，简单易学。</li><li>ionic 是一个轻量级框架。</li><li>ionic 完美的融合下一代移动框架，支持 Angularjs 的特性， MVC ，代码易维护。</li><li>ionic 提供了漂亮的设计，通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。</li><li>ionic 专注原生，让你看不出混合应用和原生的区别</li><li>ionic 提供了强大的命令行工具。</li><li>ionic 性能优越，运行速度快。</li></ol></blockquote><p>以下步骤就是我总结的ionic3创建项目到打包成APP过程的步骤，在进行这些步骤之前还需要安装JDK、NPM、Cordova、Ionic。如何安装配置，自行百度……</p><h1 id="1-创建ionic项目"><a href="#1-创建ionic项目" class="headerlink" title="1. 创建ionic项目"></a>1. 创建ionic项目</h1><blockquote><p>在命令提示符下运行命令</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic <span class="literal">start</span> appName tabs</span><br></pre></td></tr></table></figure><blockquote><p>tabs – 底部栏</p><p>blank – 空项目</p><p>sidemenu – 侧滑栏</p></blockquote><h1 id="2-添加平台"><a href="#2-添加平台" class="headerlink" title="2. 添加平台"></a>2. 添加平台</h1><p>创建成功后，cd进入项目的根目录下，运行命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic cordova platform <span class="keyword">add</span><span class="bash"> android</span></span><br></pre></td></tr></table></figure><blockquote><p>ios版本就是 <code>ionic cordova platform add ios</code></p></blockquote><h1 id="3-编译"><a href="#3-编译" class="headerlink" title="3. 编译"></a>3. 编译</h1><blockquote><p>运行命令</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ionic</span> cordova <span class="keyword">build </span><span class="keyword">android </span>--release</span><br></pre></td></tr></table></figure><p>编译成功后会在项目下的platforms/androidild/outputs/apk里面生成生成默认名字为android-release-unsigned.apk的release版本apk文件（要使用jarsigner签名必须用release版本）</p><blockquote><p>解决ionic3打包后启动慢的问题</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ionic</span> cordova <span class="keyword">build </span><span class="keyword">android </span>--prod --release</span><br></pre></td></tr></table></figure><h1 id="4-生成keystore文件（签名时要用到这个keystore文件）"><a href="#4-生成keystore文件（签名时要用到这个keystore文件）" class="headerlink" title="4. 生成keystore文件（签名时要用到这个keystore文件）"></a>4. 生成keystore文件（签名时要用到这个keystore文件）</h1><p>keytool是JDK自带的加密工具，只需生成一次，然后保存在本地，之后签名直接使用这个文件不需要重新生成</p><blockquote><p>运行命令行</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore my-release-<span class="type">key</span>.keystore -alias alias_name -keyalg RSA -keysize <span class="number">2048</span> -validity <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>运行命令后，系统会让我们设置一些密码以及安全问题，根据提示进行设置便好，最后生成默认名为my-release-key.keystore文件，该文件存储在当前命令行执行的目录下，<br>其中alias_name,是你自己自行设置的，如果设置了文件保存后的文件名就是alias_name.keystore，validity 10000表示文件的加密时间为10000天</p><h1 id="5-使用jarsigner签名"><a href="#5-使用jarsigner签名" class="headerlink" title="5. 使用jarsigner签名"></a>5. 使用jarsigner签名</h1><p>jarsigner是JDK自带的签名工具，如果要将apk发布到android应用市场，就需要对release版本的apk文件使用keystore文件进行签名</p><blockquote><p>运行命令</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">jarsigner </span>-verbose -sigalg <span class="keyword">SHA1withRSA </span>-<span class="keyword">digestalg </span><span class="keyword">SHA1 </span>-keystore my-release-key.keystore <span class="keyword">android-release-unsigned.apk </span>alias_name</span><br></pre></td></tr></table></figure><blockquote><p>注:android-release-unsigned.apk为你所需要打包的apk的具体路径， alias_name为上面生成的keystore文件</p></blockquote><p>之后该应用就被签名完毕了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://oujvmc3la.bkt.clouddn.com/ica-slidebox-img-1.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;ionic-特点&quot;&gt;&lt;a href=&quot;#ionic-特点&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="Ionic" scheme="https://blog.loong.io/tags/Ionic/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript正则表达式完美实现身份证校验功能</title>
    <link href="https://blog.loong.io/2018/09/29/js-verify/"/>
    <id>https://blog.loong.io/2018/09/29/js-verify/</id>
    <published>2018-09-29T02:56:50.000Z</published>
    <updated>2020-06-03T02:37:45.308Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章主要介绍了JS正则表达式完美实现身份证校验功能,需要的朋友可以参考下</p></blockquote><blockquote><p>注意：</p><p>1、只针对18为身份证号码进行校验，现在15位的应该很少了;</p><p>2、不区分xX大小写;</p><p>3、出生年份1900-2099，每月的天数也进行相关验证(考虑的闰月的情况);</p><p>4、校验规则详见<a href="https://jingyan.baidu.com/article/7f41ececff944a593d095c8c.html" target="_blank" rel="noopener">校验规则</a>，这个写的比较详细和清楚，相信看过后都可以自己写一个.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">testID(id) &#123;</span><br><span class="line">    <span class="keyword">var</span> format = <span class="regexp">/^(([1][1-5])|([2][1-3])|([3][1-7])|([4][1-6])|([5][0-4])|([6][1-5])|([7][1])|([8][1-2]))\d&#123;4&#125;(([1][9]\d&#123;2&#125;)|([2]\d&#123;3&#125;))(([0][1-9])|([1][0-2]))(([0][1-9])|([1-2][0-9])|([3][0-1]))\d&#123;3&#125;[0-9xX]$/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!format.test(id)) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="string">'status'</span>:<span class="number">0</span>,<span class="string">'msg'</span>:<span class="string">'身份证号码不合规'</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//区位码校验</span></span><br><span class="line">    <span class="comment">//出生年月日校验 正则限定起始年份为1900；</span></span><br><span class="line">    <span class="keyword">var</span> year = id.substr(<span class="number">6</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">var</span> month = id.substr(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> date = id.substr(<span class="number">12</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> time = <span class="built_in">Date</span>.parse(year+<span class="string">'-'</span>+month+<span class="string">'-'</span>+date);<span class="comment">//身份证日期时间戳</span></span><br><span class="line">    <span class="keyword">var</span> now_time = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleDateString());<span class="comment">//当前时间戳</span></span><br><span class="line">    <span class="keyword">var</span> dates = (<span class="keyword">new</span> <span class="built_in">Date</span>(year, month, <span class="number">0</span>)).getDate();<span class="comment">//身份证当月天数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( time &gt; now_time || date &gt; dates ) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'status'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'msg'</span>:<span class="string">'身份证出生日期不合规'</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验码判断</span></span><br><span class="line">    <span class="keyword">var</span> c = [<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>];  <span class="comment">//系数</span></span><br><span class="line">    <span class="keyword">var</span> b = [<span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'X'</span>,<span class="string">'9'</span>,<span class="string">'8'</span>,<span class="string">'7'</span>,<span class="string">'6'</span>,<span class="string">'5'</span>,<span class="string">'4'</span>,<span class="string">'3'</span>,<span class="string">'2'</span>]; <span class="comment">//校验码对照表</span></span><br><span class="line">    <span class="keyword">var</span> id_array = id.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;<span class="number">17</span>;k++)&#123;</span><br><span class="line">      sum+=<span class="built_in">parseInt</span>(id_array[k])*c[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(id_array[<span class="number">17</span>].toUpperCase() != b[sum%<span class="number">11</span>].toUpperCase())&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'status'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'msg'</span>:<span class="string">'身份证校验码不合规'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="string">'status'</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="string">'msg'</span>:<span class="string">'校验通过'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇文章主要介绍了JS正则表达式完美实现身份证校验功能,需要的朋友可以参考下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;1、只针对18为身份证号码进行校验，现在15位的应该很少了;&lt;/p&gt;
&lt;p&gt;2、
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="regexp" scheme="https://blog.loong.io/tags/regexp/"/>
    
  </entry>
  
  <entry>
    <title>接口</title>
    <link href="https://blog.loong.io/2018/09/18/interface/"/>
    <id>https://blog.loong.io/2018/09/18/interface/</id>
    <published>2018-09-18T12:37:57.000Z</published>
    <updated>2020-06-03T02:37:45.307Z</updated>
    
    <content type="html"><![CDATA[<p>在java中，接口表示一种规范/约束/要求实现者必须遵循该规范：用来约束使用者应该怎么做。</p><p>接口只定义了类应当遵循的规范，却不关心这些类的内部数据和其功能的实现细节。站在程序的角度上说接口只规定了类里必须提供的方法，从而分离了规范和实现，增强了系统的可拓展性和可维护性。</p><h1 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Usbable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口其实是一个特殊的抽象类,内部的<code>abstract</code>可以不写</p></blockquote><blockquote><p>如果没有在方法前面加上<code>abstract</code>,会在编译时自动添加上<code>public abstract void trabsData()</code></p></blockquote><h1 id="接口中的注意点"><a href="#接口中的注意点" class="headerlink" title="接口中的注意点"></a>接口中的注意点</h1><blockquote><blockquote><p>1.接口中是没有构造器的,接口不能创建对象;</p></blockquote><blockquote><p>2.接口中定义常量,都是全局的静态常量;</p><blockquote><p><code>String name = &quot;world&quot;;</code> &gt;&gt;<br><code>public static final String name = &quot;world&quot;;</code></p></blockquote></blockquote><blockquote><p>3.接口中定义的方法都是公共的抽象的方法;</p><blockquote><p><code>void transData();</code> &gt;&gt;<br><code>public abstract void transData();</code></p></blockquote></blockquote><blockquote><p>4.接口中可以定义内部类,内部类也是公共的抽象的;</p></blockquote></blockquote><h1 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 接口;</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬行动物</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iwalkable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//水生动物</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iswimable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两栖动物</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iamphibiousablbe</span> <span class="keyword">extends</span> <span class="title">Iswimable</span>,<span class="title">Iwalkable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口是可以继承的,它是可多继承的.</p></blockquote><h1 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 接口;</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬行动物</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iwalkable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>; <span class="comment">//public abstract void walk();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//水生动物</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iswimable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两栖动物</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iamphibiousablbe</span> <span class="keyword">extends</span> <span class="title">Iswimable</span>,<span class="title">Iwalkable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aniaml</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line">String color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Cat实现了Iwalkable接口</span></span><br><span class="line"><span class="comment">// 实现关系有时候也称它为继承关系</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Iwalkable</span></span>&#123;</span><br><span class="line"><span class="comment">//覆盖的时候，子类的方法权限要比父类大，或者一样大</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"走猫步"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// (Iwalkable接口也可以称为它的父类)</span></span><br><span class="line"><span class="comment">//多态写法，把子类对象赋值给父类类型</span></span><br><span class="line">Iwalkable cat = <span class="keyword">new</span> Cat(); <span class="comment">//面向接口编程</span></span><br><span class="line">cat.walk();<span class="comment">//多态运行时表现出来的还是子类的特征。（编译时看左边，运行时看右边）</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口与抽象类的区别"><a href="#接口与抽象类的区别" class="headerlink" title="接口与抽象类的区别"></a>接口与抽象类的区别</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><ol><li>都是被其它类实现或者被继承的；</li><li>都不能实例化；</li><li>都可以定义抽象方法，定义的抽象方法子类必须得要覆盖；</li></ol><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ol><li>接口是没有构造器的，抽象类中有构造器；</li><li>抽象类中可以包含抽象方法和普通方法，接口当中只能有抽象方法,不能有普通方法（带有方法体）；（jdk8以后可以有普通方法）；</li><li>接口当中成员变量为<code>public static final 变量;</code>-&gt;静态常量;抽象类中默认的权限(包访问权限);</li><li>方法 接口中默认方法为<code>public abstract 方法名;</code>;抽象类中默认的权限(包访问权限);</li></ol><h1 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h1><blockquote><p>面向接口编程:把实现类对象赋值给接口类型的变量;</p></blockquote><blockquote><p>多态的好处：屏蔽了不同类之间的实现差异，从而达到通用编程；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 接口;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUSB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">IUSB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swapData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"鼠标移动"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Keyboard</span> <span class="keyword">implements</span> <span class="title">IUSB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swapData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"输出字符"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MotherBoard</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pluginIn</span><span class="params">(IUSB USB)</span> </span>&#123;</span><br><span class="line">USB.swapData();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IUSB m = <span class="keyword">new</span> Mouse();</span><br><span class="line">IUSB k = <span class="keyword">new</span> Keyboard();</span><br><span class="line"></span><br><span class="line">MotherBoard mo = <span class="keyword">new</span> MotherBoard();</span><br><span class="line">mo.pluginIn(k);</span><br><span class="line">mo.pluginIn(m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在java中，接口表示一种规范/约束/要求实现者必须遵循该规范：用来约束使用者应该怎么做。&lt;/p&gt;
&lt;p&gt;接口只定义了类应当遵循的规范，却不关心这些类的内部数据和其功能的实现细节。站在程序的角度上说接口只规定了类里必须提供的方法，从而分离了规范和实现，增强了系统的可拓展性和
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>包装类</title>
    <link href="https://blog.loong.io/2018/09/14/wrapperClass/"/>
    <id>https://blog.loong.io/2018/09/14/wrapperClass/</id>
    <published>2018-09-14T13:21:39.000Z</published>
    <updated>2020-06-03T02:37:45.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是包装类"><a href="#什么是包装类" class="headerlink" title="什么是包装类"></a>什么是包装类</h1><p>包装类（Wrapper Class）： Java是一个面向对象的编程语言，但是Java中的八种基本数据类型却是不面向对象的，为了使用方便和解决这个不足，在设计类时为每个基本数据类型设计了一个对应的类进行代表，这样八种基本数据类型对应的类统称为包装类(Wrapper Class)，包装类均位于java.lang包。</p><h1 id="包装类的用途"><a href="#包装类的用途" class="headerlink" title="包装类的用途"></a>包装类的用途</h1><ol><li>为了使用方便Java中将8中基本数据类型进行了封装：除了Integer和Character类以后，其它六个类的类名和基本数据类型一直，只是类名的第一个字母大写即可。</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> —&gt;  <span class="keyword">Boolean</span></span><br><span class="line"><span class="keyword">char</span>    —&gt;  Character</span><br><span class="line"><span class="keyword">byte</span>    —&gt;  <span class="keyword">Byte</span></span><br><span class="line"><span class="keyword">short</span>   —&gt;  <span class="keyword">Short</span></span><br><span class="line"><span class="keyword">long</span>    —&gt;  <span class="keyword">Long</span></span><br><span class="line"><span class="keyword">int</span>     —&gt;  Integer</span><br><span class="line"><span class="keyword">float</span>   —&gt;  <span class="keyword">Float</span></span><br><span class="line"><span class="keyword">double</span>  —&gt;  <span class="keyword">Double</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>对于包装类说，用途主要包含两种：</p><blockquote><p>a、作为 和基本数据类型对应的类 类型存在，方便涉及到对象的操作。</p></blockquote><blockquote><p>b、包含每种基本数据类型的相关属性如最大值、最小值等，以及相关的操作方法。</p></blockquote></li></ol><h1 id="包装类的实际使用"><a href="#包装类的实际使用" class="headerlink" title="包装类的实际使用"></a>包装类的实际使用</h1><blockquote><p>装箱：将 基本数据类型 封装为对象类型，来符合java的面向对象的思想。</p></blockquote><blockquote><p>拆箱：将对象重新转化为基本数据类型。</p></blockquote><h2 id="装箱操作"><a href="#装箱操作" class="headerlink" title="装箱操作"></a>装箱操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//把基本数据类型变成包装类  &gt;&gt; 装箱操作</span></span><br><span class="line"><span class="comment">//之所以输出10，是因为Integer内部覆写了toString</span></span><br><span class="line">Integer num = <span class="keyword">new</span> Integer(a);</span><br><span class="line">Integer num1 = Integer.valueOf(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(num); <span class="comment">//10</span></span><br><span class="line">System.out.println(num1); <span class="comment">//20</span></span><br><span class="line"><span class="comment">//int类型能够表示的最大值</span></span><br><span class="line">System.out.println(num.MAX_VALUE); <span class="comment">//2147483647</span></span><br><span class="line"><span class="comment">//int类型能够表示的最小值</span></span><br><span class="line">System.out.println(num.MIN_VALUE); <span class="comment">//-2147483648</span></span><br><span class="line"><span class="comment">//表示基本类型int的class实例</span></span><br><span class="line">System.out.println(num.TYPE); <span class="comment">//int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拆箱操作"><a href="#拆箱操作" class="headerlink" title="拆箱操作"></a>拆箱操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//把基本数据类型变成包装类  &gt;&gt; 装箱操作</span></span><br><span class="line">Integer num = Integer.valueOf(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拆箱操作：把包装类的对象，转换为对应的基本数据类型的变量</span></span><br><span class="line"><span class="keyword">int</span> num1 = num.intValue();</span><br><span class="line"></span><br><span class="line">System.out.println(num); <span class="comment">//10  对象</span></span><br><span class="line">System.out.println(num1); <span class="comment">//10 基本数据类型</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h2><p>JDK自从1.5版本以后，就引入了自动拆装箱的语法，也就是在进行基本数据类型和对应的包装类转换时，系统将自动进行，这将大大方便程序员的代码书写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//5是基本数据类型，通过自动装箱变为对象类型</span></span><br><span class="line"><span class="comment">//编译器执行了Integer num = Integer.valueOf(5)</span></span><br><span class="line">Integer num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动拆箱，实际上执行了 int num1 = num.intValue()</span></span><br><span class="line"><span class="keyword">int</span> num1 = num;</span><br><span class="line">System.out.println(num1); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>valueOf（）源码分析：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：Integer num = 5;相当于编译器执行了Integer num = Integer.valueOf(5)操作。这个方法就是返回一个 Integer 对象，只是在返回之前，看作了一个判断，判断当前 i 的值是否在 [-128,127] 区别，且 IntegerCache 中是否存在此对象，如果存在，则直接返回引用，否则，创建一个新的对象。</p></blockquote><h1 id="包装类的缓存值"><a href="#包装类的缓存值" class="headerlink" title="包装类的缓存值"></a>包装类的缓存值</h1><blockquote><p>各个包装类缓存值范围 ：</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">boolean：true和false</span><br><span class="line">byte：<span class="number">-128</span>～<span class="number">127</span></span><br><span class="line">char：<span class="number">0</span>～<span class="number">127</span></span><br><span class="line">short：<span class="number">-128</span>～<span class="number">127</span></span><br><span class="line">int：<span class="number">-128</span>～<span class="number">127</span></span><br><span class="line">long：<span class="number">-128</span>～<span class="number">127</span></span><br></pre></td></tr></table></figure><blockquote><p>特别注意：对于float和double没有缓存。</p></blockquote><blockquote><p>在对上述值进行装箱的时候（如：Character c1=127;or Integer i= Integer.valueOf(1); 这个不行哦：Integer i2=new Integer(1)；因为这是新建了一个对象出来。）,并不是创建一个新对象而是使用缓存中的对象，如果超出范围则需要新建立对象。</p></blockquote><h1 id="Int与Integer的区别？"><a href="#Int与Integer的区别？" class="headerlink" title="Int与Integer的区别？"></a>Int与Integer的区别？</h1><ol><li>int 是基本类型，直接存数值；而integer引用数据类型。</li><li>Int的声明不需要实例化，且变量声明后的初始值为0；Integer的是一个类，初始值为null，需要进行实例化，才能对变量数据进行处理。</li><li>Integer类是int的包装类，实际开发中Integer被看成一个对象，可以进行数据转换等操作。</li></ol><h1 id="判断下面程序片段输出的结果："><a href="#判断下面程序片段输出的结果：" class="headerlink" title="判断下面程序片段输出的结果："></a>判断下面程序片段输出的结果：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer num1 = <span class="number">200</span>;   </span><br><span class="line">Integer num2 = <span class="number">200</span>;           </span><br><span class="line">System.out.println(<span class="string">"num1==num2: "</span>+(num1==num2));                    </span><br><span class="line">Integer num3 = <span class="number">100</span>;   </span><br><span class="line">Integer num4 = <span class="number">100</span>;   </span><br><span class="line">System.out.println(<span class="string">"num3==num4: "</span>+(num3==num4));</span><br></pre></td></tr></table></figure><p>输出结果：num1==num2:false 和num3==num4:true</p><blockquote><p>说明：</p><blockquote><p>首先要明确equal方法与==的区别：<br>equals() 比较的是两个对象的值（内容）是否相同。<br>“==” 比较的是两个对象的引用（内存地址）是否相同，也用来比较两个基本数据类型的变量值是否相等。</p></blockquote><blockquote><p>java定义：在自动装箱时对于值从–128到127之间的值，它们被装箱为Integer对象后，会存在内存中被重用，始终只存在一个对象而如果超过了从–128到127之间的值，被装箱后的Integer对象并不会被重用，即相当于每次装箱时都新建一个 Integer对象；</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是包装类&quot;&gt;&lt;a href=&quot;#什么是包装类&quot; class=&quot;headerlink&quot; title=&quot;什么是包装类&quot;&gt;&lt;/a&gt;什么是包装类&lt;/h1&gt;&lt;p&gt;包装类（Wrapper Class）： Java是一个面向对象的编程语言，但是Java中的八种基本数据类型却
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="https://blog.loong.io/2018/09/11/markdown/"/>
    <id>https://blog.loong.io/2018/09/11/markdown/</id>
    <published>2018-09-11T12:43:30.000Z</published>
    <updated>2020-06-03T02:37:45.305Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言，能将文本换成有效的XHTML(或者HTML)文档，它的目标是实现易读易写，成为一种适用于网络的书写语言。</p><p>Markdown 语法简洁明了，易于掌握，所以用它来写作是件既效率又舒服的事情。我们所熟知的和一些大型CMS，如Joomla!、Drupal等都能很好的支持Markdown。我是因为写GitHub项目库中的Readme才开始接触Markdown。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>Headers 标题：</p><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><p>另外，H1和H2还能用以下方式显示：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>Emphasis 文本强调：</p><p><em>斜体</em> or _强调_<br><strong>加粗</strong> or <strong>加粗</strong><br><strong><em>粗斜体</em></strong> or <strong>_粗斜体</strong></p><p>但是，如果你的 <em> 和 _ 两边都有空白的话，它们就只会被当成普通的符号：这是一段</em> 文本强调 <em>的说明示例。<br>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线（转义符）：\</em>this text is surrounded by literal asterisks*<br>Lists 列表：</p><p>Unordered 无序列表：</p><ul><li>无序列表</li><li>子项</li><li>子项</li></ul><ul><li>无序列表</li><li>子项</li><li>子项</li></ul><ul><li>无序列表</li><li>子项</li><li>子项</li></ul><p>Ordered 有序列表：</p><ol><li>第一行</li><li>第二行</li><li><p>第三行</p></li><li><p>第一行</p></li></ol><ul><li>第二行</li><li>第三行</li></ul><p>组合：</p><ul><li><p>产品介绍（子项无项目符号）<br>  此时子项，要以一个制表符或者4个空格缩进</p></li><li><p>产品特点</p><ol><li>特点1</li></ol><ul><li>特点2</li><li>特点3</li></ul></li><li>产品功能<ol><li>功能1</li></ol><ul><li>功能2</li><li>功能3</li></ul></li></ul><p>可有时我们会出现这样的情况，首行内容是以日期或数字开头：2013. 公司年度目标。<br>为了避免也被转化成有序列表，我们可以在”.”前加上反斜杠（转义符）：2013. 公司年度目标。<br>Links 连接（title为可选项）：</p><p>Inline-style 内嵌方式：<br><a href="https://www.google.com" title="title text" target="_blank" rel="noopener">link text</a></p><p>Reference-style 引用方式：<br>[link text][id]<br>[id]: <a href="https://www.mozilla.org" target="_blank" rel="noopener">https://www.mozilla.org</a> “title text”</p><p>Relative reference to a repository file 引用存储文件：<br><a href="../path/file/readme.text" title="title text">link text</a></p><p>还能这样使用：<br>[link text][]<br>[link text]: <a href="http://keyarea.github.io" target="_blank" rel="noopener">http://keyarea.github.io</a></p><p>Email 邮件：<br><a href="mailto:&#101;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#64;&#x65;&#120;&#97;&#x6d;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#109;" target="_blank" rel="noopener">&#101;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#64;&#x65;&#120;&#97;&#x6d;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#109;</a><br>Images 图片：</p><p>Inline-style 内嵌方式：<br><img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="title text"></p><p>Reference-style 引用方式：<br>![alt text][logo]<br>[logo]: <a href="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" target="_blank" rel="noopener">https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png</a> “title text”<br>Code and Syntax Highlighting 代码和语法高亮：</p><p>标记一小段行内代码：<br>本文是一篇介绍<code>Markdown</code>的语法的文章</p><p>如果高亮的内容包含<code>号，可以这样写：`</code> <code>包裹起来</code> <code></code></p><p>语法高亮：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Syntax Highlighting<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"JavaScript syntax highlighting"</span>;</span><br><span class="line">alert(s);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"hello, world!"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Python syntax highlighting"</span></span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><p>Block Code 代码分组(代码区块)：</p><p>在该行开头缩进4个空格或一个制表符(tab)</p><p><strong>Blockquotes 引用：</strong></p><blockquote><p>Email-style angle brackets<br>are used for blockquotes.</p><blockquote><p>And, they can be nested.</p></blockquote><h4 id="Headers-in-blockquotes"><a href="#Headers-in-blockquotes" class="headerlink" title="Headers in blockquotes"></a>Headers in blockquotes</h4><ul><li>You can quote a list.</li><li>Etc.<br>Hard Line Breaks 换行：</li></ul></blockquote><p>在一行的结尾处加上2个或2个以上的空格，也可以使用<br>标签<br>第一行文字，<br>第二行文字<br>Horizontal Rules 水平分割线：</p><hr><hr><hr><p>Escape character 转义符(反斜杠)：</p><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠：<br>*literal asterisks*<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：<br>\反斜杠  `反引号  *星号  _下划线  {}花括号  []方括号  ()括弧  #井字号  +加号  -减号  .英文句 !感叹号<br>Additional 补充：</p><p>Markdown也支持传统的HTML标签。<br>比如一个链接，你不太喜欢Markdown的写法，也可以直接写成<a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Markdown 是一种轻量级标记语言，能将文本换成有效的XHTML(或者HTML)文档，它的目标是实现易读易写，成为一种适用于网络的书写语言。&lt;/p&gt;
&lt;p&gt;Markdown 语法简洁明了，易于掌握，所以用它来写作是件既效率又舒服的事情。我们所熟知的和一些大型CMS，如J
      
    
    </summary>
    
      <category term="markdown" scheme="https://blog.loong.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="https://blog.loong.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>npm package.json属性详解</title>
    <link href="https://blog.loong.io/2018/09/10/package/"/>
    <id>https://blog.loong.io/2018/09/10/package/</id>
    <published>2018-09-10T13:07:25.000Z</published>
    <updated>2020-06-03T02:37:45.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文档的内容是package.json配置里边的属性含义。package.json必须是一个严格的json文件，而不仅仅是js里边的一个对象。其中很多属性可以通过npm-config来生成。   </p><h1 id="name"><a href="#name" class="headerlink" title="name"></a>name</h1><p>package.json中最重要的属性是name和version两个属性，这两个属性是必须要有的，否则模块就无法被安装，这两个属性一起形成了一个npm模块的唯一标识符。模块中内容变更的同时，模块版本也应该一起变化。<br>name属性就是你的模块名称，下面是一些命名规则:<br>name必须小于等于214个字节，包括前缀名称在内（如 xxx/xxxmodule）。    </p><ul><li>name不能以”_”或”.”开头    </li><li>不能含有大写字母    </li><li>name会成为url的一部分，不能含有url非法字符   </li></ul><p>下面是官网文档的一些建议：   </p><ul><li>不要使用和node核心模块一样的名称     </li><li>name中不要含有”js”和”node”。 It’s assumed that it’s js, since you’re writing a package.json file, and you can specify the engine using the “engines” field. (See below.)</li><li>name属性会成为模块url、命令行中的一个参数或者一个文件夹名称，任何非url安全的字符在name中都不能使用，也不能以”_”或”.”开头</li><li>name属性也许会被写在require()的参数中，所以最好取个简短而语义化的值。</li><li>创建一个模块前可以先到后边的网址查查name是否已经被占用. <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a>    </li></ul><p>name属性可以有一些前缀如 e.g. @myorg/mypackage.在npm-scope(7)的文档中可以看到详细说明    </p><h1 id="version"><a href="#version" class="headerlink" title="version"></a>version</h1><p>version必须可以被npm依赖的一个node-semver模块解析。具体规则见下面的dependencies模块    </p><h1 id="description"><a href="#description" class="headerlink" title="description"></a>description</h1><p>一个描述，方便别人了解你的模块作用，搜索的时候也有用。    </p><h1 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h1><p>一个字符串数组，方便别人搜索到本模块    </p><h1 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h1><p>项目主页url<br><strong>注意:</strong> 这个项目主页url和url属性不同，如果你填写了url属性，npm注册工具会认为你把项目发布到其他地方了，获取模块的时候不会从npm官方仓库获取，而是会重定向到url属性配置的地址。<br>（原文档中用了 spit(吐)这个单词，作者表示他不是在开玩笑:）    </p><h1 id="bugs"><a href="#bugs" class="headerlink" title="bugs"></a>bugs</h1><p>填写一个bug提交地址或者一个邮箱，被你的模块坑到的人可以通过这里吐槽，例如：    </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"url"</span> : <span class="string">"https://github.com/owner/project/issues"</span></span><br><span class="line">, <span class="attr">"email"</span> : <span class="string">"project@hostname.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url和email可以任意填或不填，如果只填一个，可以直接写成一个字符串而不是对象。如果填写了url，npm bugs命令会使用这个url。    </p><h1 id="license"><a href="#license" class="headerlink" title="license"></a>license</h1><p>你应该为你的模块制定一个协议，让用户知道他们有何权限来使用你的模块，以及使用该模块有哪些限制。最简单的，例如你用BSD-3-Clause 或 MIT之类的协议，如下：<br>{ “license” : “BSD-3-Clause” }<br>你可以在<a href="https://spdx.org/licenses/" target="_blank" rel="noopener">https://spdx.org/licenses/ </a>这个地址查阅协议列表 。    </p><h1 id="和用户相关的属性-author-contributors"><a href="#和用户相关的属性-author-contributors" class="headerlink" title="和用户相关的属性: author, contributors"></a>和用户相关的属性: author, contributors</h1><p>“author”是一个码农， “contributors”是一个码农数组。 “person”是一个有一些描述属性的对象，如下 like this:   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Barney Rubble"</span></span><br><span class="line">, <span class="attr">"email"</span> : <span class="string">"b@rubble.com"</span></span><br><span class="line">, <span class="attr">"url"</span> : <span class="string">"http://barnyrubble.tumblr.com/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以按如下格式缩写，npm会帮着转换:<br>“Barney Rubble <a href="mailto:&#98;&#64;&#114;&#x75;&#x62;&#98;&#x6c;&#101;&#46;&#99;&#x6f;&#109;" target="_blank" rel="noopener">&#98;&#64;&#114;&#x75;&#x62;&#98;&#x6c;&#101;&#46;&#99;&#x6f;&#109;</a> (<a href="http://barnyrubble.tumblr.com/)&quot;" target="_blank" rel="noopener">http://barnyrubble.tumblr.com/)&quot;</a><br>email和url属性实际上都是可以省略的。描述用户信息的还有一个”maintainers”（维护者）属性。   </p><h1 id="files"><a href="#files" class="headerlink" title="files"></a>files</h1><p>“files”属性的值是一个数组，内容是模块下文件名或者文件夹名，如果是文件夹名，则文件夹下所有的文件也会被包含进来（除非文件被另一些配置排除了）<br>你也可以在模块根目录下创建一个”.npmignore”文件（windows下无法直接创建以”.”开头的文件，使用linux命令行工具创建如git bash），写在这个文件里边的文件即便被写在files属性里边也会被排除在外，这个文件的写法”.gitignore”类似。</p><h1 id="main"><a href="#main" class="headerlink" title="main"></a>main</h1><p>main属性指定了程序的主入口文件。意思是，如果你的模块被命名为foo，用户安装了这个模块并通过require(“foo”)来使用这个模块，那么require返回的内容就是main属性指定的文件中 module.exports指向的对象。<br>它应该指向模块根目录下的一个文件。对大对数模块而言，这个属性更多的是让模块有一个主入口文件，然而很多模块并不写这个属性。   </p><h1 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h1><p>很多模块有一个或多个需要配置到PATH路径下的可执行模块，npm让这个工作变得十分简单（实际上npm本身也是通过bin属性安装为一个可执行命令的）<br>如果要用npm的这个功能，在package.json里边配置一个bin属性。bin属性是一个已命令名称为key，本地文件名称为value的map如下：   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"bin"</span> : &#123; <span class="attr">"myapp"</span> : <span class="string">"./cli.js"</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>模块安装的时候，若是全局安装，则npm会为bin中配置的文件在bin目录下创建一个软连接（对于windows系统，默认会在C:\Users\username\AppData\Roaming\npm目录下），若是局部安装，则会在项目内的./node_modules/.bin/目录下创建一个软链接。<br>因此，按上面的例子，当你安装myapp的时候，npm就会为cli.js在/usr/local/bin/myapp路径创建一个软链接。<br>如果你的模块只有一个可执行文件，并且它的命令名称和模块名称一样，你可以只写一个字符串来代替上面那种配置，例如：    </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"name"</span>: <span class="string">"my-program"</span></span><br><span class="line">, <span class="attr">"version"</span>: <span class="string">"1.2.5"</span></span><br><span class="line">, <span class="attr">"bin"</span>: <span class="string">"./path/to/program"</span> &#125;</span><br></pre></td></tr></table></figure><p>作用和如下写法相同:   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"name"</span>: <span class="string">"my-program"</span></span><br><span class="line">, <span class="attr">"version"</span>: <span class="string">"1.2.5"</span></span><br><span class="line">, <span class="attr">"bin"</span> : &#123; <span class="attr">"my-program"</span> : <span class="string">"./path/to/program"</span> &#125; &#125;</span><br></pre></td></tr></table></figure><h1 id="man"><a href="#man" class="headerlink" title="man"></a>man</h1><p>制定一个或通过数组制定一些文件来让linux下的man命令查找文档地址。<br>如果只有一个文件被指定的话，安装后直接使用man+模块名称，而不管man指定的文件的实际名称。例如:   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"foo"</span></span><br><span class="line">, <span class="attr">"version"</span> : <span class="string">"1.2.3"</span></span><br><span class="line">, <span class="attr">"description"</span> : <span class="string">"A packaged foo fooer for fooing foos"</span></span><br><span class="line">, <span class="attr">"main"</span> : <span class="string">"foo.js"</span></span><br><span class="line">, <span class="attr">"man"</span> : <span class="string">"./man/doc.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过man foo命令会得到 ./man/doc.1 文件的内容。<br>如果man文件名称不是以模块名称开头的，安装的时候会给加上模块名称前缀。因此，下面这段配置：   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"foo"</span></span><br><span class="line">, <span class="attr">"version"</span> : <span class="string">"1.2.3"</span></span><br><span class="line">, <span class="attr">"description"</span> : <span class="string">"A packaged foo fooer for fooing foos"</span></span><br><span class="line">, <span class="attr">"main"</span> : <span class="string">"foo.js"</span></span><br><span class="line">, <span class="attr">"man"</span> : [ <span class="string">"./man/foo.1"</span>, <span class="string">"./man/bar.1"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会创建一些文件来作为man foo和man foo-bar命令的结果。<br>man文件必须以数字结尾，或者如果被压缩了，以.gz结尾。数字表示文件将被安装到man的哪个部分。   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"foo"</span></span><br><span class="line">, <span class="attr">"version"</span> : <span class="string">"1.2.3"</span></span><br><span class="line">, <span class="attr">"description"</span> : <span class="string">"A packaged foo fooer for fooing foos"</span></span><br><span class="line">, <span class="attr">"main"</span> : <span class="string">"foo.js"</span></span><br><span class="line">, <span class="attr">"man"</span> : [ <span class="string">"./man/foo.1"</span>, <span class="string">"./man/foo.2"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会创建 man foo 和 man 2 foo 两条命令。   </p><h1 id="directories"><a href="#directories" class="headerlink" title="directories"></a>directories</h1><p>CommonJs通过directories来制定一些方法来描述模块的结构，看看npm的package.json文件<a href="https://registry.npmjs.org/npm/latest" target="_blank" rel="noopener">https://registry.npmjs.org/npm/latest</a> ，可以发现里边有这个字段的内容。   </p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">directories:</span> &#123;</span><br><span class="line"><span class="symbol">bin:</span> <span class="string">"./bin"</span>,</span><br><span class="line"><span class="symbol">doc:</span> <span class="string">"./doc"</span>,</span><br><span class="line"><span class="class"><span class="keyword">lib</span>: "./<span class="title">lib</span>",</span></span><br><span class="line"><span class="symbol">man:</span> <span class="string">"./man"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前这个配置没有任何作用，将来可能会整出一些花样来。   </p><h2 id="directories-lib"><a href="#directories-lib" class="headerlink" title="directories.lib"></a>directories.lib</h2><p>告诉用户模块中lib目录在哪，这个配置目前没有任何作用，但是对使用模块的人来说是一个很有用的信息。    </p><h2 id="directories-bin"><a href="#directories-bin" class="headerlink" title="directories.bin"></a>directories.bin</h2><p>如果你在这里指定了bin目录，这个配置下面的文件会被加入到bin路径下，如果你已经在package.json中配置了bin目录，那么这里的配置将不起任何作用。  </p><h2 id="directories-man"><a href="#directories-man" class="headerlink" title="directories.man"></a>directories.man</h2><p>指定一个目录，目录里边都是man文件，这是一种配置man文件的语法糖。   </p><h2 id="directories-doc"><a href="#directories-doc" class="headerlink" title="directories.doc"></a>directories.doc</h2><p>在这个目录里边放一些markdown文件，可能最终有一天它们会被友好的展现出来（应该是在npm的网站上）   </p><h2 id="directories-example"><a href="#directories-example" class="headerlink" title="directories.example"></a>directories.example</h2><p>放一些示例脚本，或许某一天会有用 - -！   </p><h1 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h1><p>指定一个代码存放地址，对想要为你的项目贡献代码的人有帮助。像这样：   </p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"repository"</span> :</span><br><span class="line">  &#123; <span class="string">"type"</span> : <span class="string">"git"</span></span><br><span class="line">  , <span class="string">"url"</span> : <span class="string">"https://github.com/npm/npm.git"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"repository"</span> :</span><br><span class="line">  &#123; <span class="string">"type"</span> : <span class="string">"svn"</span></span><br><span class="line">  , <span class="string">"url"</span> : <span class="string">"https://v8.googlecode.com/svn/trunk/"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>若你的模块放在GitHub, GitHub gist, Bitbucket, or GitLab的仓库里，npm install的时候可以使用缩写标记来完成：    </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"repository"</span>: <span class="string">"npm/npm"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"repository"</span>: <span class="string">"gist:11081aaa281"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"repository"</span>: <span class="string">"bitbucket:example/repo"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"repository"</span>: <span class="string">"gitlab:another/repo"</span></span><br></pre></td></tr></table></figure><h1 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h1><p>scripts属性是一个对象，里边指定了项目的生命周期个各个环节需要执行的命令。key是生命周期中的事件，value是要执行的命令。<br>具体的内容有 install  start  stop 等，详见<a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="noopener"> https://docs.npmjs.com/misc/scripts</a>     </p><h1 id="config"><a href="#config" class="headerlink" title="config"></a>config</h1><p>用来设置一些项目不怎么变化的项目配置，例如port等。<br>用户用的时候可以使用如下用法：  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">http</span><span class="selector-class">.createServer</span>(...)<span class="selector-class">.listen</span>(<span class="selector-tag">process</span><span class="selector-class">.env</span><span class="selector-class">.npm_package_config_port</span>)</span><br></pre></td></tr></table></figure><p>可以通过npm config set foo:port 80来修改config。详见<a href="https://docs.npmjs.com/misc/config" target="_blank" rel="noopener">https://docs.npmjs.com/misc/config</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"foo"</span></span><br><span class="line">, <span class="attr">"config"</span> : &#123; <span class="attr">"port"</span> : <span class="string">"8080"</span> &#125; &#125;</span><br></pre></td></tr></table></figure><h1 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h1><p>dependencies属性是一个对象，配置模块依赖的模块列表，key是模块名称，value是版本范围，版本范围是一个字符，可以被一个或多个空格分割。<br>dependencies也可以被指定为一个git地址或者一个压缩包地址。<br>不要把测试工具或transpilers写到dependencies中。 下面是一些写法，详见<a href="https://docs.npmjs.com/misc/semver" target="_blank" rel="noopener">https://docs.npmjs.com/misc/semver </a>    </p><ul><li><code>version</code> 精确匹配版本   </li><li><code>&gt;version</code> 必须大于某个版本   </li><li><code>&gt;=version</code> 大于等于   </li><li><code>&lt;version</code> 小于      </li><li><code>&lt;=version</code> 小于等于     </li><li><code>~version</code> “约等于”，具体规则详见semver文档   </li><li><code>^version</code> “兼容版本”具体规则详见semver文档   </li><li><code>1.2.x</code> 仅一点二点几的版本   </li><li><code>http://...</code> 见下面url作为denpendencies的说明   </li><li><code>*</code>  任何版本   </li><li><code>&quot;&quot;</code>  空字符，和*相同   </li><li><code>version1 - version2</code> 相当于 <code>&gt;=version1 &lt;=version2</code>.   </li><li><code>range1 || range2</code>  范围1和范围2满足任意一个都行   </li><li><code>git...</code>  见下面git url作为denpendencies的说明   </li><li><code>user/repo</code> See  见下面GitHub仓库的说明   </li><li><code>tag</code>  发布的一个特殊的标签，见npm-tag的文档 <a href="https://docs.npmjs.com/getting-started/using-tags" target="_blank" rel="noopener">https://docs.npmjs.com/getting-started/using-tags</a>   </li><li><code>path/path/path</code>  见下面本地模块的说明<br>下面的写法都是可以的:   </li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"dependencies"</span> :</span><br><span class="line">  &#123; <span class="attr">"foo"</span> : <span class="string">"1.0.0 - 2.9999.9999"</span></span><br><span class="line">  , <span class="attr">"bar"</span> : <span class="string">"&gt;=1.0.2 &lt;2.1.2"</span></span><br><span class="line">  , <span class="attr">"baz"</span> : <span class="string">"&gt;1.0.2 &lt;=2.3.4"</span></span><br><span class="line">  , <span class="attr">"boo"</span> : <span class="string">"2.0.1"</span></span><br><span class="line">  , <span class="attr">"qux"</span> : <span class="string">"&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0"</span></span><br><span class="line">  , <span class="attr">"asd"</span> : <span class="string">"http://asdf.com/asdf.tar.gz"</span></span><br><span class="line">  , <span class="attr">"til"</span> : <span class="string">"~1.2"</span></span><br><span class="line">  , <span class="attr">"elf"</span> : <span class="string">"~1.2.3"</span></span><br><span class="line">  , <span class="attr">"two"</span> : <span class="string">"2.x"</span></span><br><span class="line">  , <span class="attr">"thr"</span> : <span class="string">"3.3.x"</span></span><br><span class="line">  , <span class="attr">"lat"</span> : <span class="string">"latest"</span></span><br><span class="line">  , <span class="attr">"dyl"</span> : <span class="string">"file:../dyl"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="URLs-as-Dependencies"><a href="#URLs-as-Dependencies" class="headerlink" title="URLs as Dependencies"></a>URLs as Dependencies</h1><p>在版本范围的地方可以写一个url指向一个压缩包，模块安装的时候会把这个压缩包下载下来安装到模块本地。   </p><h1 id="Git-URLs-as-Dependencies"><a href="#Git-URLs-as-Dependencies" class="headerlink" title="Git URLs as Dependencies"></a>Git URLs as Dependencies</h1><p>Git url可以像下面一样:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git://github.com/user/<span class="keyword">project</span>.git<span class="comment">#commit-ish</span></span><br><span class="line">git+ssh://user@hostname:<span class="keyword">project</span>.git<span class="comment">#commit-ish</span></span><br><span class="line">git+ssh://user@hostname/<span class="keyword">project</span>.git<span class="comment">#commit-ish</span></span><br><span class="line">git+http://user@hostname/<span class="keyword">project</span>/blah.git<span class="comment">#commit-ish</span></span><br><span class="line">git+https://user@hostname/<span class="keyword">project</span>/blah.git<span class="comment">#commit-ish</span></span><br></pre></td></tr></table></figure><p>commit-ish 可以是任意标签，哈希值，或者可以检出的分支，默认是master分支。   </p><h1 id="GitHub-URLs"><a href="#GitHub-URLs" class="headerlink" title="GitHub URLs"></a>GitHub URLs</h1><p>支持github的 username/modulename 的写法，#后边可以加后缀写明分支hash或标签：   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"visionmedia/express"</span>,</span><br><span class="line">    <span class="attr">"mocha"</span>: <span class="string">"visionmedia/mocha#4727d357ea"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Local-Paths"><a href="#Local-Paths" class="headerlink" title="Local Paths"></a>Local Paths</h1><p>npm2.0.0版本以上可以提供一个本地路径来安装一个本地的模块，通过npm install xxx –save 来安装，格式如下：   </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">..<span class="regexp">/foo/</span>bar</span><br><span class="line">~<span class="regexp">/foo/</span>bar</span><br><span class="line">.<span class="regexp">/foo/</span>bar</span><br><span class="line"><span class="regexp">/foo/</span>bar</span><br></pre></td></tr></table></figure><p>package.json 生成的相对路径如下:   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"baz"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"bar"</span>: <span class="string">"file:../foo/bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种属性在离线开发或者测试需要用npm install的情况，又不想自己搞一个npm server的时候有用，但是发布模块到公共仓库时不应该使用这种属性。   </p><h1 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h1><p>如果有人想要下载并使用你的模块，也许他们并不希望或需要下载一些你在开发过程中使用的额外的测试或者文档框架。<br>在这种情况下，最好的方法是把这些依赖添加到devDependencies属性的对象中。<br>这些模块会在npm link或者npm install的时候被安装，也可以像其他npm配置一样被管理，详见npm的config文档。<br>对于一些跨平台的构建任务，例如把CoffeeScript编译成JavaScript，就可以通过在package.json的script属性里边配置prepublish脚本来完成这个任务，然后需要依赖的coffee-script模块就写在devDependencies属性种。<br>例如:   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"name"</span>: <span class="string">"ethopia-waza"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"a delightfully fruity coffee varietal"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.2.3"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"coffee-script"</span>: <span class="string">"~1.6.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"prepublish"</span>: <span class="string">"coffee -o lib/ -c src/waza.coffee"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"lib/waza.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>prepublish脚本会在发布之前运行，因此用户在使用之前就不用再自己去完成编译的过程了。在开发模式下，运行npm install也会执行这个脚本（见npm script文档），因此可以很方便的调试。   </p><h1 id="peerDependencies"><a href="#peerDependencies" class="headerlink" title="peerDependencies"></a>peerDependencies</h1><p>有时候做一些插件开发，比如grunt等工具的插件，它们往往是在grunt的某个版本的基础上开发的，而在他们的代码中并不会出现require(“grunt”)这样的依赖，dependencies配置里边也不会写上grunt的依赖，为了说明此模块只能作为插件跑在宿主的某个版本范围下，可以配置peerDependencies：   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"tea-latte"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.3.5"</span>,</span><br><span class="line">  <span class="attr">"peerDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"tea"</span>: <span class="string">"2.x"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个配置确保再npm install的时候tea-latte会和2.x版本的tea一起安装，而且它们两个的依赖关系是同级的：<br>├── <a href="mailto:tea-latte@1.3.5" target="_blank" rel="noopener">tea-latte@1.3.5</a><br>└── <a href="mailto:tea@2.2.0" target="_blank" rel="noopener">tea@2.2.0</a><br>这个配置的目的是让npm知道，如果要使用此插件模块，请确保安装了兼容版本的宿主模块。   </p><h1 id="bundledDependencies"><a href="#bundledDependencies" class="headerlink" title="bundledDependencies"></a>bundledDependencies</h1><p>上面的单词少个d，写成bundleDependencies也可以。<br>指定发布的时候会被一起打包的模块。   </p><h1 id="optionalDependencies"><a href="#optionalDependencies" class="headerlink" title="optionalDependencies"></a>optionalDependencies</h1><p>如果一个依赖模块可以被使用， 同时你也希望在该模块找不到或无法获取时npm继续运行，你可以把这个模块依赖放到optionalDependencies配置中。这个配置的写法和dependencies的写法一样，不同的是这里边写的模块安装失败不会导致npm install失败。<br>当然，这种模块就需要你自己在代码中处理模块确实的情况了，例如：   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">'foo'</span>)</span><br><span class="line">  <span class="keyword">var</span> fooVersion = <span class="built_in">require</span>(<span class="string">'foo/package.json'</span>).version</span><br><span class="line">&#125; <span class="keyword">catch</span> (er) &#123;</span><br><span class="line">  foo = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( notGoodFooVersion(fooVersion) ) &#123;</span><br><span class="line">  foo = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .. then later in your program ..</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  foo.doFooThings()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>optionalDependencies 中的配置会覆盖dependencies中的配置，最好只在一个地方写。   </p><h1 id="engines"><a href="#engines" class="headerlink" title="engines"></a>engines</h1><p>你可以指定项目运行的node版本范围，如下：<br>{ “engines” : { “node” : “&gt;=0.10.3 &lt;0.12” } }<br>和dependencies一样，如果你不指定版本范围或者指定为*，任何版本的node都可以。<br>也可以指定一些npm版本可以正确的安装你的模块，例如：<br>{ “engines” : { “npm” : “~1.0.20” } }<br>要注意的是，除非你设置了engine-strict属性，engines属性是仅供参考的。   </p><h1 id="engineStrict"><a href="#engineStrict" class="headerlink" title="engineStrict"></a>engineStrict</h1><p>注意：这个属性已经弃用，将在npm 3.0.0 版本干掉。   </p><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><p>可以指定你的模块只能在哪个操作系统上跑：<br>“os” : [ “darwin”, “linux” ]<br>也可以指定黑名单而不是白名单：<br>“os” : [ “!win32” ]<br>服务的操作系统是由process.platform来判断的，这个属性允许黑白名单同时存在，虽然没啥必要这样搞…   </p><h1 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h1><p>限制模块只能在某某cpu架构下运行<br>“cpu” : [ “x64”, “ia32” ]<br>同样可以设置黑名单:<br>“cpu” : [ “!arm”, “!mips” ]<br>cpu架构通过 process.arch 判断   </p><h1 id="preferGlobal"><a href="#preferGlobal" class="headerlink" title="preferGlobal"></a>preferGlobal</h1><p>如果您的软件包主要用于安装到全局的命令行应用程序，那么该值设置为true ，如果它被安装在本地，则提供一个警告。实际上该配置并没有阻止用户把模块安装到本地，只是防止该模块被错误的使用引起一些问题。   </p><h1 id="private"><a href="#private" class="headerlink" title="private"></a>private</h1><p>如果这个属性被设置为true，npm将拒绝发布它，这是为了防止一个私有模块被无意间发布出去。如果你只想让模块被发布到一个特定的npm仓库，如一个内部的仓库，可与在下面的publishConfig中配置仓库参数。  </p><h1 id="publishConfig"><a href="#publishConfig" class="headerlink" title="publishConfig"></a>publishConfig</h1><p>这个配置是会在模块发布时用到的一些值的集合。如果你不想模块被默认被标记为最新的，或者默认发布到公共仓库，可以在这里配置tag或仓库地址。  </p><h1 id="DEFAULT-VALUES"><a href="#DEFAULT-VALUES" class="headerlink" title="DEFAULT VALUES"></a>DEFAULT VALUES</h1><p>npm设置了一些默认参数，如：<br>“scripts”: {“start”: “node server.js”}<br>如果模块根目录下有一个server.js文件，那么npm start会默认运行这个文件。<br>“scripts”:{“preinstall”: “node-gyp rebuild”}<br>如果模块根目录下有binding.gyp, npm将默认用node-gyp来编译preinstall的脚本<br>“contributors”: […]<br>若模块根目录下有AUTHORS 文件，则npm会按Name <email> (url)格式解析每一行的数据添加到contributors中，可以用#添加行注释   </email></p><h1 id="参考文档列表-https-docs-npmjs-com"><a href="#参考文档列表-https-docs-npmjs-com" class="headerlink" title="参考文档列表(https://docs.npmjs.com/)"></a>参考文档列表(<a href="https://docs.npmjs.com/" target="_blank" rel="noopener">https://docs.npmjs.com/</a>)</h1><p>semver(7)<br>npm-init(1)<br>npm-version(1)<br>npm-config(1)<br>npm-config(7)<br>npm-help(1)<br>npm-faq(7)<br>npm-install(1)<br>npm-publish(1)<br>npm-rm(1)   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;本文档的内容是package.json配置里边的属性含义。package.json必须是一个严格的json文件，而不仅仅是js里边的一个对象
      
    
    </summary>
    
      <category term="Node.js" scheme="https://blog.loong.io/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://blog.loong.io/tags/Node-js/"/>
    
      <category term="NPM" scheme="https://blog.loong.io/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令大全</title>
    <link href="https://blog.loong.io/2018/07/08/linux/"/>
    <id>https://blog.loong.io/2018/07/08/linux/</id>
    <published>2018-07-08T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.301Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，大部分人接触Linux的机会并不多，对Linux平台下的开发更是一无所知。而现在的发展趋势却越来越表明：无论是作为一个优秀的软件开发人员，或是互联网、IT行业的从业人员，掌握Linux是一种很重要的谋生资源与手段，很多迹象表明这是一个很好的加分项。</p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><ul><li><p><code>ls</code>　　        显示文件或目录</p><ul><li><p><code>-l</code>           列出文件详细信息l(list)</p></li><li><p><code>-a</code>          列出当前目录下所有文件及目录，包括隐藏的a(all)</p></li></ul></li><li><p><code>mkdir</code>         创建目录</p><ul><li><code>-p</code>           创建目录，若无父目录，则创建p(parent)</li></ul></li></ul><ul><li><p><code>cd</code>               切换目录</p></li><li><p><code>touch</code>          创建空文件</p></li><li><p><code>echo</code>            创建带有内容的文件。</p></li><li><p><code>cat</code>              查看文件内容</p></li><li><p><code>cp</code>                拷贝</p></li><li><p><code>mv</code>               移动或重命名</p></li><li><p><code>rm</code>               删除文件</p><ul><li><p><code>-r</code>          递归删除，可删除子目录及文件</p></li><li><p><code>-f</code>            强制删除</p></li></ul></li><li><p><code>find</code>              在文件系统中搜索某文件</p></li><li><p><code>wc</code>                统计文本中行数、字数、字符数</p></li><li><p><code>grep</code>             在文本文件中查找某个字符串</p></li><li><p><code>rmdir</code>           删除空目录</p></li><li><p><code>tree</code>             树形结构显示目录，需要安装tree包</p></li><li><p><code>pwd</code>              显示当前目录</p></li><li><p><code>ln</code>                  创建链接文件</p></li><li><p><code>more、less</code>  分页显示文本文件内容</p></li><li><p><code>head、tail</code>    显示文件头、尾内容</p></li><li><p><code>ctrl+alt+F1</code>  命令行全屏模式</p></li></ul><h1 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h1><ul><li><p><code>stat</code>              显示指定文件的详细信息，比ls更详细</p></li><li><p><code>who</code>               显示在线登陆用户</p></li><li><p><code>whoami</code>          显示当前操作用户</p></li><li><p><code>hostname</code>      显示主机名</p></li><li><p><code>uname</code>           显示系统信息</p></li><li><p><code>top</code>                动态显示当前耗费资源最多进程信息</p></li><li><p><code>ps</code>                  显示瞬间进程状态 ps -aux</p></li><li><p><code>du</code>                  查看目录大小 du -h /home带有单位显示目录信息</p></li><li><p><code>df</code>                  查看磁盘大小 df -h 带有单位显示磁盘信息</p></li><li><p><code>ifconfig</code>          查看网络情况</p></li><li><p><code>ping</code>               测试网络连通</p></li><li><p><code>netstat</code>          显示网络状态信息</p></li><li><p><code>man</code>                命令不会用了，找男人  如：man ls</p></li><li><p><code>clear</code>              清屏</p></li><li><p><code>alias</code>               对命令重命名 如：alias showmeit=”ps -aux” ，另外解除使用unaliax showmeit</p></li><li><p><code>kill</code>                 杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。</p></li></ul><h1 id="打包压缩相关命令"><a href="#打包压缩相关命令" class="headerlink" title="打包压缩相关命令"></a>打包压缩相关命令</h1><ul><li><p><code>gzip</code>：</p></li><li><p><code>bzip2</code>：</p></li><li><p><code>tar</code>:                打包压缩</p><ul><li><p><code>-c</code>              归档文件</p></li><li><p><code>-x</code>              压缩文件</p></li><li><p><code>-z</code>              gzip压缩文件</p></li><li><p><code>-j</code>             bzip2压缩文件</p></li><li><p><code>-v</code>              显示压缩或解压缩过程 v(view)</p></li><li><p><code>-f</code>              使用档名</p></li></ul></li></ul><p>例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf /home/abc<span class="selector-class">.tar</span> /home/abc              <span class="comment">//只打包，不压缩</span></span><br><span class="line"></span><br><span class="line">tar -zcvf /home/abc<span class="selector-class">.tar</span><span class="selector-class">.gz</span> /home/abc        <span class="comment">//打包，并用gzip压缩</span></span><br><span class="line"></span><br><span class="line">tar -jcvf /home/abc<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> /home/abc      <span class="comment">//打包，并用bzip2压缩</span></span><br></pre></td></tr></table></figure><blockquote><p>当然，如果想解压缩，就直接替换上面的命令  tar -cvf  / tar -zcvf  / tar -jcvf 中的“c” 换成“x” 就可以了。</p></blockquote><h1 id="关机-重启机器"><a href="#关机-重启机器" class="headerlink" title="关机/重启机器"></a>关机/重启机器</h1><ul><li><p><code>shutdown</code></p><ul><li><p><code>-r</code>             关机重启</p></li><li><p><code>-h</code>             关机不重启</p></li><li><p><code>now</code>         立刻关机</p></li></ul></li><li><p><code>halt</code>               关机</p></li><li><p><code>reboot</code>          重启</p></li></ul><h1 id="Linux管道"><a href="#Linux管道" class="headerlink" title="Linux管道"></a>Linux管道</h1><p>将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。</p><p>例：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> -r <span class="string">"close"</span> <span class="regexp">/home/</span>* | more       <span class="comment">//在home目录下所有文件中查找，包括close的文件，并分页输出。</span></span><br></pre></td></tr></table></figure><h1 id="Linux软件包管理"><a href="#Linux软件包管理" class="headerlink" title="Linux软件包管理"></a>Linux软件包管理</h1><p>dpkg (Debian Package)管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。</p><p>比如安装tree命令的安装包，先将tree.deb传到Linux系统中。再使用如下命令安装。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -<span class="selector-tag">i</span> tree_1.<span class="number">5.3</span>-<span class="number">1</span>_i386<span class="selector-class">.deb</span>         <span class="comment">//安装软件</span></span><br><span class="line"></span><br><span class="line">sudo dpkg -r tree                          <span class="comment">// 卸载软件</span></span><br></pre></td></tr></table></figure><blockquote><p>注：将tree.deb传到Linux系统中，有多种方式。VMwareTool，使用挂载方式；使用winSCP工具等；</p></blockquote><p>APT（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。</p><p>依然以tree为例</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install tree                    <span class="comment">//     安装tree</span></span><br><span class="line"></span><br><span class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> tree                       <span class="comment">//卸载tree</span></span><br><span class="line"></span><br><span class="line">sudo apt-<span class="built_in">get</span> update                              <span class="comment">//   更新软件</span></span><br><span class="line"></span><br><span class="line">sudo apt-<span class="built_in">get</span> upgrade</span><br></pre></td></tr></table></figure><p>将.rpm文件转为.deb文件</p><p>.rpm为RedHat使用的软件格式。在Ubuntu下不能直接使用，所以需要转换一下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">alien</span> <span class="selector-tag">abc</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><h1 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h1><p>vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。</p><p>命令模式下：</p><ul><li><p><code>:q</code>                      退出</p></li><li><p><code>:q!</code>                     强制退出</p></li><li><p><code>:wq</code>                   保存并退出</p></li><li><p><code>:set number</code>     显示行号</p></li><li><p><code>:set nonumber</code>  隐藏行号</p></li><li><p><code>/apache</code>            在文档中查找apache 按n跳到下一个，shift+n上一个</p></li><li><p><code>yyp</code>                   复制光标所在行，并粘贴</p></li><li><p><code>h</code>(左移一个字符←)、<code>j</code>(下一行↓)、<code>k</code>(上一行↑)、<code>l</code>(右移一个字符→)</p></li></ul><h1 id="用户及用户组管理"><a href="#用户及用户组管理" class="headerlink" title="用户及用户组管理"></a>用户及用户组管理</h1><ul><li><p><code>/etc/passwd</code>    存储用户账号</p></li><li><p><code>/etc/group</code>       存储组账号</p></li><li><p><code>/etc/shadow</code>    存储用户账号的密码</p></li><li><p><code>/etc/gshadow</code>  存储用户组账号的密码</p></li><li><p><code>useradd</code> 用户名</p></li><li><p><code>userdel</code> 用户名</p></li><li><p><code>adduser</code> 用户名</p></li><li><p><code>groupadd</code> 组名</p></li><li><p><code>groupde</code>l 组名</p></li><li><p><code>passwd root</code>     给root设置密码</p></li><li><p><code>su root</code></p></li><li><p><code>su - root</code></p></li><li><p><code>/etc/profile</code>     系统环境变量</p></li><li><p><code>bash_profile</code>     用户环境变量</p></li><li><p><code>.bashrc</code>             用户环境变量</p></li><li><p><code>su user</code>              切换用户，加载配置文件.bashrc</p></li><li><p><code>su - user</code>            切换用户，加载配置文件/etc/profile ，加载bash_profile</p></li></ul><h2 id="更改文件的用户及用户组"><a href="#更改文件的用户及用户组" class="headerlink" title="更改文件的用户及用户组"></a>更改文件的用户及用户组</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown <span class="string">[-R]</span> owner<span class="string">[:group]</span> &#123;File|Directory&#125;</span><br></pre></td></tr></table></figure><p>例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop</p><p>要想切换此文件所属的用户及组。可以使用命令。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">chown</span> <span class="selector-tag">root</span><span class="selector-pseudo">:root</span> <span class="selector-tag">jdk-7u21-linux-i586</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><h1 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h1><p>三种基本权限</p><ul><li><p>r           读         数值表示为4</p></li><li><p>w         写         数值表示为2</p></li><li><p>x           可执行  数值表示为1</p></li></ul><p>如图所示，jdk-7u21-linux-i586.tar.gz文件的权限为-rw-rw-r–</p><p><img src="http://oujvmc3la.bkt.clouddn.com/091549405142313.png" alt></p><p>-rw-rw-r–一共十个字符，分成四段。</p><p>第一个字符<code>-</code>表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录</p><p>第二三四个字符<code>rw-</code>表示当前所属用户的权限。   所以用数值表示为4+2=6</p><p>第五六七个字符<code>rw-</code>表示当前所属组的权限。      所以用数值表示为4+2=6</p><p>第八九十个字符<code>r--</code>表示其他用户权限。              所以用数值表示为4</p><p>所以操作此文件的权限用数值表示为664</p><h2 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="string">[u所属用户  g所属组  o其他用户  a所有用户]</span>  <span class="string">[+增加权限  -减少权限]</span>  <span class="string">[r  w  x]</span>   目录名</span><br></pre></td></tr></table></figure><p>例如：有一个文件filename，权限为“-rw-r—-x” ,将权限值改为”-rwxrw-r-x”，用数值表示为765</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod u+<span class="keyword">x</span> g+w o+r  filename</span><br></pre></td></tr></table></figure><p>上面的例子可以用数值表示</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">765</span> filename</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般情况下，大部分人接触Linux的机会并不多，对Linux平台下的开发更是一无所知。而现在的发展趋势却越来越表明：无论是作为一个优秀的软件开发人员，或是互联网、IT行业的从业人员，掌握Linux是一种很重要的谋生资源与手段，很多迹象表明这是一个很好的加分项。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="Linux" scheme="https://blog.loong.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.loong.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深度克隆</title>
    <link href="https://blog.loong.io/2018/07/08/deepcopy/"/>
    <id>https://blog.loong.io/2018/07/08/deepcopy/</id>
    <published>2018-07-08T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.282Z</updated>
    
    <content type="html"><![CDATA[<p>在JAVAScript中数据类型分为两种，一种是原始数据类型，另外一种就是引用数据类型。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote><p>原始数据类型：其中存储的是对象的实际地址。<code>unmber</code>、<code>string</code>、<code>boolean</code>和两个特殊的<code>null</code>、<code>underfined</code>。</p></blockquote><blockquote><p>引用数据类型：其中存储的是对象的引用地址。<code>array</code>、<code>function</code>、<code>object</code>。</p></blockquote><h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><p>对于原始数据类型而言，通过简单的赋值操作，就可以实现深度克隆。例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = <span class="string">'world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>在上面可以看到把<code>a</code>赋值给<code>b</code>，<code>b</code>改变之后完全没有影响到<code>a</code>。</p></blockquote><blockquote><p>但是引用类型不一样，它存储的是对象的引用地址。就会导致以下的问题产生</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单的使用数组进行实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">//[1,2,3]</span></span><br><span class="line">b.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">//[1,2,3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><blockquote><p>从以上的代码可以看到把<code>a</code>的值赋给了<code>b</code>,<code>b</code>改变之后影响到了<code>a</code>。这是为什么呢？</p></blockquote><blockquote><p>由于引用类型数据存储在应用地址内存中，因此赋值复制的也是这一块地址，因此相当于两个数组对象引用了一块数据地址，所以对a或者b的任何操作或者改变都会体现在对象中。</p></blockquote><blockquote><p>为了避免这种情况，引入了深度克隆。</p></blockquote><h1 id="解决方案：深度克隆"><a href="#解决方案：深度克隆" class="headerlink" title="解决方案：深度克隆"></a>解决方案：深度克隆</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> buf;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">            buf = [];</span><br><span class="line">            <span class="keyword">var</span> i = obj.length;</span><br><span class="line">            <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">                buf[i] = clone(obj[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> buf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">            buf = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">                buf[k] = clone(obj[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> buf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>或者精简的写法(递归)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)</span><br><span class="line">    o[k] = <span class="keyword">typeof</span> obj[k] === <span class="built_in">Object</span> ? clone(obj[k]) : obj[k];</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]];</span><br><span class="line"><span class="keyword">var</span> b = clone(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在JAVAScript中数据类型分为两种，一种是原始数据类型，另外一种就是引用数据类型。&lt;/p&gt;
&lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>NPM 国内慢的问题解决</title>
    <link href="https://blog.loong.io/2018/06/26/npm/"/>
    <id>https://blog.loong.io/2018/06/26/npm/</id>
    <published>2018-06-26T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.279Z</updated>
    
    <content type="html"><![CDATA[<p>NPM 是随同 NodeJS 一起安装的包管理工具，我们经常使用它来下载第三方包到本地。<br>但在使用 NPM 过程很多人估计都知道，在国内下载第三方包的速度极其之慢。<br>下面是我整理的几种比较好用的解决办法。</p><p>#　淘宝NPM镜像(cnpm)</p><p>它是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br>淘宝 NPM 镜像地址：<a href="https://npm.taobao.org" target="_blank" rel="noopener">https://npm.taobao.org</a></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>你可以使用淘宝 NPM 镜像定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> install -g cnpm --registry=https:<span class="regexp">//</span>registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure><p>这样就可以使用 cnpm 命令来安装模块了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cnpm install [name]</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>安装 Express 开发框架：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cnpm install express</span></span><br></pre></td></tr></table></figure><h1 id="npm源管理工具"><a href="#npm源管理工具" class="headerlink" title="npm源管理工具"></a>npm源管理工具</h1><p>nrm 是一个 NPM 源管理器，允许你快速地在 NPM 源间切换。</p><p>开源地址:<a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">https://github.com/Pana/nrm</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>基于 npm ,全局安装以后,你开源无缝快速切换几个源,提高下载速度,拒绝 loading !</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm  install   -g   nrm</span></span><br></pre></td></tr></table></figure><h2 id="使用说明-1"><a href="#使用说明-1" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="列出可用的源："><a href="#列出可用的源：" class="headerlink" title="列出可用的源："></a>列出可用的源：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">nrm</span> <span class="string">ls</span></span><br><span class="line"></span><br><span class="line"> <span class="string">*</span> <span class="string">npm</span> <span class="bullet">----</span> <span class="attr">https://registry.npmjs.org/</span></span><br><span class="line"> <span class="string">cnpm</span> <span class="meta">---</span> <span class="attr">http://r.cnpmjs.org/</span></span><br><span class="line"> <span class="string">taobao</span> <span class="bullet">-</span> <span class="attr">https://registry.npm.taobao.org/</span></span><br><span class="line"> <span class="string">nj</span> <span class="bullet">-----</span> <span class="attr">https://registry.nodejitsu.com/</span></span><br><span class="line"> <span class="string">rednpm</span> <span class="bullet">-</span> <span class="attr">http://registry.mirror.cqupt.edu.cn/</span></span><br><span class="line"> <span class="string">npmMirror</span>  <span class="attr">https://skimdb.npmjs.com/registry/</span></span><br><span class="line"> <span class="string">edunpm</span> <span class="bullet">-</span> <span class="attr">http://registry.enpmjs.org/</span></span><br></pre></td></tr></table></figure><h3 id="切换源"><a href="#切换源" class="headerlink" title="切换源"></a>切换源</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nrm <span class="keyword">use</span> taobao</span><br><span class="line">                        verb config Skipping <span class="keyword">project</span> config: C:\<span class="keyword">Users</span>\<span class="keyword">user</span>/.npmrc. (matches userconfig)</span><br><span class="line"></span><br><span class="line">  Registry has been <span class="keyword">set</span> <span class="keyword">to</span>: https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><h3 id="增加源："><a href="#增加源：" class="headerlink" title="增加源："></a>增加源：</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nrm <span class="built_in">add</span> <span class="symbol">&lt;registry&gt;</span> <span class="symbol">&lt;url&gt;</span> [home]</span><br></pre></td></tr></table></figure><h3 id="删除源："><a href="#删除源：" class="headerlink" title="删除源："></a>删除源：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nrm del &lt;registry&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试速度："><a href="#测试速度：" class="headerlink" title="测试速度："></a>测试速度：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">nrm</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="string">npm</span> <span class="bullet">----</span> <span class="number">1177</span><span class="string">ms</span></span><br><span class="line"><span class="string">cnpm</span> <span class="meta">---</span> <span class="number">236</span><span class="string">ms</span></span><br><span class="line"><span class="string">*</span> <span class="string">taobao</span> <span class="bullet">-</span> <span class="number">173</span><span class="string">ms</span></span><br><span class="line"><span class="string">nj</span> <span class="bullet">-----</span> <span class="string">Fetch</span> <span class="string">Error</span></span><br><span class="line"><span class="string">rednpm</span> <span class="bullet">-</span> <span class="string">Fetch</span> <span class="string">Error</span></span><br><span class="line"><span class="string">npmMirror</span>  <span class="number">3013</span><span class="string">ms</span></span><br><span class="line"><span class="string">edunpm</span> <span class="bullet">-</span> <span class="string">Fetch</span> <span class="string">Error</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是我认为在解决npm慢的几种方法中比较简单易操作的两种方法。</p><p>在以上两种方法中，我比较倾向的是第二种方法，可供选择的源更多，可操作空间大。</p><p>在速度测试中，没有使用vpn的情况下，明显<code>taobao</code>源是最为合适的选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;NPM 是随同 NodeJS 一起安装的包管理工具，我们经常使用它来下载第三方包到本地。&lt;br&gt;但在使用 NPM 过程很多人估计都知道，在国内下载第三方包的速度极其之慢。&lt;br&gt;下面是我整理的几种比较好用的解决办法。&lt;/p&gt;
&lt;p&gt;#　淘宝NPM镜像(cnpm)&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Node.js" scheme="https://blog.loong.io/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://blog.loong.io/tags/Node-js/"/>
    
      <category term="NPM" scheme="https://blog.loong.io/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>Linux Node.js安装方式</title>
    <link href="https://blog.loong.io/2018/06/22/node/"/>
    <id>https://blog.loong.io/2018/06/22/node/</id>
    <published>2018-06-22T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.278Z</updated>
    
    <content type="html"><![CDATA[<p>在linux下安装Nodejs有以下几种方式。我使用的是CentOS 7版本，其实linux下安装nodejs都大同小异。直接部署和通过nvm进行部署。</p><h1 id="直接部署"><a href="#直接部署" class="headerlink" title="直接部署"></a>直接部署</h1><h2 id="安装wegt（如果你有源码包，跳过该步骤）"><a href="#安装wegt（如果你有源码包，跳过该步骤）" class="headerlink" title="安装wegt（如果你有源码包，跳过该步骤）"></a>安装wegt（如果你有源码包，跳过该步骤）</h2><blockquote><p>CentOS</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> wget</span><br></pre></td></tr></table></figure><blockquote><p>ubuntu</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install wget</span><br></pre></td></tr></table></figure><blockquote><p>当然如果你已经安装了，跳过该步</p></blockquote><h2 id="下载适合你系统的Nodejs的源码包（如果你有源码包，跳过该步骤）"><a href="#下载适合你系统的Nodejs的源码包（如果你有源码包，跳过该步骤）" class="headerlink" title="下载适合你系统的Nodejs的源码包（如果你有源码包，跳过该步骤）"></a>下载适合你系统的Nodejs的源码包（如果你有源码包，跳过该步骤）</h2><p>可以在Nodejs官网的下载页面<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>中找到下载地址。然后执行指令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v8.<span class="number">11.3</span>/<span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.3</span>-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><p>然后就是等着下载完毕。<br>另外你也可以在你喜欢的任意系统上下载最新的bin包，然后通过FTP上传到Linux上。</p><h2 id="解压包"><a href="#解压包" class="headerlink" title="解压包"></a>解压包</h2><p>依次执行</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xz -d <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.3</span>-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">tar -xf <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.3</span>-linux-x64.tar</span><br></pre></td></tr></table></figure><h2 id="部署源码文件"><a href="#部署源码文件" class="headerlink" title="部署源码文件"></a>部署源码文件</h2><p>先确认你nodejs的路径，我这里的路径为<code>~/node-v8.11.3-linux-x64/bin</code>。确认后依次执行</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s ~/<span class="keyword">node</span><span class="title">-v9</span>.<span class="number">3.0</span>-linux-x64/bin/<span class="keyword">node</span> <span class="title">/usr</span>/bin/<span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title">ln</span> -s ~/<span class="keyword">node</span><span class="title">-v9</span>.<span class="number">3.0</span>-linux-x64/bin/npm /usr/bin/npm</span><br></pre></td></tr></table></figure><p>注意ln指令用于创建关联（类似与Windows的快捷方式）必须给全路径，否则可能关联错误。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>依次执行</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果正确输出版本号，则部署OK.</p><blockquote><p>这种安装的方法好处是比较干净，安装也比较快速。个人认为比较适合新手。</p></blockquote><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><blockquote><p>但是如果遇到nodejs插件全局安装时，即使安装成功，也不能调用相应命令，需要把npm全局安装模块所在的位置加到环境变量中，才能调用全局安装模块相应的命令。</p></blockquote><p>操作如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行以下命令，进入环境变量设置</span></span><br><span class="line">[root@localhost ~]# vim <span class="regexp">/etc/</span>profile</span><br><span class="line"></span><br><span class="line"><span class="comment">//在打开的文档中最后面加入，为nodejs/bin所在文件夹的绝对路径</span></span><br><span class="line">PATH=$PATH:<span class="regexp">/root/</span>node-v8.<span class="number">11.3</span>-linux-x64<span class="regexp">/bin/</span></span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入以下使环境变量生效</span></span><br><span class="line"><span class="keyword">source</span> <span class="regexp">/ect/</span>profile</span><br></pre></td></tr></table></figure><h1 id="间接方式下载"><a href="#间接方式下载" class="headerlink" title="间接方式下载"></a>间接方式下载</h1><p>Nodejs有一个版本管理工具<code>NVM</code>，这种方式是先下载<code>NVM</code>，然后通过<code>NVM</code>直接下载有史以来各种版本的<code>Nodejs</code>。</p><h2 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h2><p>如上所述</p><h2 id="安装NVM"><a href="#安装NVM" class="headerlink" title="安装NVM"></a>安装NVM</h2><p>具体的你可以看一下<code>NVM</code>的github源码库<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a>,文档中有详细的安装步骤。</p><p>这里就不多废话，直接就是安装。执行下面的命令。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/creationix/</span>nvm<span class="regexp">/v0.33.11/i</span>nstall.sh | bash</span><br></pre></td></tr></table></figure><p>执行完就算安装上了。</p><p>测试是否安装成功,执行下面的命令，有版本号输出即为成功。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">nvm</span> <span class="selector-tag">--version</span></span><br><span class="line">0<span class="selector-class">.33</span><span class="selector-class">.11</span></span><br></pre></td></tr></table></figure><h2 id="NVM切换源地址"><a href="#NVM切换源地址" class="headerlink" title="NVM切换源地址"></a>NVM切换源地址</h2><p>更换下载源(默认是从 <a href="http://nodejs.org/dist/" target="_blank" rel="noopener">http://nodejs.org/dist/</a> 下载的, 国外服务器, 必然很慢)：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NVM_NODEJS_ORG_MIRROR=</span>https://npm.taobao.org/mirrors/<span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><p>列出远程客户端Nodejs的所有版本,大概有几百行,最好是下载安装<code>LTS</code>版本，即长期支持版。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">nvm</span> <span class="selector-tag">ls-remote</span></span><br><span class="line">        <span class="selector-tag">v0</span><span class="selector-class">.1</span><span class="selector-class">.14</span></span><br><span class="line">        <span class="selector-tag">v0</span><span class="selector-class">.1</span><span class="selector-class">.15</span></span><br><span class="line">        <span class="selector-tag">v0</span><span class="selector-class">.1</span><span class="selector-class">.16</span></span><br><span class="line">        <span class="selector-tag">v0</span><span class="selector-class">.1</span><span class="selector-class">.17</span></span><br><span class="line">        <span class="selector-tag">v0</span><span class="selector-class">.1</span><span class="selector-class">.18</span></span><br><span class="line">        <span class="selector-tag">v0</span><span class="selector-class">.1</span><span class="selector-class">.19</span></span><br><span class="line">        <span class="selector-tag">v0</span><span class="selector-class">.1</span><span class="selector-class">.20</span></span><br><span class="line">        <span class="selector-tag">v0</span><span class="selector-class">.1</span><span class="selector-class">.21</span></span><br><span class="line">        <span class="selector-tag">v0</span><span class="selector-class">.1</span><span class="selector-class">.22</span></span><br><span class="line">        <span class="selector-tag">v0</span><span class="selector-class">.1</span><span class="selector-class">.23</span></span><br></pre></td></tr></table></figure><p>安装吧，输入下面的命令，一键安装吧！</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># nvm install v8.11.3  #安装指定版本的nodejs</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># nvm install stable  #安装最新稳定版 node</span></span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>依次执行</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果正确输出版本号，则部署OK.</p><blockquote><p>这种安装的方法好处是更加简单，没有后患。可能下载速度会很慢。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在linux下安装Nodejs有以下几种方式。我使用的是CentOS 7版本，其实linux下安装nodejs都大同小异。直接部署和通过nvm进行部署。&lt;/p&gt;
&lt;h1 id=&quot;直接部署&quot;&gt;&lt;a href=&quot;#直接部署&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Node.js" scheme="https://blog.loong.io/categories/Node-js/"/>
    
    
      <category term="Linux" scheme="https://blog.loong.io/tags/Linux/"/>
    
      <category term="Node.js" scheme="https://blog.loong.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Java 抽象类的定义以及使用</title>
    <link href="https://blog.loong.io/2018/03/08/java/"/>
    <id>https://blog.loong.io/2018/03/08/java/</id>
    <published>2018-03-08T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.277Z</updated>
    
    <content type="html"><![CDATA[<p>【90%的正规代码】在以后所有你进行的项目开发之中，绝对不要出现一个类去继承一个抽已经实现好的类，而只能继承我们的抽象类以及接口。</p><p>对象的多态性在于我们的一个方法的覆写，那么如果说现在子类没有去进行指定方法的覆写，这样的操作就有些不合乎要求的。所以如果要对子类的方法进行一些强制的要求就必须采用抽象类来解决。</p><h1 id="抽象类的基本概念"><a href="#抽象类的基本概念" class="headerlink" title="抽象类的基本概念"></a>抽象类的基本概念</h1><p>抽象类只是在普通类的基础上扩充了一些抽象方法而已。所谓的抽象方法指的 是只是盛名而未实现（没有方法体），的方法。所有的抽象方法必须使用我们的abstract关键字来进行定义，并且抽象方法所在的类也一定要使用abstract定义类，表示抽象类。</p><p>范例：定义一个抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"helloworld"</span>;  <span class="comment">//属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123; <span class="comment">//普通方法</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//&#123;&#125;为方法体，所有抽象方法上是不包含有方法体的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">现在可以发现抽象类就是比普通类多了一些抽象方法而已。</span><br><span class="line"></span><br><span class="line">抽象类中包含有抽象方法，而抽象方法与普通方法最大的区别在于其没有方法体 ，即：不知道具体的实现，而如果现在产生了实例化对象，则意味着可以调用类中的所有操作。</span><br><span class="line"></span><br><span class="line">对于抽象类的使用的原则：</span><br><span class="line"></span><br><span class="line">- 所有的抽象类必须要有子类；</span><br><span class="line">- 抽象类的子类（不是抽象类）必须覆写抽象类中的全部方法；</span><br><span class="line"></span><br><span class="line">&gt;方法覆写一定要考虑到权限问题：抽象方法可以使用任意权限，要求权限尽量都用<span class="keyword">public</span></span><br><span class="line"></span><br><span class="line">- 抽象类的对象可以通过对象多态性，利用子类为其实例化；                                                                  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">范例：使用抽象类</span><br><span class="line"></span><br><span class="line">```Java</span><br><span class="line"><span class="keyword">package</span> Abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"helloworld"</span>;  <span class="comment">//属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123; <span class="comment">//普通方法</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//&#123;&#125;为方法体，所有抽象方法上是不包含有方法体的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个子类只能够利用extends来继承抽象类，所以依然存在单继承局限</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;<span class="comment">//定义抽象类的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B();<span class="comment">//实例化子类对象</span></span><br><span class="line">        a.fun();   <span class="comment">//被子类覆写过的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从正常的开发角度来讲，以上的操作没有任何的问题，而且也是一种使用最多的形式，但是对于抽象类必须有一点说明，你以后可能会见到以下的一种使用形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"helloworld"</span>;  <span class="comment">//属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;<span class="comment">//定义抽象类的子类(内部类)</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">              System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123; <span class="comment">//普通方法</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//&#123;&#125;为方法体，所有抽象方法上是不包含有方法体的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        A a = A.getInstance();</span><br><span class="line">        a.fun();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此类模式属于非正常模式，但是对于一些封装性是有好处的。</p><h1 id="抽象类的相关规定"><a href="#抽象类的相关规定" class="headerlink" title="抽象类的相关规定"></a>抽象类的相关规定</h1><ol><li>抽象类只是比普通方法多了一些抽象方法的定义而已，所以在抽象类当中依然允许有提供有构造方法并且子类也会遵守子类对象的实例化流程。实例化子类对象前一定要先去调用父类的构造方法。</li></ol><p>范例：在抽象类中定义构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Abstract;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"++++++++++++++"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getInfo</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"**************"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果说现在父类中没有无参构造，那么子类就必须通过super()指明要调用的父类构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Abstract;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">         <span class="keyword">this</span>.age = age;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getInfo</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,String school)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name = "</span>+<span class="keyword">super</span>.getName()+<span class="string">",age = "</span>+<span class="keyword">super</span>.getAge()+<span class="string">",school = "</span> + <span class="keyword">this</span>.school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>,<span class="string">"实验一中"</span>);</span><br><span class="line">        System.out.println(per.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实抽象类中存在有我们的构造方法也很好理解，毕竟抽象类中还有属性，所有的属性都一定要在对象实例化的时候进行空间的开辟，那么对象的实例化必须要使用构造方法。</p><blockquote><p>额外话题：对于对象实例化<br>对象的实例化操作操作实际上需要以下的几个核心步骤：</p><blockquote><p>进行类的加载;</p></blockquote><blockquote><p>进行类对象的空间开辟；</p></blockquote><blockquote><p>进行类对象中的属性初始化（构造方法）；</p></blockquote><p>如果构造方法没有执行，那么对象属性都为其对应属性的默认值。</p></blockquote><ol start="2"><li>抽象类中允许不定义任何的抽象方法，但是此时抽象类对象依然无法进行直接的实例化处理。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A(); <span class="comment">//错误；A是抽象的，无法实例化；</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>抽象类一定不能使用final进行声明，因为用final声明的类不能够有子类，而抽象类必须要有子类；</li></ol><blockquote><p>抽象方法不能使用private进行定义，因为抽象方法必须被覆写；</p></blockquote><ol start="4"><li>抽象类也分为内部抽象类和外部抽象类，内部抽象类中可以使用<code>static</code>进行定义,描述为外部抽象类。</li></ol><p>范例：观察内部抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">pringA</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pringA</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果在外部类上使用了<code>static</code>那么就是语法错误，可内部抽象类上允许使用<code>static</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">pringA</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;   <span class="comment">//外部抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">extends</span> <span class="title">A</span>.<span class="title">B</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从一般的设计角度来讲，以上的问题很多时候并不会出现。</p><h1 id="抽象类的实际应用–模板设计模式"><a href="#抽象类的实际应用–模板设计模式" class="headerlink" title="抽象类的实际应用–模板设计模式"></a>抽象类的实际应用–模板设计模式</h1><p>抽象类的最大特点在于强制规定了子类的实现结构，那么除了这一特点之外，抽象类更多的情况下可以起到一个模板的作用，下面做一个简单的分析：</p><blockquote><p>人: 吃饭 + 睡觉 + 工作；</p></blockquote><blockquote><p>猪：吃饭 + 睡觉；</p></blockquote><blockquote><p>机器人 ：吃饭 + 工作；</p></blockquote><p>那么现在有一个按钮控制(方法),一旦传入了某些指令之后，就可以进行相应的处理；</p><p><img src="http://oujvmc3la.bkt.clouddn.com/abstract.PNG" alt></p><p>范例：定义抽象的行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EAT  = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SLEEP = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WORK = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">(<span class="keyword">int</span> cmd)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> EAT:</span><br><span class="line"><span class="keyword">this</span>.eat();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SLEEP:</span><br><span class="line"><span class="keyword">this</span>.sleep();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WORK:</span><br><span class="line"><span class="keyword">this</span>.work();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EAT + SLEEP:</span><br><span class="line"><span class="keyword">this</span>.eat();</span><br><span class="line">    <span class="keyword">this</span>.sleep();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EAT + SLEEP +WORK:</span><br><span class="line"><span class="keyword">this</span>.eat();</span><br><span class="line">    <span class="keyword">this</span>.sleep();</span><br><span class="line">    <span class="keyword">this</span>.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不清楚具体的实现，但是行为应该定义好</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例:定义各个行为的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"人要吃干净的饭！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"人要睡眠充足！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"人要努力工作！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"猪吃糠！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"猪睡觉！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"机器人要充电！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"机器人持续工作！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：调用各自的行为操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstractStudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EAT  = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SLEEP = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WORK = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">(<span class="keyword">int</span> cmd)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> EAT:</span><br><span class="line"><span class="keyword">this</span>.eat();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SLEEP:</span><br><span class="line"><span class="keyword">this</span>.sleep();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WORK:</span><br><span class="line"><span class="keyword">this</span>.work();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EAT + SLEEP:</span><br><span class="line"><span class="keyword">this</span>.eat();</span><br><span class="line">    <span class="keyword">this</span>.sleep();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EAT + SLEEP +WORK:</span><br><span class="line"><span class="keyword">this</span>.eat();</span><br><span class="line">    <span class="keyword">this</span>.sleep();</span><br><span class="line">    <span class="keyword">this</span>.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不清楚具体的实现，但是行为应该定义好</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"人要吃干净的饭！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"人要睡眠充足！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"人要努力工作！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"猪吃糠！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"猪睡觉！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"机器人要充电！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"机器人持续工作！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">fun(<span class="keyword">new</span> Human());</span><br><span class="line">fun(<span class="keyword">new</span> Pig());</span><br><span class="line">fun(<span class="keyword">new</span> Robot());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">a.command(A.EAT+A.SLEEP+A.WORK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际上通过此程序的定义结构你可以清楚的发现一个问题</p><blockquote><p>抽象类在实际的使用过程之中，会定义一些固化的模式，它只能接受几种特定的指令。</p></blockquote><blockquote><p>但是每种指令的具体实现由子类负责完成，父类只做了方法的约定。</p></blockquote><blockquote><p>最具有代表性的就是后面要学习的Servlet。</p></blockquote></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>抽象类虽然定义了子类必须要做的事情，但是抽象类依然会存在单继承局限；</li><li>抽象类的使用必须要通过子类进行对象实例化处理。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【90%的正规代码】在以后所有你进行的项目开发之中，绝对不要出现一个类去继承一个抽已经实现好的类，而只能继承我们的抽象类以及接口。&lt;/p&gt;
&lt;p&gt;对象的多态性在于我们的一个方法的覆写，那么如果说现在子类没有去进行指定方法的覆写，这样的操作就有些不合乎要求的。所以如果要对子类
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 覆写</title>
    <link href="https://blog.loong.io/2018/02/17/java/"/>
    <id>https://blog.loong.io/2018/02/17/java/</id>
    <published>2018-02-17T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.273Z</updated>
    
    <content type="html"><![CDATA[<p>现在已经继承了继承的基本概念，那么此时就有可能出现这样的这样的一种情况，如果子类定义与父类相同的方法或者是属性的时候，这样的操作就被称为覆写。</p><h1 id="方法的覆写（重点）"><a href="#方法的覆写（重点）" class="headerlink" title="方法的覆写（重点）"></a>方法的覆写（重点）</h1><p>所谓的方法覆写指的是子类定义了与父类方法名称，参数类型及个数完全相同的方法。但是被覆写的方法不能够拥有比我们的父类更为严格的访问控制权限。</p><p>范例：观察简单的覆写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 覆写;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【Person类】printInfo方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;<span class="comment">//现在Person类出现了一个子类</span></span><br><span class="line">    <span class="comment">//在你们编写代码中，99.999%的情况下子类的方法名称与父类中的方法名称是完全一致的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【Student类】printInfo方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.printInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以后进行覆写方法使用的时候一定要关注以下两点：</p><ul><li>你当前使用的对象是哪个类new的；</li><li>当调用一个方法，当该方法已经被子类覆写了，则调用的一定是被覆写过的方法；</li></ul><p>但是在进行方法覆写的时候也有一个明确的要求：被覆写的方法不能够拥有比父类更为严格的访问控制权限。关于访问控制权限才是封装的全部内容，现在已经接触过了3种访问控制权限：private &lt; default &lt; public;</p><p>那么也就意味着如果现在父类中的方法使用了<code>public</code>进行了定义,那么子类中使用的权限只能够是public，如果父类中使用的的default权限，那么子类中可以使用default或者是public。</p><blockquote><p>结论：以后写方法就写public，至少能保证你在99.999%的情况下是正确的，同时只要写属性，98%情况下都写private</p></blockquote><p>问题：如果现在父类的方法中使用了private定义，子类中使用了public覆写？</p><p>如果从概念上来讲，父类使用了private，子类使用了public，那么这属于权限扩大了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 覆写;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果父类中使用了private定义，那么就表示该方法只能被父类所使用，子类无法使用，也就是说子类根本不知道父类有这个方法</span></span><br><span class="line">        System.out.println(<span class="string">"【Person类】printInfo方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;<span class="comment">//现在Person类出现了一个子类</span></span><br><span class="line">    <span class="comment">//这个时候该方法只是子类定义的新方法而已，和父类没有任何关系。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【Student类】printInfo方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.printInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试题：请解释一下重载与覆写的区别？在进行重载的时候返回值是否可以不同</p><table><thead><tr><th>区别</th><th>重载</th><th>覆写</th></tr></thead><tbody><tr><td>英语单词</td><td>overloading</td><td>override</td></tr><tr><td>概念</td><td>方法名称相同，参数的类型以及个数不同</td><td>方法名称返回值类型，参数的类型以及个数完全相同</td></tr><tr><td>范围</td><td>发生在一个类之中</td><td>发生在继承关系之中</td></tr><tr><td>限制</td><td>没有限制</td><td>子类不能拥有比父类更为严格的访问控制权限</td></tr></tbody></table><p>方法重载的时候返回值可以不同，但是良好的设计要求返回类型一致。</p><h1 id="属性覆写（了解）"><a href="#属性覆写（了解）" class="headerlink" title="属性覆写（了解）"></a>属性覆写（了解）</h1><p>当子类定义了和父类属性名称完全相同的属性的时候就称之为属性的覆盖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 覆写;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String info = <span class="string">"fangcun.net"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;<span class="comment">//现在Person类出现了一个子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> info = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.printInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种操作本身是没有任何意义的，其核心的原因在于：所有类中的属性都要求使用private封装，那么一旦封装，不知道父类有哪些属性，覆盖属性也就没有任何意义了。</p><blockquote><p>结论：在定义属性的时候没事不要弄重名。</p></blockquote><h1 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h1><p>在之前讲解子类对象实例化的时候讲解过了<code>super()</code>的形式，当时的主要作用是由子类调用父类的构造方法的时候才使用的，那么在进行覆写的操作过程之中，子类也可以使用<code>super.方法()</code>和<code>super.属性</code>明确的调用父类中的属性和方法。</p><p>范例：观察一个程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 覆写;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果父类中使用了private定义，那么就表示该方法只能被父类所使用，子类无法使用，也就是说子类根本不知道父类有这个方法</span></span><br><span class="line">        System.out.println(<span class="string">"【Person类】printInfo方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;<span class="comment">//现在Person类出现了一个子类</span></span><br><span class="line">    <span class="comment">//这个时候该方法只是子类定义的新方法而已，和父类没有任何关系。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.printInfo();</span><br><span class="line">        System.out.println(<span class="string">"【Student类】printInfo方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.printInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时直接写上了<code>this.printInfo()</code>操作，那么就表示先从本类查找所需要的方法，如果本类没有，则去找父类中指定的方法进行调用。如果是<code>super.printInfo()</code>表示的是不查找本类而直接调用父类中的方法。</p><p>范例：观察调用父类属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 覆写;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String info = <span class="string">"fangcun.net"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;<span class="comment">//现在Person类出现了一个子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> info = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.info);<span class="comment">//调用父类属性</span></span><br><span class="line">        System.out.println(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.printInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现<code>super</code>和<code>this</code>使用形式上非常相似，但是两者最大的区别是<code>super</code>是子类访问父类的操作，而<code>this</code>是本类访问处理操作。</p><table><thead><tr><th>区别</th><th>this</th><th>super</th></tr></thead><tbody><tr><td>概念</td><td>访问本类中的属性和方法</td><td>由子类访问父类中的属性和方法</td></tr><tr><td>查找范围</td><td>先查找本类，如果本类中没有，则调用父类</td><td>不查找本类而直接查找父类</td></tr><tr><td>特殊</td><td>表示当前对象</td><td>-</td></tr></tbody></table><p>能使用super.方法()一定要明确的表示标记出是父类的操作。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>子类覆写父类的方法是因为父类的方法功能不足，才需要覆写；</li><li>方法覆写的时候使用的就是public权限，将父类的方法名称直接粘贴过来最为简单；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在已经继承了继承的基本概念，那么此时就有可能出现这样的这样的一种情况，如果子类定义与父类相同的方法或者是属性的时候，这样的操作就被称为覆写。&lt;/p&gt;
&lt;h1 id=&quot;方法的覆写（重点）&quot;&gt;&lt;a href=&quot;#方法的覆写（重点）&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 多态性</title>
    <link href="https://blog.loong.io/2018/02/17/java3/"/>
    <id>https://blog.loong.io/2018/02/17/java3/</id>
    <published>2018-02-17T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.276Z</updated>
    
    <content type="html"><![CDATA[<p>Java多态性</p><p>我们已经学习完了关于继承的所有概念，但是并不意味着只要使用继承就可以实现代码的全部重用，而在继承之后又有了一个重要的核心概念：多态性；</p><p>在Java里面对于多态的核心表现主要有以下两点：</p><p>1.方法的多态性</p><pre><code>- 方法的重载：同一个方法名称可以根据参数的类型及个数的不同调用不同的方法体；- 方法的覆写：同一个父类的方法，可能根据实例化子类的不同也有不同的实现；</code></pre><p>2.对象的多态性（前提：方法覆写）</p><pre><code>- 对象的向上转型（自动的，90%）：父类 父类对象 = 子类实例；- 对象的向下转型（强制的，1%）：子类 子类对象 = （子类）父类实例；- 9%不进行转型，例如String</code></pre><p>范例：回顾一个简单程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"【A】"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"【B】"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demp</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    B b = <span class="keyword">new</span> B();<span class="comment">//实例化子类对象</span></span><br><span class="line">    b.print();<span class="comment">//调用被覆写过的方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是我们可以将以上的代码进行进一步的变化，变为向上转型：</p><p>范例：实现向上转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"【A】"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"【B】"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demp</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> B();<span class="comment">//向上转型</span></span><br><span class="line">    a.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管是否发生了向上转型，其核心的本质还在于：你是用的是哪一个子类（new 在哪里），而后你调用的方法是否被子类所覆写了。</p><p>向下转型指的是将父类对象变为子类对象，但是在这之前必须先明白一个核心概念，为什么我们需要向下转型？当你使用到子类扩充操作的时候就要采用向下转型。</p><p>范例：观察向下转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"【A】"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"【B】"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;   <span class="comment">//这个方法只有子类有</span></span><br><span class="line">    System.out.print(<span class="string">"fun()"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demp</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> B();<span class="comment">//向上转型</span></span><br><span class="line">    a.print();</span><br><span class="line">    <span class="comment">//这个时候父类能够调用的方法只有本类定义好的方法print()，所以并没有B类中的fun()方法，那么只能够向下转型</span></span><br><span class="line">    B b = (B) a;<span class="comment">//向下转型</span></span><br><span class="line">    b.fun();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【此概念在开发中一般用不到】并不是所有的父类对象都可以向下转型，如果要想向下转型，一定要首先发生向上转型，否则在转型时会发生：ClassCastException。</p><p>范例：错误的转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"【A】"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"【B】"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;   <span class="comment">//这个方法只有子类有</span></span><br><span class="line">    System.out.print(<span class="string">"fun()"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demp</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> A();<span class="comment">//实例化父类对象</span></span><br><span class="line">    B b = (B) a;  <span class="comment">//强制转换</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上程序就会产生ClassCastException的错误。</p></blockquote><p>但是现在就有一个问题出现了，如果向下转型可能存在有隐患，那么如何转型才靠谱呢？最好的做法事先进行判断，而后在进行转型，那么就可以使用instanceof关键字来实现了，此关键字的使用语法如下：</p><ul><li><code>子类对象 instanceof 类</code>返回的是boolean数据</li></ul><p>范例：观察instanceof关键字的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> B();</span><br><span class="line">    System.out.println(a <span class="keyword">instanceof</span> A);<span class="comment">//true</span></span><br><span class="line">    System.out.println(a <span class="keyword">instanceof</span> B);<span class="comment">//true</span></span><br><span class="line">    <span class="keyword">if</span>(a <span class="keyword">instanceof</span> B)&#123;   <span class="comment">//就避免出现ClassCastException的错误</span></span><br><span class="line">      B b = (B) a;  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然清楚了这一系列的操作关系，可是还必须思考这种转换有什么意义？</p><p>范例：要求定义一个方法，要求这个方法可以接受我们Person类的的所有子类实例,并调用我们Person类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多态性;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是一个人！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是一个工人！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是一个学生！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        Worker wor = <span class="keyword">new</span> Worker();</span><br><span class="line">        in(stu);</span><br><span class="line">        in(wor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(Person per)</span></span>&#123;</span><br><span class="line">        per.say(); <span class="comment">//所有的人的子类都可以进入这个方法。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>对象多态性的实现的核心在于方法的覆写；</li><li>通过对象的向上转型可以实现接受参数的统一，而向下转型可以实现子类扩充方法的调用（一般不会操作向下转型）；</li><li>两个没有关系的对象是不能够转型的，一定会发生ClassCastException，所以向下转型是存在有安全隐患的。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java多态性&lt;/p&gt;
&lt;p&gt;我们已经学习完了关于继承的所有概念，但是并不意味着只要使用继承就可以实现代码的全部重用，而在继承之后又有了一个重要的核心概念：多态性；&lt;/p&gt;
&lt;p&gt;在Java里面对于多态的核心表现主要有以下两点：&lt;/p&gt;
&lt;p&gt;1.方法的多态性&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 综合案例：数组操作</title>
    <link href="https://blog.loong.io/2018/02/17/java1/"/>
    <id>https://blog.loong.io/2018/02/17/java1/</id>
    <published>2018-02-17T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.274Z</updated>
    
    <content type="html"><![CDATA[<p>现在要求定义一个数组（整型数据）的操作类，这个类有如下几点要求：</p><ul><li>数组的大小由类创建对象的时候动态决定；</li><li>可以通过类向数组中进行数据的保存，保存的时候需要考虑到数组的大小问题；</li><li>如果发现数组空间不足，则可以进行数组长度的动态扩充；</li><li>可以取得数组的全部数据（增加顺序）；</li></ul><p>而后继续在这个基础上要求扩展两个派生类：</p><ul><li>可以进行数组的排序操作；</li><li>可以进行数组的反转处理；</li></ul><h1 id="定义一个Array类"><a href="#定义一个Array类" class="headerlink" title="定义一个Array类"></a>定义一个Array类</h1><p> 在定义Array类的定义只需要根据自己的需求完成所需要的功能即可，按照标准做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数组操作;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.PortableInterceptor.SYSTEM_EXCEPTION;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span></span>&#123;<span class="comment">//定义一个专门进行数组操作的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data [];<span class="comment">//定义一个整型数组，大小由外部决定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> foot = <span class="number">0</span>;<span class="comment">//进行数组数据的角标操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;<span class="comment">//如果想要使用Array类，就必须定义数组长度</span></span><br><span class="line">        <span class="keyword">if</span>(len &gt; <span class="number">0</span>)&#123;<span class="comment">//一个正常的数组大小</span></span><br><span class="line">            <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="keyword">int</span> [len];<span class="comment">//开辟新数组</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">1</span>];<span class="comment">//开辟一个空间</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//动态扩展，如果此处传入了一个3，则表示在已有的基础上数组长度追加3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newData [] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.data.length+num];</span><br><span class="line">        System.arraycopy(<span class="keyword">this</span>.data,<span class="number">0</span>,newData,<span class="number">0</span>,<span class="keyword">this</span>.data.length);</span><br><span class="line">        <span class="keyword">this</span>.data = newData;<span class="comment">//改变原始数组指向</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//该方法的主要功能是向数组里面进行数组的保存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.foot &gt;= <span class="keyword">this</span>.data.length)&#123;<span class="comment">//没空间了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先进行数组的数据保存，而后foot的内容+1</span></span><br><span class="line">        <span class="keyword">this</span>.data[foot ++] = num;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getData() &#123;<span class="comment">//取得全部数组数据</span></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Array arr = <span class="keyword">new</span> Array(<span class="number">5</span>);</span><br><span class="line">        System.out.println(arr.add(<span class="number">1</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">2</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">3</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">4</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">5</span>));</span><br><span class="line">        arr.inc(<span class="number">3</span>);</span><br><span class="line">        System.out.println(arr.add(<span class="number">6</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">7</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">8</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; arr.getData().length;x++)&#123;</span><br><span class="line">            System.out.print(arr.getData()[x]+<span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C.png" alt></p><h1 id="定义排序扩展类：SortArray"><a href="#定义排序扩展类：SortArray" class="headerlink" title="定义排序扩展类：SortArray"></a>定义排序扩展类：SortArray</h1><p>如果要进行排序的处理操作，那么肯定在取得了全部数据的时候里面的内容应该是排序好了的。同时在该类的操作过程之中应该继续具备有：数据追加，数组扩充，取得全部数据（父类中的getData()方法作为一个获取数据的标准，这个方法应该继续保留）。</p><p>范例：定义排序子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数组操作;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span></span>&#123;<span class="comment">//定义一个专门进行数组操作的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data [];<span class="comment">//定义一个整型数组，大小由外部决定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> foot = <span class="number">0</span>;<span class="comment">//进行数组数据的角标操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;<span class="comment">//如果想要使用Array类，就必须定义数组长度</span></span><br><span class="line">        <span class="keyword">if</span>(len &gt; <span class="number">0</span>)&#123;<span class="comment">//一个正常的数组大小</span></span><br><span class="line">            <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="keyword">int</span> [len];<span class="comment">//开辟新数组</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">1</span>];<span class="comment">//开辟一个空间</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//动态扩展，如果此处传入了一个3，则表示在已有的基础上数组长度追加3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newData [] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.data.length+num];</span><br><span class="line">        System.arraycopy(<span class="keyword">this</span>.data,<span class="number">0</span>,newData,<span class="number">0</span>,<span class="keyword">this</span>.data.length);</span><br><span class="line">        <span class="keyword">this</span>.data = newData;<span class="comment">//改变原始数组指向</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//该方法的主要功能是向数组里面进行数组的保存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.foot &gt;= <span class="keyword">this</span>.data.length)&#123;<span class="comment">//没空间了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先进行数组的数据保存，而后foot的内容+1</span></span><br><span class="line">        <span class="keyword">this</span>.data[foot ++] = num;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getData() &#123;<span class="comment">//取得全部数组数据</span></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortArray</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123;</span><br><span class="line">    <span class="comment">//父类之中没有无参构造方法，所以子类必须明确调用父类中的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SortArray</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(num); <span class="comment">//父类中已经支持数组创建</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父类中的取得数据的方法名称很标准，但是功能不足，又希望继续使用这个方法名称，那么就需要对方法进行扩充，扩充就是方法覆写的核心作用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getData() &#123;</span><br><span class="line">        Java.util.Arrays.sort(<span class="keyword">super</span>.getData());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getData();<span class="comment">//引用传递</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        SortArray arr = <span class="keyword">new</span> SortArray(<span class="number">5</span>);</span><br><span class="line">        System.out.println(arr.add(<span class="number">4</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">5</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">3</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">2</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">7</span>));</span><br><span class="line">        arr.inc(<span class="number">3</span>);</span><br><span class="line">        System.out.println(arr.add(<span class="number">8</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">3</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; arr.getData().length;x++)&#123;</span><br><span class="line">            System.out.print(arr.getData()[x]+<span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的子类可能要针对于方法进行部分扩展。</p><h1 id="定义反转子类：ReverseArray"><a href="#定义反转子类：ReverseArray" class="headerlink" title="定义反转子类：ReverseArray"></a>定义反转子类：ReverseArray</h1><p>反转子类的最大特点在于，取得的数据顺序的保存顺序的相反内容。整体的实现风格实际上是和排序的数据子类是一样的。</p><p>范例：定义反转子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数组操作;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span></span>&#123;<span class="comment">//定义一个专门进行数组操作的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data [];<span class="comment">//定义一个整型数组，大小由外部决定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> foot = <span class="number">0</span>;<span class="comment">//进行数组数据的角标操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;<span class="comment">//如果想要使用Array类，就必须定义数组长度</span></span><br><span class="line">        <span class="keyword">if</span>(len &gt; <span class="number">0</span>)&#123;<span class="comment">//一个正常的数组大小</span></span><br><span class="line">            <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="keyword">int</span> [len];<span class="comment">//开辟新数组</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">1</span>];<span class="comment">//开辟一个空间</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//动态扩展，如果此处传入了一个3，则表示在已有的基础上数组长度追加3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newData [] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.data.length+num];</span><br><span class="line">        System.arraycopy(<span class="keyword">this</span>.data,<span class="number">0</span>,newData,<span class="number">0</span>,<span class="keyword">this</span>.data.length);</span><br><span class="line">        <span class="keyword">this</span>.data = newData;<span class="comment">//改变原始数组指向</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//该方法的主要功能是向数组里面进行数组的保存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.foot &gt;= <span class="keyword">this</span>.data.length)&#123;<span class="comment">//没空间了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先进行数组的数据保存，而后foot的内容+1</span></span><br><span class="line">        <span class="keyword">this</span>.data[foot ++] = num;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getData() &#123;<span class="comment">//取得全部数组数据</span></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortArray</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123;</span><br><span class="line">    <span class="comment">//父类之中没有无参构造方法，所以子类必须明确调用父类中的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SortArray</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(len); <span class="comment">//父类中已经支持数组创建</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父类中的取得数据的方法名称很标准，但是功能不足，又希望继续使用这个方法名称，那么就需要对方法进行扩充，扩充就是方法覆写的核心作用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getData() &#123;</span><br><span class="line">        Java.util.Arrays.sort(<span class="keyword">super</span>.getData());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getData();<span class="comment">//引用传递</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReverseArray</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReverseArray</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getData()&#123;</span><br><span class="line">        <span class="keyword">int</span> center = <span class="keyword">super</span>.getData().length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tail = <span class="keyword">super</span>.getData().length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt;center;x++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="keyword">super</span>.getData()[head];</span><br><span class="line">            <span class="keyword">super</span>.getData()[head] = <span class="keyword">super</span>.getData()[tail];</span><br><span class="line">            <span class="keyword">super</span>.getData()[tail] = temp;</span><br><span class="line">            head++;</span><br><span class="line">            tail--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        ReverseArray arr = <span class="keyword">new</span> ReverseArray(<span class="number">5</span>);</span><br><span class="line">        System.out.println(arr.add(<span class="number">4</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">5</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">3</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">2</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">7</span>));</span><br><span class="line">        arr.inc(<span class="number">3</span>);</span><br><span class="line">        System.out.println(arr.add(<span class="number">8</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">3</span>));</span><br><span class="line">        System.out.println(arr.add(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">int</span> result[] = arr.getData();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; result.length;x++)&#123;</span><br><span class="line">            System.out.print(result[x]+<span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本程序很完美的表现出了对继承概念讲解以及覆写的核心意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在要求定义一个数组（整型数据）的操作类，这个类有如下几点要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组的大小由类创建对象的时候动态决定；&lt;/li&gt;
&lt;li&gt;可以通过类向数组中进行数据的保存，保存的时候需要考虑到数组的大小问题；&lt;/li&gt;
&lt;li&gt;如果发现数组空间不足，则可以进行数
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java final关键字</title>
    <link href="https://blog.loong.io/2018/02/17/java2/"/>
    <id>https://blog.loong.io/2018/02/17/java2/</id>
    <published>2018-02-17T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.275Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中final被称为终接器，可以用final来定义我们的类，方法，属性。</p><h1 id="1-使用final定义的类不能够有子类；"><a href="#1-使用final定义的类不能够有子类；" class="headerlink" title="1.使用final定义的类不能够有子类；"></a>1.使用final定义的类不能够有子类；</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;      <span class="comment">//A类不允许有子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;   <span class="comment">//语法会出现错误</span></span><br></pre></td></tr></table></figure><h1 id="2、使用final定义的方法不允许被子类所覆写"><a href="#2、使用final定义的方法不允许被子类所覆写" class="headerlink" title="2、使用final定义的方法不允许被子类所覆写"></a>2、使用final定义的方法不允许被子类所覆写</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//出现错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用final定义的变量就成为了常量，常量必须在声明是赋值，并且不允许修改；"><a href="#3-使用final定义的变量就成为了常量，常量必须在声明是赋值，并且不允许修改；" class="headerlink" title="3.使用final定义的变量就成为了常量，常量必须在声明是赋值，并且不允许修改；"></a>3.使用final定义的变量就成为了常量，常量必须在声明是赋值，并且不允许修改；</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> LEVEL = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LEVEL = <span class="number">100</span>;    <span class="comment">//错误，无法修改</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在开发之中如果要定义常量，往往会使用<code>public static final</code>来定义全局常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LEVEL = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>而且常量的标识符必须全部使用大写字母的形式出现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java中final被称为终接器，可以用final来定义我们的类，方法，属性。&lt;/p&gt;
&lt;h1 id=&quot;1-使用final定义的类不能够有子类；&quot;&gt;&lt;a href=&quot;#1-使用final定义的类不能够有子类；&quot; class=&quot;headerlink&quot; title=&quot;1.使用
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 继承的定义与使用</title>
    <link href="https://blog.loong.io/2018/02/16/java/"/>
    <id>https://blog.loong.io/2018/02/16/java/</id>
    <published>2018-02-16T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.272Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象的第二大特点就是继承：而继承的主要作用在于在已有的基础上继续进行功能的扩充。</p><h1 id="继承问题的引出"><a href="#继承问题的引出" class="headerlink" title="继承问题的引出"></a>继承问题的引出</h1><p>如果想要更好的解释继承的作用，下面按照我们所学习到的概念来定义两个类：人，学生类。那么现在定义效果如下：</p><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到两个类有大量的重复代码，以上的程序开发模式就是我们之前所采用的模式，单独的简单Java类，我们通过不断的编写可以发现程序之中会出现大量的重复代码。</p><p>虽然说在代码上重复了，但是又可以发现概念上来讲，一个学生一定是人，但是学生和人学生更加具体。学生描述的范围更小，具备的属性更多，方法也会更多，所以学生应该是人的一个扩充。</p><p>这个时候要想消除结构定义上的重复，就必须用继承来完成。</p><h1 id="继承的实现"><a href="#继承的实现" class="headerlink" title="继承的实现"></a>继承的实现</h1><p>在Java中使用我们的extends关键字来进行实现，其定义的语法如下：</p><ul><li><p>继承关系：<code>class 子类 extends 父类;</code></p><p> 子类在一些书上也被称为派生类，父类也被称为超类(SuperClass)。</p></li></ul><p>范例：继承的基本实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">         Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">         stu.setName(<span class="string">"kai"</span>);</span><br><span class="line">         stu.setAge(<span class="number">6</span>);</span><br><span class="line">         System.out.println(stu.getName()+<span class="string">"、"</span>+stu.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过此时的代码可以发现，当发生类继承关系之后，子类可以直接继承父类的操作，也就是说可以实现代码的重用。</p><p>子类最低也维持和父类相同的功能。当然子类也是可以进行扩充，例如：扩充属性和方法。</p><p>范例：子类进行功能的扩充。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">         Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">         stu.setName(<span class="string">"kai"</span>);</span><br><span class="line">         stu.setAge(<span class="number">6</span>);</span><br><span class="line">         stu.setSchool(<span class="string">"利津一中"</span>);</span><br><span class="line">         System.out.println(stu.getName()+<span class="string">"、"</span>+stu.getAge()+<span class="string">"、"</span>+stu.getSchool());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现之后就可以非常清楚的发现，父类的确是可以进行功能的扩充，最重要的就是可以重用父类中定义的方法。</p><h1 id="继承的限制"><a href="#继承的限制" class="headerlink" title="继承的限制"></a>继承的限制</h1><p>虽然本质上来讲继承子类可以对父类操作进行共享，但是从另外一个角度来说，继承本生也是存在有一些限制的。</p><h2 id="子类对象在进行实例化之前一定会首先实例化父类对象，默认调用父类的构造方法之后再调用子类的构造方法进行子类的对象实例化。"><a href="#子类对象在进行实例化之前一定会首先实例化父类对象，默认调用父类的构造方法之后再调用子类的构造方法进行子类的对象实例化。" class="headerlink" title="子类对象在进行实例化之前一定会首先实例化父类对象，默认调用父类的构造方法之后再调用子类的构造方法进行子类的对象实例化。"></a>子类对象在进行实例化之前一定会首先实例化父类对象，默认调用父类的构造方法之后再调用子类的构造方法进行子类的对象实例化。</h2><p>必须先有老子，再有后代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Person类创建"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Student类创建"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Student();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现没有任何一条语句会明确的调用父类构造，但是父类的构造既然被执行了，所以就证明子类对象的实例化一定会实例化父类对象。但是需要注意的是，实际上这个时候在子类的构造方法之中相当于隐含了一个语句，这个语句<code>super()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Person类创建"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//既然要进行构造方法的调用，那么构造方法的调用一定要写在首行。</span></span><br><span class="line">    <span class="keyword">super</span>();   <span class="comment">//此语句在无参是写与不写都一样</span></span><br><span class="line">    System.out.println(<span class="string">"Student类创建"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Student();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是同时需要注意的是，如果此时你的父类里面没有提供有无参构造，这个时候就必须使用<code>super()</code>明确的指明你要调用的父类构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,String school)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">         Student stu = <span class="keyword">new</span> Student(<span class="string">"kai"</span>,<span class="number">18</span>,<span class="string">"利津一中"</span>);</span><br><span class="line">         System.out.println(stu.getName()+<span class="string">"、"</span>+stu.getAge()+<span class="string">"、"</span>+stu.getSchool());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java中只允许单继承不允许多继承"><a href="#Java中只允许单继承不允许多继承" class="headerlink" title="Java中只允许单继承不允许多继承"></a>Java中只允许单继承不允许多继承</h2><p>一个子类只能够继承一个父类。</p><p>范例：错误的多继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>实际上这个时候C类要同时继承A类和B类的主要目的是为了同时拥有A和B类中的操作，所以为了实现这样的概念可以同时采用多层继承的形式完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>但是这个层不建议太多了。一般我们自己在建立类的时候，这些类的继承关系也就最多3层结构了。</p><blockquote><p>总结Java不允许多重继承，但是允许多层继承。</p></blockquote><h1 id="在继承的时候，子类会继承父类的所有结构"><a href="#在继承的时候，子类会继承父类的所有结构" class="headerlink" title="在继承的时候，子类会继承父类的所有结构"></a>在继承的时候，子类会继承父类的所有结构</h1><p>但是这个时候需要注意的是，所有非私有操作属于显示继承（可以直接调用），而所有的私有操作属于隐式继承（通过其他形式调用例如：<code>setter getter</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">      stu.setName(<span class="string">"张三"</span>);</span><br><span class="line">      System.out.println(stu.getName);</span><br><span class="line">      stu.fun();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时父类中的属性的确被父类所继承了，但是发现子类能够使用的只是所有的非private操作（public），而所有的private操作肯定无法直接使用，所以称之为隐式继承。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>继承的语法以及继承的目的（扩展已有的类功能，是代码能够重用）；</li><li>子类的实例化流程：不管如何操作，一定要先实例化父类对象，而后再实例化子类对象；</li><li>继承的限制：不允许多重继承，只允许多层继承；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面向对象的第二大特点就是继承：而继承的主要作用在于在已有的基础上继续进行功能的扩充。&lt;/p&gt;
&lt;h1 id=&quot;继承问题的引出&quot;&gt;&lt;a href=&quot;#继承问题的引出&quot; class=&quot;headerlink&quot; title=&quot;继承问题的引出&quot;&gt;&lt;/a&gt;继承问题的引出&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 代码块</title>
    <link href="https://blog.loong.io/2018/02/15/java1/"/>
    <id>https://blog.loong.io/2018/02/15/java1/</id>
    <published>2018-02-15T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.269Z</updated>
    
    <content type="html"><![CDATA[<p>代码块是一个不重要的概念，但是作为结构清楚一下就可以了。所谓的代码块指的是使用了<code>{}</code>定义的一段程序代码，而代码块根据其定义的位置以及声明的关键字的不同，一共可以分为四类：普通代码块，构造块，静态块，同步代码块。</p><h1 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h1><p>普通代码块指的是定义在方法中的代码块。</p><p>范例：观察一个简单程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 普通代码块;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">true</span>)&#123;<span class="comment">//表示该判断一定成立</span></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">10</span>;<span class="comment">//局部</span></span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">100</span>;<span class="comment">//全局</span></span><br><span class="line">        System.out.println(x);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你将if语句拿掉，就将成为普通代码块了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 普通代码块;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        &#123;<span class="comment">//直接使用大括号进行定义，就是普通代码块</span></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">10</span>;<span class="comment">//局部</span></span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">100</span>;<span class="comment">//全局</span></span><br><span class="line">        System.out.println(x);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人觉得 ：如果你现在的方法中代码写的过长，但是又需要避免变量重名问题，往往会使用普通代码块，但是一般人真不用。</p><h1 id="构造块"><a href="#构造块" class="headerlink" title="构造块"></a>构造块</h1><p>构造块指的是定义在类中的代码块。</p><p>范例：定义构造块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 构造快;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Person的构造块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一次使用关键字new实例化对象的时候一定会调用构造方法，但是有了构造块之后发现构造块会优先于构造方法先执行。这个构造块唯一的好处是可以进行一些简单的逻辑操作，但是又没什么用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 构造快;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String info = <span class="string">"hello"</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; <span class="number">10</span>;x++)&#123;</span><br><span class="line">            info+=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person的构造方法"</span>+info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造块的使用只是一种补充手段，而这种手段恰恰没有意义。</p><h1 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h1><p>静态代码块指的是使用了static关键字定义的代码块。但是如果要去考虑我们的静态块必须分为两种情况：</p><ul><li>在非主类中定义的静态块；</li><li>在主类中定义的静态块；</li></ul><p>范例：观察静态块操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 静态块;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类的构造块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类的静态块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现静态块优先于构造块先执行，而且不管产生多少个实例化对象，静态块也只使用一次。静态块最为主要的作用就是为static属性初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 静态块;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String info = <span class="string">"hello"</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类的构造块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类的构造方法"</span> + info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类的静态块"</span>);</span><br><span class="line">        info +=<span class="string">"world!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态块也可以定义在主类里面，那么此时的静态块将优先于主方法执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 静态块;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String info = <span class="string">"hello"</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类的构造块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类的构造方法"</span> + info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类的静态块"</span>);</span><br><span class="line">        info +=<span class="string">"world!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">"+++++++++++++"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般而言，也没有什么意义了。</p><p>如果需要在一些属性使用前做处理就使用构造块或者静态块来完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码块是一个不重要的概念，但是作为结构清楚一下就可以了。所谓的代码块指的是使用了&lt;code&gt;{}&lt;/code&gt;定义的一段程序代码，而代码块根据其定义的位置以及声明的关键字的不同，一共可以分为四类：普通代码块，构造块，静态块，同步代码块。&lt;/p&gt;
&lt;h1 id=&quot;普通代码块&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java static关键字</title>
    <link href="https://blog.loong.io/2018/02/15/java/"/>
    <id>https://blog.loong.io/2018/02/15/java/</id>
    <published>2018-02-15T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.211Z</updated>
    
    <content type="html"><![CDATA[<p>在所有定义的方法上以及所有的属性上实际上都可以使用static关键字进行定义。</p><h1 id="static属性"><a href="#static属性" class="headerlink" title="static属性"></a>static属性</h1><p>在讲解具体的的static之前，首先来看这样一个程序:</p><p>范例：设置一个表示人的类，同时设置他所在的国家</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">static</span>关键字;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    String country = <span class="string">"中国"</span>;   <span class="comment">//为了后面的操作方便，暂时不进行封装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+<span class="keyword">this</span>.name +<span class="string">"，年龄："</span>+<span class="keyword">this</span>.age+<span class="string">"，国家："</span>+<span class="keyword">this</span>.country;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">24</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">34</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">"赵六"</span>,<span class="number">67</span>);</span><br><span class="line">        System.out.println(p1.getInfo());</span><br><span class="line">        System.out.println(p2.getInfo());</span><br><span class="line">        System.out.println(p3.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的定义模式是在之前使用过的，而这个时候3个对象进行内存分配的图形如下：</p><p><img src="http://oujvmc3la.bkt.clouddn.com/static1.png" alt></p><p>既然现在描述的都是中国人，那么理论上这些country属性都是相同的，所以此时发现每一个对象的country属性被重复保存了。</p><p>那么如果现在假设国家的名称突然改变了，而如果按照以上的存储模式就会出现一个问题，假设Person类已经产生了10亿个对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">static</span>关键字;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    String country = <span class="string">"中国"</span>;   <span class="comment">//为了后面的操作方便，暂时不进行封装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+<span class="keyword">this</span>.name +<span class="string">"，年龄："</span>+<span class="keyword">this</span>.age+<span class="string">"，国家："</span>+<span class="keyword">this</span>.country;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">24</span>);</span><br><span class="line">        p1.country = <span class="string">"中华民国"</span>;</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">34</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">"赵六"</span>,<span class="number">67</span>);</span><br><span class="line">        System.out.println(p1.getInfo());</span><br><span class="line">        System.out.println(p2.getInfo());</span><br><span class="line">        System.out.println(p3.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么现在就可以发现传统属性所具备的特征就是保存在堆内存之中，并且每一个对象独享此属性。可是同样的概念现在明显不适合于当前的环境，所以最好的做法是将country属性变为一个共享属性，那么只要一次修改就可以影响到我们所有的对象。那么如果要描述这样的共享属性，则只需要在此属性之前追加一个static关键字即可。</p><p>范例：定义static属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">static</span>关键字;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> String country = <span class="string">"中国"</span>;   <span class="comment">//为了后面的操作方便，暂时不进行封装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+<span class="keyword">this</span>.name +<span class="string">"，年龄："</span>+<span class="keyword">this</span>.age+<span class="string">"，国家："</span>+<span class="keyword">this</span>.country;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">24</span>);</span><br><span class="line">        p1.country = <span class="string">"中华民国"</span>;</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">34</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">"赵六"</span>,<span class="number">67</span>);</span><br><span class="line">        System.out.println(p1.getInfo());</span><br><span class="line">        System.out.println(p2.getInfo());</span><br><span class="line">        System.out.println(p3.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们的程序使用了static关键字进行定义了之后，那么此属性将不会保存在堆内存里面，会保存在一个叫全局数据区的内存空间之中，并且所有的对象都可以进行该数据区的访问。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/static2.png" alt></p><p>但是既然现在使用的是共享属性了，这个时候代码就会出现一个问题，共享属性能通过一个对象修改吗？对于static实际上我们也会将其称呼为类属性，而所有的类属性都可以利用类名称直接调用。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static属性可以直接通过类名称直接调用</span></span><br><span class="line">        Person.country = <span class="string">"中华民国"</span>;</span><br></pre></td></tr></table></figure><p>结论：访问static属性都使用类名称。</p><p>所有非static属性都必须在产生实例化对象之后才可以使用，而所有static属性不受实例化对象的限制，也就是说是否有对象与static属性无关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(Person.country);  <span class="comment">//中国</span></span><br><span class="line">        p1.country = <span class="string">"中华民国"</span>;</span><br><span class="line">        System.out.println(Person.country);  <span class="comment">//中华民国</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择：关于static属性与非static属性定义的选择？</p><ul><li>在定义类99%的情况下是不会考虑static属性的；</li><li>如果需要描述共享属性的概念，或者不希望受到实例化对象控制的时候使用static属性；</li></ul><h1 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h1><p>使用static定义的属性可以用类名称直接访问，那么同样如果使用static定义的方法也可以使用类名称直接调用，同样不受到实例化对象的影响。</p><p>范例：观察static定义的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">static</span>方法;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String country = <span class="string">"中国"</span>;   <span class="comment">//为了后面的操作方便，暂时不进行封装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCountry</span><span class="params">(String c)</span></span>&#123;</span><br><span class="line">        country = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+<span class="keyword">this</span>.name +<span class="string">"，年龄："</span>+<span class="keyword">this</span>.age+<span class="string">"，国家："</span>+<span class="keyword">this</span>.country;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Person.setCountry(<span class="string">"中华民国"</span>);<span class="comment">//没有实例化对象产生</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">23</span>);</span><br><span class="line">        System.out.println(p1.getInfo());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在类中已经存在static方法和非static方法了，那么这个时候对于两者的互相调用就存在有限制：</p><ul><li>所有static方法不允许调用非static定义的属性或者方法；</li><li>所有非static方法允许访问static属性或者方法</li></ul><blockquote><p>原因：因为所有static方法可以在没有实例化对象的时候访问，而所有非static方法或者属性必须要在实例化对象产生之后才可以操作。</p></blockquote><blockquote><p>使用static的属性是共享目的（因为属性都需要封装），但是使用static方法的目的只有一个：某些方法不希望受到类的限制，即：可以在没有实例化对象的时候进行执行。</p></blockquote><h1 id="主方法组成"><a href="#主方法组成" class="headerlink" title="主方法组成"></a>主方法组成</h1><p>在之前曾经说过一个问题：如果一个方法定义在了主类之中，并且由主方法直接调用，那么该方法的定义语法如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名称(参数列表)&#123;&#125;</span><br></pre></td></tr></table></figure><p>后来写到类结构的时候并没有使用staitc，其主要原因也是因为static方法的限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    print();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//static方法</span></span><br><span class="line">    System.out.println(<span class="string">"hello world!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时我们的<code>print()</code>方法上没有写上我们的static，那么表示的就是非static方法，所有的非static方法必须通过类对象才可以使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Demo().print();<span class="comment">//非static方法必须通过对象来进行调用</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//非static方法</span></span><br><span class="line">    System.out.println(<span class="string">"hello world!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是反过来也必须清楚一个问题，java中给出的主方法的名字是最长的一个，其组成意义如下：</p><ul><li>public:表示的是公共的，主方法作为起点必须可以随意访问；</li><li>static:执行java程序的时候，执行的是一个类名称，所以表示不受实例化对象限制；</li><li>void :主方法是一切的起点，既然开始了就走吧；</li><li>main:是一个系统定义好的方法名称；</li><li>String args[]:表示该类执行时所需要的相关参数。</li></ul><p>范例：取得执行参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ;x &lt; args.length;x++)&#123;</span><br><span class="line">      System.out.println(args[x]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数的设置：执行的时候设置参数，多个参数以空格分割。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">java Demo hello world</span></span><br></pre></td></tr></table></figure><p>但是你本身参数上就带有空格，那么就需要使用双引号</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">java </span>Demo <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><h1 id="static应用"><a href="#static应用" class="headerlink" title="static应用"></a>static应用</h1><p>static属性的最大功能是进行共享的操作，所以在这一基础上可以使用static做一个对象产生的技术统计。所有的对象的产生都是通过构造方法完成的，所以可以在构造方法中实现统计。</p><p>范例：对象产生个数统计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"对象个数："</span>+ ++count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Person() ;</span><br><span class="line">    <span class="keyword">new</span> Person() ;</span><br><span class="line">    <span class="keyword">new</span> Person() ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么也可以在以上的程序上做一个简单的扩充，假设说现在Person类中有一个name属性以及两个构造方法，其中一个构造方法可以接受外部传递的name属性内容，而另外一个构造方法是一个无参构造，一旦使用无参构造就希望可以自动为类中的name属性做一个自动复制，例如：“NONAME-1”；那么此时就可以继续使用static属性控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">static</span>应用;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">"NONAME - "</span>+ ++count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+<span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().getName());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person(<span class="string">"kai"</span>).getName());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后也会见到这种自动为属性命名的操作。</p><ol><li>static定义的属性和方法并不是你在类设计时的首要选择；</li><li>static的属性和方法不受到一个类的实例化对象的影响，可以由类名称直接调用；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在所有定义的方法上以及所有的属性上实际上都可以使用static关键字进行定义。&lt;/p&gt;
&lt;h1 id=&quot;static属性&quot;&gt;&lt;a href=&quot;#static属性&quot; class=&quot;headerlink&quot; title=&quot;static属性&quot;&gt;&lt;/a&gt;static属性&lt;/h1&gt;&lt;p
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 内部类的定义和使用</title>
    <link href="https://blog.loong.io/2018/02/15/java2/"/>
    <id>https://blog.loong.io/2018/02/15/java2/</id>
    <published>2018-02-15T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.271Z</updated>
    
    <content type="html"><![CDATA[<p>对于内部类的定义使用暂时不作为我们首要的类设计原则。</p><h1 id="内部类的基本概念"><a href="#内部类的基本概念" class="headerlink" title="内部类的基本概念"></a>内部类的基本概念</h1><p>所谓的内部类指的就是一个类的内部进行其他类嵌套的操作语法形式。理论上就跟盗梦空间一样，一层层进行类的嵌套定义。但是如果你进行类的嵌套定义太多了，那么自己也就晕了。</p><p>范例：内部类的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 内部类;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span></span>&#123;<span class="comment">//定义了一个外部类</span></span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"hello world!!"</span>;</span><br><span class="line">    <span class="comment">//+++++++++++++++++++++++++++++++++++</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//定义了一个内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//定义了一个普通方法</span></span><br><span class="line">            System.out.println(msg);<span class="comment">//调用msg属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//+++++++++++++++++++++++++++++++++++</span></span><br><span class="line">    <span class="comment">//定义一个外部类方法，这个方法负责产生内部类对象并且调用print()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Other other = <span class="keyword">new</span> Other();</span><br><span class="line">        other.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上的代码立刻就可以发现一个问题：程序的结构有些混乱。虽然内部类破坏了程序结构从整体上来讲不好，但是从另外一个方面上来讲，内部类也是有优点的，在于外部类的私有访问。</p><p>范例:将程序的内部类提取到外部，要求实现同样的功能。</p><ul><li>Outer和Inner是两个独立的类，而且Inner类需要访问Outer类中的msg属性，但是Outer类中的msg属性使用了private属性进行了封装，所以封装的属性要被外部访问，那么需要写getter方法</li><li>在Inner类的print()方法中如果想要访问msg属性的内容，那么只能通过getmsg()的方法完成,getmsg()是一个普通方法，必须通过outer类对象才可以访问，那么这个时候需要把在主方法中的outer类对象传递到inner类里面；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 内部类<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"hello world!"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;<span class="comment">//通过这个方法才能取得msg属性的内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner(<span class="keyword">this</span>);</span><br><span class="line">        in.print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Outer out;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">(Outer out)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.out= out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.out.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Outer out = <span class="keyword">new</span> Outer();</span><br><span class="line">        out.fun();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上折腾了半天目的就是来访问外部类中的私有属性，特别复杂。</p><p>实际上对于内部类的操作远远不止于此：</p><blockquote><p>1.通过以上的代码可以发现，当前内部类的访问必须通过外部类的方法才可以完成。如果不想通过外部类访问进行调用，想在程序外部调用，那么就必须按照如下的形式进行内部类的实例化对象创建：</p></blockquote><pre><code>语法：`外部类.内部类 内部类对象=new 外部类.new 内部类();`</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 内部类;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span></span>&#123;<span class="comment">//定义了一个外部类</span></span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"hello world!!"</span>;</span><br><span class="line">    <span class="comment">//+++++++++++++++++++++++++++++++++++</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//定义了一个内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//定义了一个普通方法</span></span><br><span class="line">            System.out.println(msg);<span class="comment">//调用msg属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//+++++++++++++++++++++++++++++++++++</span></span><br><span class="line">    <span class="comment">//定义一个外部类方法，这个方法负责产生内部类对象并且调用print()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//声明内部类对象</span></span><br><span class="line">        Other.Inner in = <span class="keyword">new</span> Other().new Inner();</span><br><span class="line">        in.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以要先进行外部类对象实例化，主要的问题在于此时的外部类中存在有属性，这些属性只有在开辟实例化对象之后才能够被访问。</p><blockquote><p>2.如果现在一个内部类只想被外部类所使用，即：不希望直接产生内部类的实例化对象，那么可以使用private定义。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 内部类;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span></span>&#123;<span class="comment">//定义了一个外部类</span></span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"hello world!!"</span>;</span><br><span class="line">    <span class="comment">//+++++++++++++++++++++++++++++++++++</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//定义了一个内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//定义了一个普通方法</span></span><br><span class="line">            System.out.println(msg);<span class="comment">//调用msg属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//+++++++++++++++++++++++++++++++++++</span></span><br><span class="line">    <span class="comment">//定义一个外部类方法，这个方法负责产生内部类对象并且调用print()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Other other = <span class="keyword">new</span> Other();</span><br><span class="line">        other.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.在进行属性访问的时候我们都要习惯性的加上this，所以如果想要在内部类中明确的使用this，那么语法形式应该变为<code>外部类.this.属性</code>这就表示外部类当前对象的属性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 内部类;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span></span>&#123;<span class="comment">//定义了一个外部类</span></span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"hello world!!"</span>;</span><br><span class="line">    <span class="comment">//+++++++++++++++++++++++++++++++++++</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//定义了一个内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//定义了一个普通方法</span></span><br><span class="line">            System.out.println(Other.<span class="keyword">this</span>.msg);<span class="comment">//调用msg属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//+++++++++++++++++++++++++++++++++++</span></span><br><span class="line">    <span class="comment">//定义一个外部类方法，这个方法负责产生内部类对象并且调用print()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Other other = <span class="keyword">new</span> Other();</span><br><span class="line">        other.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="static-定义内部类"><a href="#static-定义内部类" class="headerlink" title="static 定义内部类"></a>static 定义内部类</h1><p>内部类使用了static进行了定义，那么就表示其就是一个外部类的形式但是这个外部类的名称就是<code>外部类.内部类</code>,同时该内部类只允许访问外部类中的static操作。</p><p>范例：使用static定义内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 内部类<span class="keyword">static</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String msg = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">// 内部类=“外部类”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//此时只能使用外部类中的static操作</span></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要想操作这个外部类那么就应该使用如下语法：</p><ul><li>实例化对象：<code>外部类.内部类 内部类对象= new 外部类.内部类()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 内部类<span class="keyword">static</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String msg = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">// 内部类=“外部类”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//此时只能使用外部类中的static操作</span></span><br><span class="line">            System.out.println(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Outer.Inner in = <span class="keyword">new</span> Outer.Inner();</span><br><span class="line">        in.print();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后在开发之中一定会见到类似的概念。</p><h1 id="在方法中定义内部类"><a href="#在方法中定义内部类" class="headerlink" title="在方法中定义内部类"></a>在方法中定义内部类</h1><p>理论上内部类可以定义在类内部的任何位置，这就包括了：类中，方法中，代码块中。不过如果从实用的角度来讲，在方法中定义一个内部类的形式是最多的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 内部类方法中;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"helloworld"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(Outer.<span class="keyword">this</span>.msg);</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Inner().print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Outer().fun(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的代码在jdk1.8是正常的，但是在jdk1.8之前肯定是错误的。</p><p>在jdk1.7及以前，如果一个内部类定义在了方法之中，那么如果该内部类想要访问方法中的参数，这个参数必须使用final定义，而在jdk1.8之后为了推广他的函数式编程，所以将这一局限取消了。</p><p>内部类的使用暂时不作为你设计的首选。</p><ul><li>破坏了程序的结构；</li><li>方便进行私有属性的访问；（外部类也可以访问内部类的私有属性）</li><li>如果以后发现类名称上出现了<code>.</code>,应该立刻想到是内部类的概念；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于内部类的定义使用暂时不作为我们首要的类设计原则。&lt;/p&gt;
&lt;h1 id=&quot;内部类的基本概念&quot;&gt;&lt;a href=&quot;#内部类的基本概念&quot; class=&quot;headerlink&quot; title=&quot;内部类的基本概念&quot;&gt;&lt;/a&gt;内部类的基本概念&lt;/h1&gt;&lt;p&gt;所谓的内部类指的就是一个
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 综合案例:角色与权限设置</title>
    <link href="https://blog.loong.io/2018/02/14/java1/"/>
    <id>https://blog.loong.io/2018/02/14/java1/</id>
    <published>2018-02-14T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.198Z</updated>
    
    <content type="html"><![CDATA[<p>综合案例：角色与权限设置</p><p>要求：</p><ul><li>要求可以根据一个员工找到对应的部门，以及该部门对应的角色，以及每个角色对应的权限。</li><li>可以根据一个角色找到具备此角色的所有部门，以及该部门下的所有员工。</li><li>根据一个权限找到具备该权限的所有角色以及每个角色对应的部门以及每个部门下的所有员工。</li></ul><h1 id="进行类的单独描述"><a href="#进行类的单独描述" class="headerlink" title="进行类的单独描述"></a>进行类的单独描述</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数据表与简单java类角色与权限;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span></span>&#123;<span class="comment">//部门信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> did;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(<span class="keyword">int</span> did,String dname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.did = did;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【部门信息】部门编号："</span>+<span class="keyword">this</span>.did+<span class="string">",部门名称："</span>+<span class="keyword">this</span>.dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;<span class="comment">//雇员信息</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> eid;</span><br><span class="line">   <span class="keyword">private</span> String ename;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> eid,String ename)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.eid = eid;</span><br><span class="line">       <span class="keyword">this</span>.ename = ename;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"【雇员信息】雇员编号："</span>+<span class="keyword">this</span>.eid+<span class="string">",雇员姓名："</span>+<span class="keyword">this</span>.ename;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span></span>&#123;<span class="comment">//角色信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(<span class="keyword">int</span> rid,String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rid = rid;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【角色信息】角色编号："</span>+<span class="keyword">this</span>.rid+<span class="string">",角色标题："</span>+<span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;<span class="comment">//权限信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> aid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String flag;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">(<span class="keyword">int</span> aid,String title,String flag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aid = aid;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【权限信息】权限编号："</span>+<span class="keyword">this</span>.aid+<span class="string">",权限标题："</span>+<span class="keyword">this</span>.title+<span class="string">",权限标记："</span>+<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进行关系的描述"><a href="#进行关系的描述" class="headerlink" title="进行关系的描述"></a>进行关系的描述</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数据表与简单java类角色与权限;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span></span>&#123;<span class="comment">//部门信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> did;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> Emp emps[];<span class="comment">//一个部门有多个雇员</span></span><br><span class="line">    <span class="keyword">private</span> Role role;<span class="comment">//一个部门有一个角色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(<span class="keyword">int</span> did,String dname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.did = did;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmps</span><span class="params">(Emp emps[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emps = emps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Emp[] getEmps()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(Role role)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.role;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【部门信息】部门编号："</span>+<span class="keyword">this</span>.did+<span class="string">",部门名称："</span>+<span class="keyword">this</span>.dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;<span class="comment">//雇员信息</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> eid;</span><br><span class="line">   <span class="keyword">private</span> String ename;</span><br><span class="line">   <span class="keyword">private</span> Dept dept;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> eid,String ename)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.eid = eid;</span><br><span class="line">       <span class="keyword">this</span>.ename = ename;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"【雇员信息】雇员编号："</span>+<span class="keyword">this</span>.eid+<span class="string">",雇员姓名："</span>+<span class="keyword">this</span>.ename;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.dept = dept;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.dept;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span></span>&#123;<span class="comment">//角色信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Dept [] depts;<span class="comment">//多个部门拥有一个角色</span></span><br><span class="line">    <span class="keyword">private</span> Action [] actions;<span class="comment">//一个角色拥有多种权限</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(<span class="keyword">int</span> rid,String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rid = rid;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【角色信息】角色编号："</span>+<span class="keyword">this</span>.rid+<span class="string">",角色标题："</span>+<span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepts</span><span class="params">(Dept depts[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.depts = depts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Dept[] getDepts()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.depts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAction</span><span class="params">(Action actions[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actions = actions;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Action [] getActions()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.actions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;<span class="comment">//权限信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> aid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String flag;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">(<span class="keyword">int</span> aid,String title,String flag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aid = aid;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【权限信息】权限编号："</span>+<span class="keyword">this</span>.aid+<span class="string">",权限标题："</span>+<span class="keyword">this</span>.title+<span class="string">",权限标记："</span>+<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="要根据关系进行测试数据的编写以及完成指定数据的输出"><a href="#要根据关系进行测试数据的编写以及完成指定数据的输出" class="headerlink" title="要根据关系进行测试数据的编写以及完成指定数据的输出"></a>要根据关系进行测试数据的编写以及完成指定数据的输出</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数据表与简单java类角色与权限;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span></span>&#123;<span class="comment">//部门信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> did;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> Emp emps[];<span class="comment">//一个部门有多个雇员</span></span><br><span class="line">    <span class="keyword">private</span> Role role;<span class="comment">//一个部门有一个角色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(<span class="keyword">int</span> did,String dname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.did = did;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmps</span><span class="params">(Emp emps[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emps = emps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Emp[] getEmps()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(Role role)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.role;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【部门信息】部门编号："</span>+<span class="keyword">this</span>.did+<span class="string">",部门名称："</span>+<span class="keyword">this</span>.dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;<span class="comment">//雇员信息</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> eid;</span><br><span class="line">   <span class="keyword">private</span> String ename;</span><br><span class="line">   <span class="keyword">private</span> Dept dept;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> eid,String ename)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.eid = eid;</span><br><span class="line">       <span class="keyword">this</span>.ename = ename;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"【雇员信息】雇员编号："</span>+<span class="keyword">this</span>.eid+<span class="string">",雇员姓名："</span>+<span class="keyword">this</span>.ename;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.dept = dept;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.dept;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span></span>&#123;<span class="comment">//角色信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Dept [] depts;<span class="comment">//多个部门拥有一个角色</span></span><br><span class="line">    <span class="keyword">private</span> Action [] actions;<span class="comment">//一个角色拥有多种权限</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(<span class="keyword">int</span> rid,String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rid = rid;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【角色信息】角色编号："</span>+<span class="keyword">this</span>.rid+<span class="string">",角色标题："</span>+<span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepts</span><span class="params">(Dept depts[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.depts = depts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Dept[] getDepts()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.depts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAction</span><span class="params">(Action actions[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actions = actions;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Action [] getActions()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.actions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;<span class="comment">//权限信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> aid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String flag;</span><br><span class="line">    <span class="keyword">private</span> Role roles[];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">(<span class="keyword">int</span> aid,String title,String flag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aid = aid;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(Role roles[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Role [] getRoles()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.roles;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【权限信息】权限编号："</span>+<span class="keyword">this</span>.aid+<span class="string">",权限标题："</span>+<span class="keyword">this</span>.title+<span class="string">",权限标记："</span>+<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一步：设置数据之间的关系</span></span><br><span class="line">        <span class="comment">//1.创建部门数据</span></span><br><span class="line">        Dept d10 = <span class="keyword">new</span> Dept(<span class="number">10</span>,<span class="string">"技术部"</span>);</span><br><span class="line">        Dept d20 = <span class="keyword">new</span> Dept(<span class="number">20</span>,<span class="string">"市场部"</span>);</span><br><span class="line">        <span class="comment">//2.创建雇员信息</span></span><br><span class="line">        Emp e1 = <span class="keyword">new</span> Emp(<span class="number">1</span>,<span class="string">"kai"</span>);</span><br><span class="line">        Emp e2 = <span class="keyword">new</span> Emp(<span class="number">2</span>,<span class="string">"lei"</span>);</span><br><span class="line">        Emp e3 = <span class="keyword">new</span> Emp(<span class="number">3</span>,<span class="string">"wang"</span>);</span><br><span class="line">        Emp e4 = <span class="keyword">new</span> Emp(<span class="number">4</span>,<span class="string">"xue"</span>);</span><br><span class="line">        Emp e5 = <span class="keyword">new</span> Emp(<span class="number">5</span>,<span class="string">"king"</span>);</span><br><span class="line">        <span class="comment">//3.创建角色信息</span></span><br><span class="line">        Role r100 = <span class="keyword">new</span> Role(<span class="number">100</span>,<span class="string">"管理层"</span>);</span><br><span class="line">        Role r200 = <span class="keyword">new</span> Role(<span class="number">200</span>,<span class="string">"职员层"</span>);</span><br><span class="line">        <span class="comment">//4.创建权限信息</span></span><br><span class="line">        Action a1000 = <span class="keyword">new</span> Action(<span class="number">1000</span>,<span class="string">"职员入职"</span>,<span class="string">"Emp:add"</span>);</span><br><span class="line">        Action a2000 = <span class="keyword">new</span> Action(<span class="number">2000</span>,<span class="string">"职员晋升"</span>,<span class="string">"Emp:Edit"</span>);</span><br><span class="line">        Action a3000 = <span class="keyword">new</span> Action(<span class="number">3000</span>,<span class="string">"发布公告"</span>,<span class="string">"info:add"</span>);</span><br><span class="line">        Action a6000 = <span class="keyword">new</span> Action (<span class="number">6000</span>,<span class="string">"查看客户信息"</span>,<span class="string">"info:look"</span>);</span><br><span class="line">        Action a7000 = <span class="keyword">new</span> Action (<span class="number">7000</span>,<span class="string">"回访记录"</span>,<span class="string">"result:look"</span>);</span><br><span class="line">        <span class="comment">//5.设置角色和权限关系</span></span><br><span class="line">        r100.setAction(<span class="keyword">new</span> Action[]&#123;</span><br><span class="line">                a1000,a2000,a3000,a6000,a7000</span><br><span class="line">        &#125;);</span><br><span class="line">        r200.setAction(<span class="keyword">new</span> Action[]&#123;</span><br><span class="line">                a6000,a7000</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//6.设置角色和权限之间的关系</span></span><br><span class="line">        a1000.setRoles(<span class="keyword">new</span> Role []&#123;</span><br><span class="line">                r100</span><br><span class="line">        &#125;);</span><br><span class="line">        a2000.setRoles(<span class="keyword">new</span> Role []&#123;</span><br><span class="line">                r100</span><br><span class="line">        &#125;);</span><br><span class="line">        a3000.setRoles(<span class="keyword">new</span> Role []&#123;</span><br><span class="line">                r100</span><br><span class="line">        &#125;);</span><br><span class="line">        a6000.setRoles(<span class="keyword">new</span> Role []&#123;</span><br><span class="line">                r100,r200</span><br><span class="line">        &#125;);</span><br><span class="line">        a7000.setRoles(<span class="keyword">new</span> Role []&#123;</span><br><span class="line">                r100,r200</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//7.设置部门和角色之间的关系</span></span><br><span class="line">        d10.setRole(r100);</span><br><span class="line">        d20.setRole(r200);</span><br><span class="line">        <span class="comment">//8.设置角色和部门的关系</span></span><br><span class="line">        r100.setDepts(<span class="keyword">new</span> Dept[]&#123;</span><br><span class="line">                d10</span><br><span class="line">        &#125;);</span><br><span class="line">        r200.setDepts(<span class="keyword">new</span> Dept[]&#123;</span><br><span class="line">                d20</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//9.设置部门和雇员之间的关系</span></span><br><span class="line">        d10.setEmps(<span class="keyword">new</span> Emp[]&#123;</span><br><span class="line">                e1,e2</span><br><span class="line">        &#125;);</span><br><span class="line">        d20.setEmps(<span class="keyword">new</span> Emp[]&#123;</span><br><span class="line">                e3,e4,e5</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//10.设置雇员和部门之间的关系</span></span><br><span class="line">        e1.setDept(d10);</span><br><span class="line">        e2.setDept(d10);</span><br><span class="line">        e3.setDept(d20);</span><br><span class="line">        e4.setDept(d20);</span><br><span class="line">        e5.setDept(d20);</span><br><span class="line">        <span class="comment">//第二步：取出相应数据</span></span><br><span class="line">        <span class="comment">//要求可以根据一个员工找到对应的部门，以及该部门对应的角色，以及每个角色对应的权限。</span></span><br><span class="line">        System.out.println(e1.getDept().getInfo());</span><br><span class="line">        System.out.println(e1.getDept().getRole().getInfo());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; e1.getDept().getRole().getActions().length;x++)&#123;</span><br><span class="line">            System.out.println(e1.getDept().getRole().getActions()[x].getInfo());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line">        <span class="comment">//可以根据一个角色找到具备此角色的所有部门，以及该部门下的所有员工</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; r100.getDepts().length;x++)&#123;</span><br><span class="line">            System.out.println(r100.getDepts()[x].getInfo());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>;y &lt; r100.getDepts()[x].getEmps().length;y++)&#123;</span><br><span class="line">                System.out.println(<span class="string">"\t|-"</span> + r100.getDepts()[x].getEmps()[y].getInfo());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"+++++++++++++++++++++++++++"</span>);</span><br><span class="line">        <span class="comment">//根据一个权限找到具备该权限的所有角色以及每个角色对应的部门以及每个部门下的所有员工。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; a1000.getRoles().length;x++)&#123;</span><br><span class="line">            System.out.println(a1000.getRoles()[x].getInfo());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>;y &lt; a1000.getRoles()[x].getDepts().length;y++)&#123;</span><br><span class="line">                System.out.println(<span class="string">"\t|-"</span>+a1000.getRoles()[x].getDepts()[y].getInfo());</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; a1000.getRoles()[x].getDepts()[y].getEmps().length;i++)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"\t\t|-"</span>+a1000.getRoles()[x].getDepts()[y].getEmps()[i].getInfo());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序基本上包含了基本上所有可能用到的最复杂的逻辑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;综合案例：角色与权限设置&lt;/p&gt;
&lt;p&gt;要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要求可以根据一个员工找到对应的部门，以及该部门对应的角色，以及每个角色对应的权限。&lt;/li&gt;
&lt;li&gt;可以根据一个角色找到具备此角色的所有部门，以及该部门下的所有员工。&lt;/li&gt;
&lt;li&gt;根据一个权限
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 综合案例：数据表与简单Java类（多对多）</title>
    <link href="https://blog.loong.io/2018/02/14/java/"/>
    <id>https://blog.loong.io/2018/02/14/java/</id>
    <published>2018-02-14T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.210Z</updated>
    
    <content type="html"><![CDATA[<p>综合案例：数据表与简单java类（多对多）</p><p>定义一个学生选课的操作表，三张数据表：</p><ul><li>学生表：学生编号，姓名，年龄</li><li>课程表：课程编号，课程名称，学分</li><li>学生-课程关系表：学生编号，课程编号，成绩</li></ul><p>要求：可以实现以下的信息输出：</p><ul><li>可以找到一门课程，以及参加此课程的所有学生信息和她的成绩。</li><li>可以根据一个学生，可以找到他参加的所有课程和每门课程的成绩。</li></ul><h1 id="定义出基本类，暂时不考虑所有的关系"><a href="#定义出基本类，暂时不考虑所有的关系" class="headerlink" title="定义出基本类，暂时不考虑所有的关系"></a>定义出基本类，暂时不考虑所有的关系</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数据表与简单java类多对多;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> stuid,String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuid = stuid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【学生信息】学生编号："</span>+<span class="keyword">this</span>.stuid +<span class="string">",学生姓名："</span>+<span class="keyword">this</span>.name +<span class="string">",学生年龄："</span>+<span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> credit;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(<span class="keyword">int</span> cid,String name,<span class="keyword">int</span> credit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.credit = credit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【课程信息】课程编号："</span>+<span class="keyword">this</span>.cid+<span class="string">"，课程名称："</span>+<span class="keyword">this</span>.name+<span class="string">"，学分："</span>+<span class="keyword">this</span>.credit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="一个学生有多门课，一门课有多个学生，所以应该有互相保存对方的对象数组。"><a href="#一个学生有多门课，一门课有多个学生，所以应该有互相保存对方的对象数组。" class="headerlink" title="一个学生有多门课，一门课有多个学生，所以应该有互相保存对方的对象数组。"></a>一个学生有多门课，一门课有多个学生，所以应该有互相保存对方的对象数组。</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数据表与简单java类多对多;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Course courses [];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> stuid,String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuid = stuid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(Course[] courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Course[] getCourses() &#123;</span><br><span class="line">        <span class="keyword">return</span> courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【学生信息】学生编号："</span>+<span class="keyword">this</span>.stuid +<span class="string">",学生姓名："</span>+<span class="keyword">this</span>.name +<span class="string">",学生年龄："</span>+<span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> credit;</span><br><span class="line">    <span class="keyword">private</span> Student students [];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(Student[] students)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.students = students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Student[] getStudents() &#123;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(<span class="keyword">int</span> cid,String name,<span class="keyword">int</span> credit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.credit = credit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【课程信息】课程编号："</span>+<span class="keyword">this</span>.cid+<span class="string">"，课程名称："</span>+<span class="keyword">this</span>.name+<span class="string">"，学分："</span>+<span class="keyword">this</span>.credit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="学生和每门课程之间都会有一个成绩。现在发现关系表里不光是关系字段，还有一个普通字段，那么应该再建立一个类。"><a href="#学生和每门课程之间都会有一个成绩。现在发现关系表里不光是关系字段，还有一个普通字段，那么应该再建立一个类。" class="headerlink" title="学生和每门课程之间都会有一个成绩。现在发现关系表里不光是关系字段，还有一个普通字段，那么应该再建立一个类。"></a>学生和每门课程之间都会有一个成绩。现在发现关系表里不光是关系字段，还有一个普通字段，那么应该再建立一个类。</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数据表与简单java类多对多;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> StudentCourse studentCourses [];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> stuid,String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuid = stuid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentCourses</span><span class="params">(StudentCourse studentCourses[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentCourses = studentCourses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> StudentCourse[] getStudentCourses() &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.studentCourses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【学生信息】学生编号："</span>+<span class="keyword">this</span>.stuid +<span class="string">",学生姓名："</span>+<span class="keyword">this</span>.name +<span class="string">",学生年龄："</span>+<span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> credit;</span><br><span class="line">    <span class="keyword">private</span> StudentCourse studentCourses [];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentCourses</span><span class="params">(StudentCourse studentCourses[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentCourses = studentCourses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> StudentCourse[] getStudentCourses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.studentCourses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(<span class="keyword">int</span> cid,String name,<span class="keyword">int</span> credit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.credit = credit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【课程信息】课程编号："</span>+<span class="keyword">this</span>.cid+<span class="string">"，课程名称："</span>+<span class="keyword">this</span>.name+<span class="string">"，学分："</span>+<span class="keyword">this</span>.credit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentCourse</span></span>&#123;   <span class="comment">//学生选课</span></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentCourse</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentCourse</span><span class="params">(Student student,Course course,<span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.student = student;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.student;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">getCourse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="要进行操作的实现"><a href="#要进行操作的实现" class="headerlink" title="要进行操作的实现"></a>要进行操作的实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数据表与简单java类多对多;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stuid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> StudentCourse studentCourses [];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> stuid,String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuid = stuid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentCourses</span><span class="params">(StudentCourse studentCourses[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentCourses = studentCourses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> StudentCourse[] getStudentCourses() &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.studentCourses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【学生信息】学生编号："</span>+<span class="keyword">this</span>.stuid +<span class="string">",学生姓名："</span>+<span class="keyword">this</span>.name +<span class="string">",学生年龄："</span>+<span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> credit;</span><br><span class="line">    <span class="keyword">private</span> StudentCourse studentCourses [];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentCourses</span><span class="params">(StudentCourse studentCourses[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentCourses = studentCourses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> StudentCourse[] getStudentCourses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.studentCourses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(<span class="keyword">int</span> cid,String name,<span class="keyword">int</span> credit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.credit = credit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【课程信息】课程编号："</span>+<span class="keyword">this</span>.cid+<span class="string">"，课程名称："</span>+<span class="keyword">this</span>.name+<span class="string">"，学分："</span>+<span class="keyword">this</span>.credit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentCourse</span></span>&#123;   <span class="comment">//学生选课</span></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentCourse</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentCourse</span><span class="params">(Student student,Course course,<span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.student = student;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.student;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">getCourse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一步：根据结构进行关系设置</span></span><br><span class="line">        <span class="comment">//1.创建各自的独立对象</span></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">"王凯"</span>,<span class="number">18</span>);</span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="number">2</span>,<span class="string">"刘磊"</span>,<span class="number">19</span>);</span><br><span class="line">        Student stu3 = <span class="keyword">new</span> Student(<span class="number">3</span>,<span class="string">"王五"</span>,<span class="number">20</span>);</span><br><span class="line">        Course ca = <span class="keyword">new</span> Course(<span class="number">1001</span>,<span class="string">"马克思主义哲学"</span>,<span class="number">3</span>);</span><br><span class="line">        Course cb = <span class="keyword">new</span> Course(<span class="number">1002</span>,<span class="string">"操作系统"</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//2.需要设置学生和课程之间的关系，这里需要准备出成绩。</span></span><br><span class="line">        stu1.setStudentCourses(<span class="keyword">new</span> StudentCourse[]&#123;</span><br><span class="line">                <span class="keyword">new</span> StudentCourse(stu1,ca,<span class="number">99.9</span>),</span><br><span class="line">                <span class="keyword">new</span> StudentCourse(stu1,cb,<span class="number">80.0</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        stu2.setStudentCourses(<span class="keyword">new</span> StudentCourse[]&#123;</span><br><span class="line">                <span class="keyword">new</span> StudentCourse(stu2,ca,<span class="number">199.9</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        stu3.setStudentCourses(<span class="keyword">new</span> StudentCourse[]&#123;</span><br><span class="line">                <span class="keyword">new</span> StudentCourse(stu3,cb,<span class="number">98.8</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//3.设置课程和学生关系</span></span><br><span class="line">        ca.setStudentCourses(<span class="keyword">new</span> StudentCourse[]&#123;</span><br><span class="line">                <span class="keyword">new</span> StudentCourse(stu1,ca,<span class="number">99.9</span>),</span><br><span class="line">                <span class="keyword">new</span> StudentCourse(stu2,ca,<span class="number">199.9</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        cb.setStudentCourses(<span class="keyword">new</span> StudentCourse[]&#123;</span><br><span class="line">                <span class="keyword">new</span> StudentCourse(stu1,cb,<span class="number">80.0</span>),</span><br><span class="line">                <span class="keyword">new</span> StudentCourse(stu3,cb,<span class="number">98.8</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//第二步：根据结构取出数据</span></span><br><span class="line">        <span class="comment">//可以找到一门课程，以及参加此课程的所有学生信息和她的成绩。</span></span><br><span class="line">        System.out.println(ca.getInfo());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; ca.getStudentCourses().length;x++)&#123;</span><br><span class="line">            System.out.println(ca.getStudentCourses()[x].getStudent().getInfo() + <span class="string">",成绩："</span> + ca.getStudentCourses()[x].getScore());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line">        <span class="comment">//可以根据一个学生，可以找到他参加的所有课程和每门课程的成绩。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; stu1.getStudentCourses().length;x++)&#123;</span><br><span class="line">            System.out.println(stu1.getStudentCourses()[x].getCourse().getInfo() + <span class="string">",成绩："</span>+stu1.getStudentCourses()[x].getScore());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些关系的开发模式必须灵活编写，随便转换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;综合案例：数据表与简单java类（多对多）&lt;/p&gt;
&lt;p&gt;定义一个学生选课的操作表，三张数据表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学生表：学生编号，姓名，年龄&lt;/li&gt;
&lt;li&gt;课程表：课程编号，课程名称，学分&lt;/li&gt;
&lt;li&gt;学生-课程关系表：学生编号，课程编号，成绩&lt;/li
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 引用传递分析</title>
    <link href="https://blog.loong.io/2018/02/13/java/"/>
    <id>https://blog.loong.io/2018/02/13/java/</id>
    <published>2018-02-13T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.203Z</updated>
    
    <content type="html"><![CDATA[<p>引用传递是java的整体核心，如果你不懂引用传递，基本上所有的代码都无法进行正常的分析。下面使用3个简单的程序来对引用传递进行简单的分析。</p><p>范例：第一道引用传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 引用传递;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">gatNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Message meg = <span class="keyword">new</span> Message();</span><br><span class="line">        meg.setNum(<span class="number">100</span>);</span><br><span class="line">        fun(meg);</span><br><span class="line">        System.out.println(meg.gatNum());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Message meg)</span></span>&#123;</span><br><span class="line">        meg.setNum(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面通过内存关系图进行分析：</p><p><img src="http://oujvmc3la.bkt.clouddn.com/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%921.PNG" alt></p><p>范例：第二道引用传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 引用传递;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"hello"</span>;</span><br><span class="line">        fun(str);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(String temp)</span></span>&#123;</span><br><span class="line">        temp = <span class="string">"world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是<code>hello</code>.本题目分析的关键在于：字符串常量一旦声明则不可改变，字符串对象内容的改变依靠的是地址的引用关系变更。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%922.PNG" alt></p><p>范例:第三道引用传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 引用传递;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Note</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Info;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String Info)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Info = Info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Note note = <span class="keyword">new</span> Note();</span><br><span class="line">        note.setInfo(<span class="string">"hello"</span>);</span><br><span class="line">        fun(note);</span><br><span class="line">        System.out.println(note.getInfo());<span class="comment">//world</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Note note)</span></span>&#123;</span><br><span class="line">        note.setInfo(<span class="string">"world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要想对以上的代码进行分析，一定要有一个前提：你先把String类当做一个基本数据类型那样来操作。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%923.PNG" alt></p><p>String是引用类型，你不应该按照基本数据类型那样来进行分析，你应该按照引用类型进行分析。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%924.PNG" alt></p><p>对于字符串最简单的方法就是按照基本数据类型那样进行分析</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引用传递是java的整体核心，如果你不懂引用传递，基本上所有的代码都无法进行正常的分析。下面使用3个简单的程序来对引用传递进行简单的分析。&lt;/p&gt;
&lt;p&gt;范例：第一道引用传递&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java this关键字</title>
    <link href="https://blog.loong.io/2018/02/13/java/"/>
    <id>https://blog.loong.io/2018/02/13/java/</id>
    <published>2018-02-13T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.204Z</updated>
    
    <content type="html"><![CDATA[<p>个人认为，对于初学者this关键字是一个非常麻烦的关键字。因为从this的实际使用来讲，它可以做3件事情</p><ul><li>调用本类属性</li><li>调用本类方法（普通和构造）</li><li>表示当前对象（相对概念）</li></ul><h1 id="使用this表示本类属性"><a href="#使用this表示本类属性" class="headerlink" title="使用this表示本类属性"></a>使用this表示本类属性</h1><p>在真正使用this调用属性之前首先来观察如下的一道简单的程序。</p><p>范例：观察如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">this</span>关键字;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">This1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person(<span class="string">"kai"</span>,<span class="number">25</span>).getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是现在的参数给出的有一些问题，来分析以下，当前类中的构造方法的核心目的在于：为类中的name和age两个属性进行初始化。但是现在构造方法的参数声明不准确<code>public Person(String n,int a)</code>,所以最好的方法就是将参数的名称与属性名称统一起来。那么这个时候就可能产生参数与属性同名问题，所以为了明确标识出要使用的是属性还是方法的参数，那么建议属性前面都统一加上<code>this</code>的形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">this</span>关键字;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person1</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+ <span class="keyword">this</span>.name + <span class="string">"  年龄："</span> +<span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">This2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person1(<span class="string">"kai"</span>,<span class="number">25</span>).getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要在类的方法中访问类的属性，那么属性前一定要追加<code>this</code>关键字的形式。</p><h1 id="this调用方法"><a href="#this调用方法" class="headerlink" title="this调用方法"></a>this调用方法</h1><p>类中的方法一共有两种：</p><ul><li>构造方法：<code>this.方法(参数)</code></li><li>普通方法：<code>this(参数)</code></li></ul><p>范例：调用本类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">this</span>关键字;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person2</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.print();<span class="comment">//调用本类方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"***************"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+ <span class="keyword">this</span>.name + <span class="string">"  年龄："</span> +<span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">This3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person2(<span class="string">"kai"</span>,<span class="number">25</span>).getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然调用本类的普通方法前可以不使用<code>this</code>，但是强烈建议追加上<code>this</code>,这样的目的可以区分方法的定义来源。</p><p>范例：调用构造</p><p>构造方法与普通方法最大的区别：使用关键字new 实例化新对象的时候使用一次，而普通方法是实例化完成后（构造方法已经执行过了）可以调用多次。</p><p>那么在java里面支持类构造方法的互相调用。</p><p>范例：观察构造方法本身存在的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">this</span>关键字;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person3</span><span class="params">()</span></span>&#123;<span class="comment">//无参构造</span></span><br><span class="line">        System.out.println(<span class="string">"******一个新的Person类产生了******"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person3</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"******一个新的Person类产生了******"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person3</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"******一个新的Person类产生了******"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+ <span class="keyword">this</span>.name + <span class="string">"  年龄："</span> +<span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">This4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person3(<span class="string">"kai"</span>,<span class="number">25</span>));</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person3(<span class="string">"kai"</span>));</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person3());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在给出的程序中出现了重复的代码，这样的操作很明显不应该出现，必须消除掉重复的代码。</p><p>范例：使用this解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">this</span>关键字;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person3</span><span class="params">()</span></span>&#123;<span class="comment">//无参构造</span></span><br><span class="line">        System.out.println(<span class="string">"******一个新的Person类产生了******"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person3</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();  <span class="comment">//调用无参构造</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person3</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name);  <span class="comment">//调用有参构造</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+ <span class="keyword">this</span>.name + <span class="string">"  年龄："</span> +<span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">This4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person3(<span class="string">"kai"</span>,<span class="number">25</span>));</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person3(<span class="string">"kai"</span>));</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person3());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然使用<code>this</code>可以实现构造方法的互相调用，但是有以下的几点要求：</p><ul><li><code>this()</code>调用构造方法的语句必须放在构造方法的首行。(报错)</li><li>使用<code>this()</code>调用构造方法的时候请留有出口。(报错，递归调用构造方法)</li></ul><h1 id="this表示当前对象"><a href="#this表示当前对象" class="headerlink" title="this表示当前对象"></a>this表示当前对象</h1><p>在一个类之中肯定会产生若干个对象，那么程序类在分辨的时候不会记住有多少个对象产生了，它唯一可能知道的当前操作本类的对象是哪一个。</p><p>范例：观察当前对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">this</span>关键字;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person4</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"fun方法"</span>+<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">This5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Person4 p1 = <span class="keyword">new</span> Person4();</span><br><span class="line">        System.out.println(<span class="string">"main方法"</span>+p1);</span><br><span class="line">        p1.fun();</span><br><span class="line">        System.out.println(<span class="string">"+++++++++++"</span>);</span><br><span class="line">        Person4 p2 = <span class="keyword">new</span> Person4();</span><br><span class="line">        System.out.println(<span class="string">"main方法"</span>+p2);</span><br><span class="line">        p2.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在整体的操作过程之中，this定义没有变，只要有一个对象调用了本类中的方法，那么这个this就表示当前执行的对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;个人认为，对于初学者this关键字是一个非常麻烦的关键字。因为从this的实际使用来讲，它可以做3件事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用本类属性&lt;/li&gt;
&lt;li&gt;调用本类方法（普通和构造）&lt;/li&gt;
&lt;li&gt;表示当前对象（相对概念）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 引用传递实际应用</title>
    <link href="https://blog.loong.io/2018/02/13/java2/"/>
    <id>https://blog.loong.io/2018/02/13/java2/</id>
    <published>2018-02-13T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.207Z</updated>
    
    <content type="html"><![CDATA[<p>引用传递可以说是java的核心，也正是因为有了引用传递，索引可以更好的表现出现实世界的抽象。</p><p>实例：现在要求描述出这样一种关系：一个人有一辆汽车，或者没有汽车。很明显现在应该有两个实体类:人（member），车（car）。</p><p>范例：现在可以得出如下的设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 引用传递实际应用;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMemberInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+ <span class="keyword">this</span>.name + <span class="string">"   年龄："</span>+ <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Member member;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String name,<span class="keyword">double</span> price)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">getMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMember</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.member = member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCarInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"车名："</span> + <span class="keyword">this</span>.name + <span class="string">"   价格："</span> + <span class="keyword">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一步根据关系设置相应的数据</span></span><br><span class="line">        <span class="comment">//1.分别创建各自的实例</span></span><br><span class="line">        Member mem = <span class="keyword">new</span> Member(<span class="string">"kai"</span>, <span class="number">24</span>);</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"法拉利"</span>, <span class="number">500000.0</span>);<span class="comment">//你的车</span></span><br><span class="line">        <span class="comment">//2.设置对象间的引用关系</span></span><br><span class="line">        mem.setCar(car);<span class="comment">//一个人有一辆车</span></span><br><span class="line">        car.setMember(mem);<span class="comment">//一个车属于一个人</span></span><br><span class="line">        <span class="comment">//第二步根据关系取出数据</span></span><br><span class="line">        <span class="comment">//3.通过人可以找到车</span></span><br><span class="line">        System.out.println(mem.getMemberInfo());</span><br><span class="line">        System.out.println(mem.getCar().getCarInfo());</span><br><span class="line">        <span class="comment">//通过车找到人</span></span><br><span class="line">        System.out.println(<span class="string">"******************************"</span>);</span><br><span class="line">        System.out.println(car.getCarInfo());</span><br><span class="line">        System.out.println(car.getMember().getMemberInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如果现在要进一步设计，人会有后代，后代还会有车。这个时候有两类做法：</p><ul><li>建立一个孩子类，如果还有孙子，继续建立孙子类，不可能。</li><li>直接在Member类里面建立一个新的属性，这个属性描述的是孩子，而孩子的类型就是Member。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 引用传递实际应用;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="keyword">private</span> Member child;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChild</span><span class="params">(Member child)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.child = child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">getChild</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMemberInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span>+ <span class="keyword">this</span>.name + <span class="string">"   年龄："</span>+ <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Member member;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String name,<span class="keyword">double</span> price)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">getMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMember</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.member = member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCarInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"车名："</span> + <span class="keyword">this</span>.name + <span class="string">"   价格："</span> + <span class="keyword">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一步根据关系设置相应的数据</span></span><br><span class="line">        <span class="comment">//1.分别创建各自的实例</span></span><br><span class="line">        Member mem = <span class="keyword">new</span> Member(<span class="string">"kai"</span>, <span class="number">24</span>);</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"法拉利"</span>, <span class="number">500000.0</span>);<span class="comment">//你的车</span></span><br><span class="line">        Member chi = <span class="keyword">new</span> Member(<span class="string">"张三"</span>,<span class="number">4</span>);</span><br><span class="line">        Car cc = <span class="keyword">new</span> Car(<span class="string">"玛莎拉蒂"</span>,<span class="number">40.0</span>);</span><br><span class="line">        <span class="comment">//2.设置对象间的引用关系</span></span><br><span class="line">        mem.setCar(car);<span class="comment">//一个人有一辆车</span></span><br><span class="line">        mem.setChild(chi);</span><br><span class="line">        chi.setCar(cc);</span><br><span class="line">        car.setMember(mem);<span class="comment">//一个车属于一个人</span></span><br><span class="line">        <span class="comment">//第二步根据关系取出数据</span></span><br><span class="line">        <span class="comment">//3.通过人可以找到车</span></span><br><span class="line">        System.out.println(mem.getMemberInfo());</span><br><span class="line">        System.out.println(mem.getCar().getCarInfo());</span><br><span class="line">        <span class="comment">//4.通过车找到人</span></span><br><span class="line">        System.out.println(<span class="string">"******************************"</span>);</span><br><span class="line">        System.out.println(car.getCarInfo());</span><br><span class="line">        System.out.println(car.getMember().getMemberInfo());</span><br><span class="line">        <span class="comment">//5.通过人找到他的孩子</span></span><br><span class="line">        System.out.println(<span class="string">"******************************"</span>);</span><br><span class="line">        System.out.println(mem.getChild().getMemberInfo());</span><br><span class="line">        <span class="comment">//6.通过人找到他孩子的车</span></span><br><span class="line">        System.out.println(<span class="string">"******************************"</span>);</span><br><span class="line">        System.out.println(mem.getChild().getCar().getCarInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些关系的配置可以很好的反应现实生活。</p><p>如果还想再进行扩展，实际上也可以更好的描述出实际的组成关系，例如：一台电脑由显示器，主机，硬盘，鼠标，CPU，主板，内存所组成，那么这样的关系如何表示。</p><p>只有将一些细小的类合并到一起才能够描述出一个完整的概念，而且在实际的生活之中，这些细小的组成部分都可以进行替换的。所以这样的设计就属于合成设计模式。</p><p>在以后的实际开发之中，所使用到的类基本上都要求有开发者自己来定义。这些里面使用的都是引用传递的概念。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引用传递可以说是java的核心，也正是因为有了引用传递，索引可以更好的表现出现实世界的抽象。&lt;/p&gt;
&lt;p&gt;实例：现在要求描述出这样一种关系：一个人有一辆汽车，或者没有汽车。很明显现在应该有两个实体类:人（member），车（car）。&lt;/p&gt;
&lt;p&gt;范例：现在可以得出如下
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 综合案例：对象比较</title>
    <link href="https://blog.loong.io/2018/02/13/java1/"/>
    <id>https://blog.loong.io/2018/02/13/java1/</id>
    <published>2018-02-13T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.206Z</updated>
    
    <content type="html"><![CDATA[<p>如果要想确认两个对象是否相等，那么比较的应该是对象的完整信息，而对象的完整信息就是对象的属性，所以所谓的对象比较指的就是两个对象的属性进行的比较。</p><p>范例：对象的比较实现形式一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 对象比较;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Person perA = <span class="keyword">new</span> Person(<span class="string">"kai"</span>,<span class="number">24</span>);</span><br><span class="line">        Person perB = <span class="keyword">new</span> Person(<span class="string">"kai"</span>,<span class="number">24</span>);</span><br><span class="line">        System.out.println(perA == perB);</span><br><span class="line">        <span class="keyword">if</span> (perA.getName().equals(perB.getName()) &amp;&amp; perA.getAge() == perB.getAge())&#123;</span><br><span class="line">            System.out.println(<span class="string">"两个对象相等"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"两个对象不等"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然这个方法已经实现了对象的比较，但是这种操作一定不可能在实际工作中出现，因为客户端（主方法，调用处）需要涉及到的逻辑太多了。对于类比较的操作应该是一个类本身所具有的功能，而不应该变为外部的一个操作。</p><p>范例：对象比较实现二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 对象比较;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person1</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(Person1 per)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(per == <span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (per == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.name.equals(per.name) &amp;&amp; <span class="keyword">this</span>.age == per.age)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Person1 perA = <span class="keyword">new</span> Person1(<span class="string">"kai"</span>,<span class="number">24</span>);</span><br><span class="line">        Person1 perB = <span class="keyword">new</span> Person1(<span class="string">"kai"</span>,<span class="number">24</span>);</span><br><span class="line">        <span class="keyword">if</span> (perA.compare(perB))&#123;</span><br><span class="line">            System.out.println(<span class="string">"两个对象相等"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"两个对象不等"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象比较是一个类本身所具有的功能，比较的时候最核心的问题：比较地址，判断是否为空，判断各个属性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果要想确认两个对象是否相等，那么比较的应该是对象的完整信息，而对象的完整信息就是对象的属性，所以所谓的对象比较指的就是两个对象的属性进行的比较。&lt;/p&gt;
&lt;p&gt;范例：对象的比较实现形式一&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 综合案例：数据表与简单Java类（一对多）</title>
    <link href="https://blog.loong.io/2018/02/13/java3/"/>
    <id>https://blog.loong.io/2018/02/13/java3/</id>
    <published>2018-02-13T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.208Z</updated>
    
    <content type="html"><![CDATA[<p>数据表与简单java类一对多；</p><p>在学习oracle的时候使用过两张数据表：emp，dept；</p><ul><li>emp表：empno，ename，job，sal，comm，mgr，deptno；</li><li>dept表：deptno，dname，loc；</li></ul><p>要求可以通过程序描述出如下的对应关系：</p><ul><li>一个部门有多个雇员，并且可以输出一个部门的完整信息（包括雇员信息）；</li><li>可以根据一个雇员找到雇员对应的领导信息和雇员所在部门的信息。</li></ul><p>通过简单java类的开发以及数据表的使用，可以观察出两者存在对应关系。</p><p>实际开发中简单java类的设计原则：</p><ul><li>简单java类的名称 = 实体表的名称；</li><li>简单java类的属性 = 实体表的字段；</li><li>简单java类的一个对象 = 表的一行记录；</li><li>对象数组 = 表的多行记录；</li><li>外键关系 = 引用配置；</li></ul><p>1.先按照给定的关系将所有基础字段转换为简单java类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数据表与简单java类一对多;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> sal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> comm;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> empno,String ename,String job,<span class="keyword">double</span> sal,<span class="keyword">double</span> comm)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【EMP】 empno = "</span>+<span class="keyword">this</span>.empno + <span class="string">",ename = "</span>+<span class="keyword">this</span>.ename +<span class="string">",job = "</span>+<span class="keyword">this</span>.job+<span class="string">",sal = "</span>+<span class="keyword">this</span>.sal+<span class="string">", comm = "</span>+<span class="keyword">this</span>.comm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> String loc;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(<span class="keyword">int</span> deptno,String dname,String loc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【DEPT】deptno = "</span>+ <span class="keyword">this</span>.deptno +<span class="string">",dname = "</span>+<span class="keyword">this</span>.dname +<span class="string">",loc = "</span>+<span class="keyword">this</span>.loc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.随后要进行关系设计，该数据表中有对应的以下几个关系：</p><ul><li>一个雇员属于一个部门，需要追加部门引用。</li><li>一个雇员有一个领导，领导一定是自身关联自身引用。</li><li>一个部门有多个雇员，需要一个对象数组来描述多个雇员信息。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数据表与简单java类一对多;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> sal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> comm;</span><br><span class="line">    <span class="keyword">private</span> Emp mgr;<span class="comment">//描述雇员领导</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;<span class="comment">//描述雇员所在部门</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(Emp mgr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> empno,String ename,String job,<span class="keyword">double</span> sal,<span class="keyword">double</span> comm)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【EMP】 empno = "</span>+<span class="keyword">this</span>.empno + <span class="string">",ename = "</span>+<span class="keyword">this</span>.ename +<span class="string">",job = "</span>+<span class="keyword">this</span>.job+<span class="string">",sal = "</span>+<span class="keyword">this</span>.sal+<span class="string">", comm = "</span>+<span class="keyword">this</span>.comm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> String loc;</span><br><span class="line">    <span class="keyword">private</span> Emp [] emps; <span class="comment">//所有雇员</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(<span class="keyword">int</span> deptno,String dname,String loc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmps</span><span class="params">(Emp[] emps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emps = emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Emp[] getEmps() &#123;</span><br><span class="line">        <span class="keyword">return</span> emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【DEPT】deptno = "</span>+ <span class="keyword">this</span>.deptno +<span class="string">",dname = "</span>+<span class="keyword">this</span>.dname +<span class="string">",loc = "</span>+<span class="keyword">this</span>.loc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么此时基本的类定义完成了。</p><p>3.实现开发的需求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 数据表与简单java类一对多;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> sal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> comm;</span><br><span class="line">    <span class="keyword">private</span> Emp mgr;<span class="comment">//描述雇员领导</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;<span class="comment">//描述雇员所在部门</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(Emp mgr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> empno,String ename,String job,<span class="keyword">double</span> sal,<span class="keyword">double</span> comm)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【EMP】 empno = "</span>+<span class="keyword">this</span>.empno + <span class="string">",ename = "</span>+<span class="keyword">this</span>.ename +<span class="string">",job = "</span>+<span class="keyword">this</span>.job+<span class="string">",sal = "</span>+<span class="keyword">this</span>.sal+<span class="string">", comm = "</span>+<span class="keyword">this</span>.comm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> String loc;</span><br><span class="line">    <span class="keyword">private</span> Emp [] emps; <span class="comment">//所有雇员</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(<span class="keyword">int</span> deptno,String dname,String loc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmps</span><span class="params">(Emp[] emps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emps = emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Emp[] getEmps() &#123;</span><br><span class="line">        <span class="keyword">return</span> emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"【DEPT】deptno = "</span>+ <span class="keyword">this</span>.deptno +<span class="string">",dname = "</span>+<span class="keyword">this</span>.dname +<span class="string">",loc = "</span>+<span class="keyword">this</span>.loc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一步.设置类对象间的关系</span></span><br><span class="line">        <span class="comment">//1.分别创建各自类的实例化对象</span></span><br><span class="line">        Dept dept = <span class="keyword">new</span> Dept(<span class="number">10</span>, <span class="string">"ACCOUNTING"</span>, <span class="string">"new york"</span>);</span><br><span class="line">        Emp ea = <span class="keyword">new</span> Emp(<span class="number">7369</span>, <span class="string">"SMITH"</span>, <span class="string">"CLERK"</span>, <span class="number">800.0</span>, <span class="number">0.0</span>);</span><br><span class="line">        Emp eb = <span class="keyword">new</span> Emp(<span class="number">7366</span>, <span class="string">"ALLEN"</span>, <span class="string">"MANAGER"</span>, <span class="number">3000.0</span>, <span class="number">0.0</span>);</span><br><span class="line">        Emp ec = <span class="keyword">new</span> Emp(<span class="number">7369</span>, <span class="string">"KING"</span>, <span class="string">"PRESIDENT"</span>, <span class="number">5000.0</span>, <span class="number">0.0</span>);</span><br><span class="line">        <span class="comment">//2.设置雇员领导的关系</span></span><br><span class="line">        ea.setMgr(eb);</span><br><span class="line">        eb.setMgr(ec);<span class="comment">//ec对象没有领导因为他是头</span></span><br><span class="line">        <span class="comment">//3.设置雇员和部门的关系</span></span><br><span class="line">        ea.setDept(dept);</span><br><span class="line">        eb.setDept(dept);</span><br><span class="line">        ec.setDept(dept);</span><br><span class="line">        <span class="comment">//4.设置部门和雇员的关系</span></span><br><span class="line">        dept.setEmps(<span class="keyword">new</span> Emp [] &#123;ea,eb,ec&#125; );</span><br><span class="line">        <span class="comment">//第二步.进行数据的取得</span></span><br><span class="line">        <span class="comment">//5.一个部门有多个雇员，并且可以输出一个部门的完整信息（包括雇员信息）；</span></span><br><span class="line">        System.out.println(dept.getInfo());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; dept.getEmps().length;x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"\t|-"</span>+dept.getEmps()[x].getInfo());</span><br><span class="line">            <span class="keyword">if</span> (dept.getEmps()[x].getMgr() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"\t\t|-"</span> + dept.getEmps()[x].getMgr().getInfo());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"+++++++++++++++++++"</span>);</span><br><span class="line">        <span class="comment">//可以根据一个雇员找到雇员对应的领导信息以及雇员所在的部门</span></span><br><span class="line">        System.out.println(eb.getInfo());</span><br><span class="line">        <span class="keyword">if</span>(eb.getMgr() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"\t|-"</span>+eb.getMgr().getInfo());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (eb.getDept() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"\t|-"</span>+eb.getDept().getInfo());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种关系的匹配以及数据的取出操作，是必须掌握的，也是日后开发的基本模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据表与简单java类一对多；&lt;/p&gt;
&lt;p&gt;在学习oracle的时候使用过两张数据表：emp，dept；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;emp表：empno，ename，job，sal，comm，mgr，deptno；&lt;/li&gt;
&lt;li&gt;dept表：deptno，dname，
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java String类的常用方法</title>
    <link href="https://blog.loong.io/2018/01/31/java/"/>
    <id>https://blog.loong.io/2018/01/31/java/</id>
    <published>2018-01-31T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.202Z</updated>
    
    <content type="html"><![CDATA[<p>String类的常用方法</p><p>开发中String是必用的，只依靠String的基本概念根本就无法满足开发需求，所以开发者必须熟练掌握String类的方法。所有String类的方法都可以通过java Doc 取得。</p><p><a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">java SE 8</a></p><h1 id="字符串与字符数组"><a href="#字符串与字符数组" class="headerlink" title="字符串与字符数组"></a>字符串与字符数组</h1><p>字符串就是一个字符数组，所以在String类里面支持有字符数组转换为字符串以及字符串变为字符的操作方法，这些操作方法定义如下：</p><ul><li><code>public String(char[] value)</code>:构造类型，将字符数组中的所有内容变为字符串。</li><li><code>public String(char[] value,int offset,int count)</code>:构造类型，将部分字符数组中的内容变为字符串。</li><li><code>public char charAt(int index)</code>:普通类型，取得指定索引位置的字符，索引位置从零开始。</li><li><code>public char[] toCharArray()</code>：普通类型，将字符串变为字符数组返回。</li></ul><p>范例：观察<code>CharAt()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"Hello"</span>;</span><br><span class="line">        System.out.println(str.charAt(<span class="number">0</span>));<span class="comment">//H</span></span><br><span class="line">        <span class="comment">//取第一个位置的字符，如果超过该字符长度就会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串和字符数组的互相转换才是重点内容，那么下面来观察转换操作.</p><p>范例：字符串与字符数组的互相转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        <span class="keyword">char</span> data [] = str.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; data.length;x++)&#123;</span><br><span class="line">            data[x] -= <span class="number">32</span>;<span class="comment">//转大写字母</span></span><br><span class="line">            <span class="comment">//data[x] = (char)(data[x] - 32);</span></span><br><span class="line">            System.out.print(data[x]+<span class="string">"、"</span>);<span class="comment">//H、E、L、L、O、W、O、R、L、D、</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data));<span class="comment">//HELLOWORLD</span></span><br><span class="line">        <span class="comment">// 经过处理所有的小写字母全都转换为大写字字母了</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data,<span class="number">5</span>,<span class="number">5</span>));<span class="comment">//WORLD</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：现在有一个字符串，判断其是否由数字组成</p><p>因为现在不知道字符串的长度以及所包含的内容，最好的方法就是将其转变为字符数组，而后判断每个字符是否是“0”-“9”之间的内容，如果是则是数字，如果不是则不是数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"123456789"</span>;</span><br><span class="line">        System.out.println(isNumber(str) ? <span class="string">"由数字组成"</span> : <span class="string">"不是全由数字组成"</span>);<span class="comment">//由数字组成</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一般而言，如果方法返回的是Boolean类型，往往以isXxx()命名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> data [] = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; data.length; x++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[x] &lt; <span class="string">'0'</span> || data[x] &gt; <span class="string">'9'</span>)&#123;<span class="comment">//不是数字</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//后面不需要再进行继续排查</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//如果都没有错误，返回True</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候根据每一位进行判断的时候会有，如果都按照以上的方式操作的确会很麻烦 。</p><h1 id="字节与字符串"><a href="#字节与字符串" class="headerlink" title="字节与字符串"></a>字节与字符串</h1><p>字节更多的情况下是用于数据传输以及编码转换处理之中，在String类里面提供有对字节操作的支持。</p><ul><li><code>public String(byte[] bytes)</code>:构造方法，将字节数组变为字符串。</li><li><code>public String(byte[] bytes,int offset,int length)</code>:构造方法，将字节数组部分转换为字符串。</li><li><code>public byte[] getBytes()</code>:普通方法，将字符串以字节数组的形式返回。</li><li><code>public byte[] getBytes(String charsetName) throws UnsupportedEncodingException</code>:普通方法，编码转换处理。</li></ul><p>范例：实现字符串与字节数组的转换处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        <span class="keyword">byte</span> data [] = str.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; data.length;x++)&#123;</span><br><span class="line">            data[x]-=<span class="number">32</span>;</span><br><span class="line">            System.out.print(data[x]+<span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过程序可以发现，字节并不适合处理中文，而只有字符适合处理中文，并且按照程序的概念来讲，一个字符等于2个字节，字节只适合处理二进制数据。</p><h1 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h1><p>在之前使用过一个<code>equals()</code>的方法，该方法是可以进行区分大小写的相等判断，而除了这个方法之外，在String类里面还提供有如下的几个比较操作：</p><ul><li><code>public boolean equals(String anObject)</code>:普通，区分大小写的一个比较方法。</li><li><code>public boolean equalsIgnoreCase(String anothreString)</code>:普通，不区分大小写的比较。</li><li><code>public int compareTo(String anotherString)</code>:普通,比较两个字符串的大小关系。</li></ul><p>范例：不区分大小写比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"hello"</span>;</span><br><span class="line">        String str1 = <span class="string">"Hello"</span>;</span><br><span class="line">        System.out.println(str.equals(str1));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.equalsIgnoreCase(str1));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在String类中<code>compareTo()</code>方法是一个最为重要的操作方法，该方法返回的是一个int型的数据，该数据会根据大小关系返回三类的内容：</p><ul><li>相等：返回0；</li><li>小于：返回的内容小于0；</li><li>大于：返回的内容大于0；</li></ul><p>范例：观察compareTo()的比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A"</span>.compareTo(<span class="string">"a"</span>));<span class="comment">//-32</span></span><br><span class="line">        System.out.println(<span class="string">"a"</span>.compareTo(<span class="string">"A"</span>));<span class="comment">//32</span></span><br><span class="line">        System.out.println(<span class="string">"a"</span>.compareTo(<span class="string">"a"</span>));<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="string">"ab"</span>.compareTo(<span class="string">"ac"</span>));<span class="comment">//-1</span></span><br><span class="line">        System.out.println(<span class="string">"王"</span>.compareTo(<span class="string">"凯"</span>));<span class="comment">//8604 没有意义</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>compareTo()</code>是唯一一个可以区分大小关系的方法，以后会有更加详细的讲解。</p><h1 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h1><p>从一个完整的字符串之中可以判断指定的内容是否存在，对于字符串的查找方法定义有很多。</p><ul><li><code>public boolean contains(String s)</code>:普通，判断一个子字符串是否存在。</li><li><code>public int indexOf(String str)</code>:普通，从头开始查找指定字符串的位置，查到了返回位置的开始索引，如果查不到返回-1；</li><li><code>public int indexOf(String str,int fromindex)</code>：普通，从指定位置开始查找子字符串的位置。</li><li><code>public int lastIndexOf(String str)</code>:普通，由后向前查找字符串的位置。</li><li><code>public int lastIndexOf(String str,int fromindex)</code>：普通，从指定位置由后向前查找。</li><li><code>public boolean startsWith(String prefix)</code>:普通，从头开始判断字符串是不是以指定的字符串开头。</li><li><code>public boolean startsWith(String prefix,int toffset)</code>:普通，判断指定位置是不是由指定字符串开头。</li><li><code>public boolean endsWith(String suffix)</code>:普通，判断是否以指定的子字符串结尾。</li></ul><p>范例：字符串查找，最方便的就是<code>contains</code>直接返回boolean类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(str.contains(<span class="string">"world"</span>)); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该判断形式是由JDK1.5之后开始追加的，那么在jdk1.5之前如果要实现与之类似的功能，就必须按照<code>indexOf()</code>的方法完成。</p><p>范例：使用<code>indexOf()</code>实现我们的位置查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(str.indexOf(<span class="string">"world"</span>));<span class="comment">//5 w开始的索引</span></span><br><span class="line">        System.out.println(str.indexOf(<span class="string">"java"</span>));<span class="comment">//-1 没有找到</span></span><br><span class="line">        <span class="keyword">if</span> (str.indexOf(<span class="string">"world"</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"找到了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是现在都建议使用<code>contains()</code>这个方法完成。但是<code>indexOf()</code>需要注意的是，如果内容重复，他只能返回查找的第一个位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(str.indexOf(<span class="string">"l"</span>));<span class="comment">// 2</span></span><br><span class="line">        System.out.println(str.indexOf(<span class="string">"l"</span>,<span class="number">5</span>));<span class="comment">// 8</span></span><br><span class="line">        System.out.println(str.lastIndexOf(<span class="string">"l"</span>));<span class="comment">// 8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行查找的时候往往会判断开头或结尾。</p><p>范例：判断开头或者结尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"**@@hello##"</span>;</span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"**"</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"@@"</span>,<span class="number">2</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"##"</span>));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候往往一些参数或利用一些标记做一些特殊处理，此时就需要使用<code>startsWith()</code>或者<code>endsWith()</code>了</p><h1 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h1><p>使用一个指定的新的字符串替换掉已有的字符串数据，字符串替换可以使用的方法如下：</p><ul><li><code>public String replaceAll(String regex,String replacement)</code>:普通，替换所有的指定内容</li><li><code>public String replaceFirst(String regex,String replacement)</code>:普通，替换首个内容</li></ul><p>范例：实现字符串的替换处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(str.replaceAll(<span class="string">"l"</span>,<span class="string">"_"</span>));<span class="comment">//he__owor_d</span></span><br><span class="line">        System.out.println(str.replaceFirst(<span class="string">"l"</span>,<span class="string">"_"</span>));<span class="comment">//he_loworld</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串的替换操作与正则有关，后期还会对其进行分析。</p><h1 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h1><p>在整个字符串之中可以使用一个特定的字符来实现字符串的分割处理，也就是说可以将一个完整的字符串，按照指定的分割符划分为若干个子字符串。</p><ul><li><code>public String[] split(String regex)</code>:普通方法，将字符串全部拆分</li><li><code>public String[] split(String regex,int limit)</code>:普通方法，将字符串部分拆分，该数组长度就是limit极限</li></ul><p>范例：实现字符串的拆分处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"hello world hello"</span>;</span><br><span class="line">        String result [] = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; result.length;x++)&#123;</span><br><span class="line">            System.out.println(result[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：实现字符串的部分拆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"hello world hello"</span>;</span><br><span class="line">        String result [] = str.split(<span class="string">" "</span>,<span class="number">2</span>);<span class="comment">//会被拆分为2个元素即：hello 和 world hello</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; result.length;x++)&#123;</span><br><span class="line">            System.out.println(result[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的拆分形式都很容易，如果发现有些内容无法拆分开，就需要使用<code>\\</code>转义。</p><p>范例：拆分ip地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String13</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"192.168.1.1"</span>;</span><br><span class="line">        String result [] = str.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; result.length;x++)&#123;</span><br><span class="line">            System.out.println(result[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以后实际开发之中，经常会出现这样的拆分模式<code>姓名：年龄|姓名：年龄|......</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String14</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"kai:23|lei:24"</span>;</span><br><span class="line">        String result [] = str.split(<span class="string">"\\|"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; result.length;x++)&#123;</span><br><span class="line">            String temp [] = result[x].split(<span class="string">":"</span>);</span><br><span class="line">            System.out.println(temp[<span class="number">0</span>] + <span class="string">"="</span> + temp[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码在以后的开发之中会经常出现，该程序必须会操作。</p><h1 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h1><p>从一个完整的字符串之中截取出部分内容，那么对于字符串的截取有以下几种方法：</p><ul><li><code>public String substring(int beginIndex)</code>:普通方法，从指定索引截取到结尾</li><li><code>public String substring(int beginIndex,int endIndex)</code>:普通方法，截取字符串部分内容</li></ul><p>范例:观察字符串的截取操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String15</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(str.substring(<span class="number">5</span>));<span class="comment">//world</span></span><br><span class="line">        System.out.println(str.substring(<span class="number">0</span>,<span class="number">5</span>));<span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>千万记住了，程序中的字符串截取索引从0开始，而且只能够设置正整数，不能够使用负数</p><h1 id="其他操作方法"><a href="#其他操作方法" class="headerlink" title="其他操作方法"></a>其他操作方法</h1><p>在String类里面也有定义比较小的操作方法。</p><ul><li><code>public String trim()</code>:普通方法，去掉字符串之中的左右空格。</li><li><code>public String toUpperCase()</code>:普通方法，字符串转大写</li><li><code>public String toLowerCase()</code>:普通方法，字符串转小写</li><li><code>public String intern()</code>:普通方法，字符串入池</li><li><code>public String concat(String str)</code>:普通方法，等同于<code>+</code></li><li><code>public int length()</code>:普通方法，取得字符串的长度</li><li><code>public boolean isEmpty()</code>:普通方法，判断是否为空字符串（但不是null，而是长度为0）</li></ul><p>范例：观察<code>trim()</code>方法的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String16</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"   helloworld   "</span>;</span><br><span class="line">        System.out.println(<span class="string">"【"</span>+str.trim()+<span class="string">"】"</span>);<span class="comment">//【helloworld】</span></span><br><span class="line">        System.out.println(<span class="string">"【"</span>+str+<span class="string">"】"</span>);<span class="comment">//【   helloworld   】</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：字符串转换大小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String17</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"hello &amp;^)#0948 WORLD"</span>;</span><br><span class="line">        System.out.println(str.toUpperCase());<span class="comment">//HELLO &amp;^)#0948 WORLD</span></span><br><span class="line">        System.out.println(str.toLowerCase());<span class="comment">//hello &amp;^)#0948 world</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这两个函数之后，如果不是字母的内容将不进行字母大小写的转换，实际上就少了用户的判断。</p><p>范例：观察<code>concat()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String18</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>.concat(<span class="string">"world"</span>);</span><br><span class="line">        System.out.println(str1);<span class="comment">//helloworld</span></span><br><span class="line">        System.out.println(str1 == str);<span class="comment">//false</span></span><br><span class="line">        System.out.println(str == str1.intern());<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例:观察<code>length()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String19</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"helloworld"</span>.length());<span class="comment">//10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在数组上有一个格式，<code>数组名称.length</code>，但是在String类中，<code>length()</code>是一个方法，方法必须通过对象才可以调用，而且方法后面一定有<code>()</code>存在。</p><p>范例：观察<code>isEmpty()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String20</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>.isEmpty());<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">""</span>.isEmpty());<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String().isEmpty());<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在String类中唯一遗憾的是没有提供首字母大写的方法，所以如果要想使用就必须自己实现。</p><p>范例：实现首字母大写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 字符串方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String21</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        String name = <span class="string">"kai"</span>;</span><br><span class="line">        System.out.println(initcap(name));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">initcap</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// isEmpty()和equals()</span></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || <span class="string">""</span>.equals(str))&#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str.length() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> str.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase() + str.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种首字母大写的操作在实际开发之中使用频率很高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;String类的常用方法&lt;/p&gt;
&lt;p&gt;开发中String是必用的，只依靠String的基本概念根本就无法满足开发需求，所以开发者必须熟练掌握String类的方法。所有String类的方法都可以通过java Doc 取得。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java String类的基本特点</title>
    <link href="https://blog.loong.io/2018/01/27/java/"/>
    <id>https://blog.loong.io/2018/01/27/java/</id>
    <published>2018-01-27T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.200Z</updated>
    
    <content type="html"><![CDATA[<p>java String类的基本特点</p><h1 id="String类的两种实例化方法"><a href="#String类的两种实例化方法" class="headerlink" title="String类的两种实例化方法"></a>String类的两种实例化方法</h1><p>几乎所有的项目开发过程之中都一定会有String类的使用，但是String类的定义有一些差别，在使用上是有一些注意事项的。</p><p>String可以采用直接赋值的方式进行处理，这一点感觉上是和我们的基本数据类型是非常相似的。</p><p>范例：直接赋值实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串的直接赋值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="comment">//str是一个对象，那么‘hello’就应该保存在堆内存之中</span></span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是String本身毕竟是一个类，既然是一个类，那么类中就一定会提供有构造方法，而在String类中我们恰好提供了以下的构造方法：</p><pre><code>构造：public String(String str);</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="comment">//该过程符合传统的类的实例化</span></span><br><span class="line">String str = <span class="keyword">new</span> String (<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时不考虑两者的区别以及使用，关键是要清楚String类现在提供有两种实例化对象的模式。</p><h1 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h1><p>如果说现在有两个int型的变量，判断其相等，我们可以用“==”完成。</p><p>范例：观察基本数据类型比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本数据类型的比较</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">System.out.println(x == y);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如果说在String类的对象上使用了<code>==</code>呢？</p><p>范例：观察在String上直接使用<code>==</code>比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String类型使用==</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String str1 = <span class="string">"hello"</span>;</span><br><span class="line">String str2 = <span class="keyword">new</span> String (<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(str1 == str2);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在两个字符串的内容是相同的，而使用了“==”比较之后内容是不同的，如果想要得出结论需要进行我们的内存图分析。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/String1.PNG" alt></p><p><code>==</code>本身是进行我们的数值比较的，但是如果用在了我们的对象之中，那么所比较的就应该是两个对象所保存的内存地址的数值，所以属于地址数值比较，而并没有比较对象的内容。</p><p>那么如果要进行内容的比较，则必须采用String类中的一个方法（暂时变形）：</p><pre><code>内容比较：`public Boolean equals(String str)`</code></pre><p>实例：进行字符串内容比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象内容比较</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String5</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String str1 = <span class="string">"hello"</span>;</span><br><span class="line">String str2 = <span class="keyword">new</span> String (<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>equals</code>和<code>==</code>的区别？</p></blockquote><blockquote><p><code>==</code>:进行的是我们的数值比较，比较的是我们两个字符串的内存地址数值；<br><code>equals</code>：进行的是我们String的内容进行比较；</p></blockquote><h1 id="字符串常量是String的匿名对象"><a href="#字符串常量是String的匿名对象" class="headerlink" title="字符串常量是String的匿名对象"></a>字符串常量是String的匿名对象</h1><p>在任何语言的底层上面都不可能有提供直接的字符串类型。现在所谓的字符串只是高级语言提供给用户方便开发的支持而已。所以在java里面本身也没有提供有字符串常量概念，所有使用<code>&quot;&quot;</code>定义的内容本质上来讲都是String类型的一个匿名对象。</p><p>范例：观察字符串操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String6</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String str1 = <span class="string">"hello"</span>;</span><br><span class="line">System.out.println(<span class="string">"hello"</span>.equals(str1));<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在之前出现的<code>String str = &quot;hello&quot;</code>，本质上就是将一个匿名的String对象设置有名字，而且匿名对象一定保存在堆内存之中。</p><blockquote><p>提醒：在日后的开发过程之中，如果要判断用户输入的字符串是否等同于指定的字符串，那么一定要将字符串写到前面。</p></blockquote><ul><li>比较的操作方法之一：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String7</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String input = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(input.equals(<span class="string">"hello"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行数据输入接受的时候必须要考虑用户没有输入数据的问题，如果以上面的代码为例，用户没有输入的时候，那么一定会出现<code>Exception in thread &quot;main&quot; java.lang.NullPointerException</code>问题。</p><ul><li>任何字符串常量都是String匿名对象，所以该对象永远不可能为null；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String7</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String input = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(<span class="string">"hello"</span>.equals(input));<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么以后在进行比较的时候，强烈建议如上的写法，把字符串写到前面。</p><h1 id="String两种实例化的区别"><a href="#String两种实例化的区别" class="headerlink" title="String两种实例化的区别"></a>String两种实例化的区别</h1><p>现在已经给出了String两种实例化的操作模式，那么在实际的开发之中，使用哪一种会更好，以及彼此之间的区别有哪些呢？</p><h2 id="采用直接赋值："><a href="#采用直接赋值：" class="headerlink" title="采用直接赋值："></a>采用直接赋值：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串的直接赋值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="comment">//str是一个对象，那么‘hello’就应该保存在堆内存之中</span></span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/string2.PNG" alt></p><p>那么随后下面按照同样的模式继续进行新的字符串对象的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String8</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br><span class="line">String str1 = <span class="string">"hello"</span>;</span><br><span class="line">String str2 = <span class="string">"hello"</span>;</span><br><span class="line">System.out.println( str == str1 );<span class="comment">//true</span></span><br><span class="line">System.out.println( str1 == str2 );<span class="comment">//true</span></span><br><span class="line">System.out.println( str == str2 );<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/string3.PNG" alt></p><p>以上是通过程序的运行结果来分析出的内存关系，但是从另一个方面来讲，为什么没有开辟新的堆内存空间呢?</p><p>String类的设计使用了一个共享的设计模式</p><p>在jvm的底层实际上会自动维护一个对象池（字符串对象池），如果现在使用了直接赋值的模式进行String类的实例化操作，那么该实例化对象（字符串）将自动保存到这个对象池之中，如果下次有人使用了直接赋值的模式声明了一个String类的对象，那么对象池之中有指定的内容，那么将直接进行引用，如果没有，将开辟新的字符串对象，而后将其保存在对象池之中以供下次使用。（所谓的对象池就是一个对象数组）</p><p>范例：观察与常量的比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//观察与常量的比较</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String9</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br><span class="line">System.out.println(<span class="string">"hello"</span> == str);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"hello"</span> == <span class="string">"hello"</span>);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时返回的都是true，一方面是与共享设计有关，另一方面就是jdk版本不同也会存在若干差异。</p><h2 id="采用构造方法"><a href="#采用构造方法" class="headerlink" title="采用构造方法"></a>采用构造方法</h2><p>类对象使用构造方法进行实例化才属于我们的标准做法，那么来分析如下的一段程序：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span> (<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/string4.PNG" alt></p><p>那么通过分析首先可以确定一点的是，如果使用了构造方法将会开辟两块堆内存空间，并且有一块堆内存空间将会成为垃圾空间，除了这一缺点之外，实际上也会对我们的字符串共享产生问题。</p><p>范例：观察字符串共享问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String10</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(str == <span class="string">"hello"</span>);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个时候并不表示不能够进入对象池保存，关键的问题是：需要手工来处理，在String类中有一个方法可以实现入池的操作：<code>public String intern()</code>;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String10</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"hello"</span>).intern();</span><br><span class="line">System.out.println(str == <span class="string">"hello"</span>);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/string5.PNG" alt></p><blockquote><p>请解释String对象实例化的两种区别？</p></blockquote><blockquote><p>直接赋值只会开辟一块堆内存空间，并且该字符串对象可以保存在对象池之中以供我们的下一次使用.<br>构造函数的模式会开辟两块堆内存空间，一块堆内存空间将成为垃圾，而且其字符串对象不会自动保存到我们的对象池之中，可以使用intern()方法手工入池。</p></blockquote><h1 id="字符串常量不可变更"><a href="#字符串常量不可变更" class="headerlink" title="字符串常量不可变更"></a>字符串常量不可变更</h1><p>所有的语言对于字符串的底层实现都是字符数组，数组的最大缺陷就是长度固定，所以在定义字符串常量的时候它的内容是不可能改变的。</p><p>范例：观察如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String11</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br><span class="line">str=str+<span class="string">"world"</span>;</span><br><span class="line">System.out.println(str + <span class="string">"!!!"</span>);<span class="comment">//helloworld!!!</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上字符串的变更是字符串对象的变更而不是，而并不是字符串的内容，以上的代码执行操作如下：</p><p><img src="http://oujvmc3la.bkt.clouddn.com/string6.PNG" alt></p><p>可以发现字符串上没有发生我们的任何的变化，但是字符串对象的引用却一直在改变，而且会形成大量的垃圾，正是因为String的这个特点，所以如下的代码不应该在你的开发中出现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在你的开发之中不应该出现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String12</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt; <span class="number">100</span> ;i++) &#123;</span><br><span class="line">str+=i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果说现在很多用户都使用了同样的操作，那么产生的垃圾数量就相当可观了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>字符串的使用就采用我们的直接赋值的模式</li><li>字符串的比较就是用我们的equals()方法实现</li><li>字符串没事别改变太多</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java String类的基本特点&lt;/p&gt;
&lt;h1 id=&quot;String类的两种实例化方法&quot;&gt;&lt;a href=&quot;#String类的两种实例化方法&quot; class=&quot;headerlink&quot; title=&quot;String类的两种实例化方法&quot;&gt;&lt;/a&gt;String类的两种实例化方法&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java数组的定义与使用</title>
    <link href="https://blog.loong.io/2018/01/03/java/"/>
    <id>https://blog.loong.io/2018/01/03/java/</id>
    <published>2018-01-03T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.197Z</updated>
    
    <content type="html"><![CDATA[<p>关于java数组的定义与使用</p><h1 id="数组基本概念"><a href="#数组基本概念" class="headerlink" title="数组基本概念"></a>数组基本概念</h1><p>数组在开发之中一定会使用,但是像以下讲解的时候这么用的数组少了.在以后的实际开发之中,你们会更多的使用数组概念,而直接使用数组99%的情况下都只是做一个数组的for循环输出.</p><p>如果说现在要求你定义100个整型变量，那么按照之前的一个做法，可能现在定义的结构如下：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int <span class="keyword">i1</span>,<span class="keyword">i2</span>,<span class="keyword">i3</span>....<span class="keyword">i100</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>但是这个时候如果按照此类方式定义就会非常麻烦，因为这些变量彼此之间没有任何的关联，也就是说如果现在突然再有一个要求，要求你输出这100个变量的内容，意味着你需要编写System.out.println（）语句100次。</p><h1 id="数组的动态初始化"><a href="#数组的动态初始化" class="headerlink" title="数组的动态初始化"></a>数组的动态初始化</h1><p>所谓的数组指的就是一组相关类型的变量集合，并且这些变量可以按照统一的方式进行操作。数组本身属于我们的引用数据类型，那么既然是引用数据类型，这里面实际上又会牵扯到内存分配，而数组的定义有如下两类。</p><ul><li>声明并开辟数组：</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型 <span class="string">[]</span> 数组名称 = new 数据类型 <span class="string">[长度]</span>;</span><br><span class="line"></span><br><span class="line">数据类型 数组名称 <span class="string">[]</span> = new 数据类型 <span class="string">[长度]</span>;</span><br></pre></td></tr></table></figure><ul><li>分布进行数组空间开辟(实例化)</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明数组:</span></span><br><span class="line">数据类型 [] 数组名称 = <span class="literal">null</span>;  <span class="comment">//或者下面</span></span><br><span class="line">数据类型 数组名称 [] = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟数组空间</span></span><br><span class="line">数组名称 = <span class="keyword">new</span> <span class="type"></span>数据类型 [长度];</span><br></pre></td></tr></table></figure><p>那么当数组开辟空间之后,就可以采用如下的方式进行操作:</p><ul><li>数组的访问通过索引完成,即:数组名称[索引];但是需要注意的是,数组的索引从0开始,所以可以使用的索引范围就是 0~数组长度-1,例如:现在开辟了3个空间的数组,所以可以使用的索引是:0,1,2;如果此时数组访问的时候超过了数组的索引范围,则会产生”ArrayIndexOutOfBoundsException”异常信息;</li><li>当数组采用动态初始化开辟空间之后,数组里面的每一个元素都是该数组对应数据类型的默认值;</li><li>数组本身是一个有序的集合操作,所以对于数组的内容操作往往采用循环的模式完成,数组是一个有限的数据集合,所以应该使用for循环.</li><li>在java中提供有一种动态取得数组长度的方法:<code>数组名称.length</code>;</li></ul><p>范例:定义一个int数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开辟一个数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class15</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>];<span class="comment">//开辟了一个数组长度为3的数组空间</span></span><br><span class="line">data[<span class="number">0</span>] = <span class="number">10</span>;<span class="comment">//第一个元素赋值</span></span><br><span class="line">data[<span class="number">1</span>] = <span class="number">11</span>;<span class="comment">//第二个元素赋值</span></span><br><span class="line">data[<span class="number">2</span>] = <span class="number">12</span>;<span class="comment">//第三个元素赋值</span></span><br><span class="line"><span class="comment">//data.length 可以获取到该数组的长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; data.length;i++) &#123;</span><br><span class="line">System.out.println(data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组本身除了声明并开辟空间之外还有另外一种开辟模式.</p><p>范例:采用分布模式开辟数组空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分布式开辟一个数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class16</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">null</span>;<span class="comment">//声明</span></span><br><span class="line">data = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>];<span class="comment">//开辟了一个数组长度为3的数组空间</span></span><br><span class="line">data[<span class="number">0</span>] = <span class="number">10</span>;<span class="comment">//第一个元素赋值</span></span><br><span class="line">data[<span class="number">1</span>] = <span class="number">11</span>;<span class="comment">//第二个元素赋值</span></span><br><span class="line">data[<span class="number">2</span>] = <span class="number">12</span>;<span class="comment">//第三个元素赋值</span></span><br><span class="line"><span class="comment">//data.length 可以获取到该数组的长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; data.length;i++) &#123;</span><br><span class="line">System.out.println(data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是千万要记住,数组属于引用数据类型,所以在数组使用之前一定要开辟空间(实例化),如果使用了没有开辟空间的数组,则一定会出现NullPointException异常信息:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class16</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">null</span>;<span class="comment">//声明</span></span><br><span class="line">System.out.println(data.length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一原则和之前讲解的对象操作是完全相同的.</p><h1 id="数组引用传递"><a href="#数组引用传递" class="headerlink" title="数组引用传递"></a>数组引用传递</h1><p>既然数组也属于引用数据类型，那么也一定可以发生引用传递。在这之前首先来研究一下数组的空间开辟。</p><p>范例：观察一道程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class17</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">null</span>;</span><br><span class="line">data = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>];<span class="comment">//开辟一个长度为3的数组</span></span><br><span class="line">data[<span class="number">0</span>] = <span class="number">10</span>;<span class="comment">//第一个元素</span></span><br><span class="line">data[<span class="number">1</span>] = <span class="number">20</span>;<span class="comment">//第二个元素</span></span><br><span class="line">data[<span class="number">2</span>] = <span class="number">30</span>;<span class="comment">//第三个元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/OOP5.PNG" alt></p><p>那么既然说到了引用数据类型，那么就一定可以发生引用传递，而现在的引用传递的本质也一定是：同一块堆内存空间可以被不同的栈内存所指向。</p><p>范例：定义一个程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>];<span class="comment">//开辟了一个长度为3的数组</span></span><br><span class="line"><span class="keyword">int</span> temp [] = <span class="keyword">null</span>;<span class="comment">//声明了对象</span></span><br><span class="line">data[<span class="number">0</span>] = <span class="number">10</span>;<span class="comment">//第一个元素</span></span><br><span class="line">data[<span class="number">1</span>] = <span class="number">20</span>;<span class="comment">//第二个元素</span></span><br><span class="line">data[<span class="number">2</span>] = <span class="number">30</span>;<span class="comment">//第三个元素</span></span><br><span class="line"><span class="comment">//如果要发生引用传递，就不要出现[]</span></span><br><span class="line">temp = data;</span><br><span class="line">temp[<span class="number">0</span>] = <span class="number">99</span>;<span class="comment">//修改数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; data.length;i++) &#123;</span><br><span class="line">System.out.println(data[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/OOP6.PNG" alt></p><p>引用传递分析都是一个套路。</p><h1 id="数组的静态初始化"><a href="#数组的静态初始化" class="headerlink" title="数组的静态初始化"></a>数组的静态初始化</h1><p>在之前所进行的数组定义都有一个明显特点：数组首先开辟内存空间，而后再使用索引进行内容设置，实际上这种做法都叫做动态初始化，而如果希望数组在定义的时候可以同时设置内容，那么就可以采用静态初始化完成。</p><p>数组的静态初始化的语法一共分为以下两种类型：</p><ul><li>简化格式：</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名称 [] = &#123;值，值...&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>完整格式：</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名称 <span class="string">[]</span> = new 数据类型 <span class="string">[]</span> &#123;值，值...&#125;;</span><br></pre></td></tr></table></figure><p>范例：采用静态初始化定义数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的静态初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; data.length;i++) &#123;</span><br><span class="line">System.out.println(data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在开发之中，对于静态数组的初始化强烈建议使用完整语法格式，这样可以轻松使用匿名数组这一概念。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的静态初始化 完整写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array5</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;.length);</span><br><span class="line"><span class="comment">//这是个匿名数组，而直接&#123;1,2,3&#125;.length就会报错</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后使用静态方法定义数组的时候一定要写上完整格式。</p><blockquote><p>数组的最大缺陷：长度固定。</p></blockquote><h1 id="二维数组-了解"><a href="#二维数组-了解" class="headerlink" title="二维数组(了解)"></a>二维数组(了解)</h1><p>在之前的所使用的数组发现只需要一个索引就可以进行访问，那么这样的数组非常像一个数据行的概念。</p><table><thead><tr><th>索引</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>内容</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td></tr></tbody></table><p>现在通过一个索引就可以取得唯一的一个记录。所以这样的数组可以简单理解为一维数组，而二维数组本质上指的就是一个行列集合，也就是说如果要想确定某一个数据需要行索引和列索引来进行定位。</p><table><thead><tr><th>索引</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>0</td><td>234</td><td>23</td><td>243</td><td>243</td><td>243</td><td>243</td></tr><tr><td>1</td><td>654</td><td>564</td><td>465</td><td>784</td><td>354</td><td>543</td></tr></tbody></table><p>如果要想确定一个数据则数组使用的结构就是<code>数组名称[行索引][列索引]</code>，所以这样的结构就是一个表的结构。</p><p>那么对于二维数组的定义有两种声明形式：</p><ul><li>数组的动态初始化</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名称 [<span class="string"></span>][<span class="symbol"></span>] = new 数据类型 [<span class="string">行个数</span>][<span class="symbol">列个数</span>]；</span><br></pre></td></tr></table></figure><ul><li>数组的静态初始化</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名称 [<span class="string"></span>][<span class="symbol"></span>] = new 数据类型[][]&#123;</span><br><span class="line">  &#123;值,值,...&#125;,&#123;值,值,...&#125;,&#123;值,值,...&#125;&#125;；</span><br></pre></td></tr></table></figure><p>范例：定义一个二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array6</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="comment">//此时的数组并不是一个等列数组</span></span><br><span class="line"><span class="keyword">int</span> data [][] = <span class="keyword">new</span> <span class="keyword">int</span> [][] &#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;;<span class="comment">//如果进行输出的时候一定要使用双重循环，外部循环控制输出的行数，而内部循环控制输出的列数。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; data.length;x++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>;y &lt; data[x].length;y++) &#123;</span><br><span class="line">System.out.println(data[x][y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于输出麻烦，所以可以忽略了，你们所进行的开发之中，出现二维数组的几率并不高。</p><h1 id="数组与方法调用（重点）"><a href="#数组与方法调用（重点）" class="headerlink" title="数组与方法调用（重点）"></a>数组与方法调用（重点）</h1><p>数组是一个引用数据类型，那么所有的引用数据类型都可以为其设置多个栈内存指向。所以在进行数组操作的时候，也可以将其通过方法进行处理。</p><p>范例：方法接受数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法接受数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array7</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">printArray(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个专门进行数组输出的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> temp [])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; temp.length;x++) &#123;</span><br><span class="line">System.out.print(temp[x] + <span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在方法的参数上由于需要接受一个整型数组，所以就实现了一个最为基础的引用传递操作。</p><p>范例：方法返回数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法返回数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array8</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = init();<span class="comment">//接受数组</span></span><br><span class="line">printArray(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时的方法希望返回一个整型数组，所以返回值类型定义为整型数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] init() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个专门进行数组输出的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> temp [])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; temp.length;x++) &#123;</span><br><span class="line">System.out.print(temp[x] + <span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么现在的数组上发生了引用传递，那么也就意味着方法接受数组之后也可以对数组内容进行修改。</p><p>范例：定义一个方法，该方法可以实现数组的内容乘2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个方法，该方法可以实现数组的内容乘2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array9</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = init();<span class="comment">//接受数组</span></span><br><span class="line">inc(data);<span class="comment">//扩大数组中的内容</span></span><br><span class="line">printArray(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; arr.length;x++) &#123;</span><br><span class="line">arr[x] *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时的方法希望返回一个整型数组，所以返回值类型定义为整型数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] init() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个专门进行数组输出的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> temp [])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; temp.length;x++) &#123;</span><br><span class="line">System.out.print(temp[x] + <span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存分析：</p><p><img src="http://oujvmc3la.bkt.clouddn.com/array1.PNG" alt></p><h1 id="java对数组的支持"><a href="#java对数组的支持" class="headerlink" title="java对数组的支持"></a>java对数组的支持</h1><p>在java给出的类库之中也提供有对于数组操作的相关支持方法；</p><h2 id="数组排序：java-util-Arrays-sort-数组名称"><a href="#数组排序：java-util-Arrays-sort-数组名称" class="headerlink" title="数组排序：java.util.Arrays.sort(数组名称);"></a>数组排序：java.util.Arrays.sort(数组名称);</h2><p>范例：实现数组排序操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array10</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">55</span>,<span class="number">33</span>,<span class="number">22</span>,<span class="number">64</span>,<span class="number">47</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> zf [] = <span class="keyword">new</span> <span class="keyword">char</span> [] &#123;<span class="string">'v'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>&#125;;</span><br><span class="line">java.util.Arrays.sort(data);</span><br><span class="line">java.util.Arrays.sort(zf);</span><br><span class="line">printArray(data);</span><br><span class="line">printArray(zf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个专门进行数组输出的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> temp [])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; temp.length;x++) &#123;</span><br><span class="line">System.out.print(temp[x] + <span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">char</span> temp [])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; temp.length;x++) &#123;</span><br><span class="line">System.out.print(temp[x] + <span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要是基本数据类型的数组，<code>Arrays.sort()</code>都可以轻松的实现排序处理。</p><h2 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h2><p>指的是将一个数组的部分内容替换掉另外一个数组的部分内容；</p><ul><li>方法（加工）：<code>System.arraycopy(源数组名称,源数组开始点,目标数组名称,目标数组开始点,拷贝长度);</code></li></ul><p>范例：实现数组拷贝</p><ul><li>源数组a：1,2,3,4,5,6,7,8,9</li><li>源数组b：11,22,33,44,55,66,77,88，99</li><li>替换后的数组a：1,55,66,77,5,6,7,8,9</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组拷贝</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array11</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> dataA [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dataB [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>&#125;;</span><br><span class="line">System.arraycopy(dataB, <span class="number">4</span>, dataA, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">printArray(dataA);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> temp[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ;x &lt; temp.length;x++) &#123;</span><br><span class="line">System.out.print(temp[x] + <span class="string">"、"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这些基本的数组操作只能作为逻辑玩玩，开发用不上。</p></blockquote><h1 id="数组案例：数组数据统计"><a href="#数组案例：数组数据统计" class="headerlink" title="数组案例：数组数据统计"></a>数组案例：数组数据统计</h1><p>现在假设给你一个数组，要求可以统计出该数组的最大值，最小值，平均值以及总和。这种操作肯定是要通过循环的形式完成的。</p><p>范例：基本实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的基本数据处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array12</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> list [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">66</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> max = list[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> min = list[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> sum = list[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt; list.length;x++) &#123;</span><br><span class="line"><span class="keyword">if</span>(list[x] &gt; max) &#123;</span><br><span class="line">max = list[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(list[x] &lt; min) &#123;</span><br><span class="line">min = list[x];</span><br><span class="line">&#125;</span><br><span class="line">sum += list[x];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"最大值为"</span>+max);</span><br><span class="line">System.out.println(<span class="string">"最小值为"</span>+min);</span><br><span class="line">System.out.println(<span class="string">"和为"</span>+sum);</span><br><span class="line">System.out.println(<span class="string">"平均值为"</span>+sum/(<span class="keyword">double</span>)list.length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的确是实现了我们想要的功能，但是随之会发现主方法的代码有些多。主方法实际上就相当于一个客户端调用，那么既然是客户端调用，里面的代码应该是越简单越好。</p><p>范例：改进代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array13</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">66</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> result [] = stat(data);</span><br><span class="line">System.out.println(<span class="string">"最大值为"</span>+result[<span class="number">0</span>]);</span><br><span class="line">System.out.println(<span class="string">"最小值为"</span>+result[<span class="number">1</span>]);</span><br><span class="line">System.out.println(<span class="string">"和为"</span>+result[<span class="number">2</span>]);</span><br><span class="line">System.out.println(<span class="string">"平均值为"</span>+result[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时需要返回的数据一共有四个，那么一个方法只能返回一种数据类型，那么就应该用数组返回</span></span><br><span class="line"><span class="comment">//retData[0]为最大值，retData[1]为最小值，数组[2]为和，数组[3]为平均值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span>[] stat(<span class="keyword">int</span> data[]) &#123;</span><br><span class="line"><span class="keyword">double</span> retData [] = <span class="keyword">new</span> <span class="keyword">double</span> [<span class="number">4</span>];</span><br><span class="line">retData[<span class="number">0</span>] = data[<span class="number">0</span>];</span><br><span class="line">retData[<span class="number">1</span>] = data[<span class="number">0</span>];</span><br><span class="line">retData[<span class="number">2</span>] = data[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt; data.length;x++) &#123;</span><br><span class="line"><span class="keyword">if</span>(retData[<span class="number">0</span>] &lt; data[x]) &#123;</span><br><span class="line">retData[<span class="number">0</span>] = data[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(retData[<span class="number">1</span>] &gt; data[x]) &#123;</span><br><span class="line">retData[<span class="number">1</span>] = data[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">retData[<span class="number">2</span>]+=data[x];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">retData[<span class="number">3</span>] = retData[<span class="number">2</span>]/data.length;</span><br><span class="line"><span class="keyword">return</span> retData;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行程序开发的时候，主方法不要涉及过于复杂的程序逻辑，只需要关注结果。</p><h1 id="数组案例：数组排序"><a href="#数组案例：数组排序" class="headerlink" title="数组案例：数组排序"></a>数组案例：数组排序</h1><p>在很多的面试题上很多都会出现数组排序的题目。这个时候你千万不要写上<code>java.util.array.sort(数组)</code>,而这种排序都是以我们的升序为主。</p><p>1、基础的排序操作：</p><p>冒泡排序：最终要进行的循环的次数为：n的n-1次方的次数，所以要循环的次数很多，时间复杂度要高。</p><p>范例：数组排序实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组排序实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array14</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>&#125;;</span><br><span class="line">sort(data);</span><br><span class="line">printArray(data);</span><br><span class="line"><span class="comment">//System.out.print(data[0]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> data[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; data.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; data.length - i -<span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(data[j] &gt; data[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = data[j];</span><br><span class="line">data[j] = data[j+<span class="number">1</span>];</span><br><span class="line">data[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> temp [])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; temp.length;x++) &#123;</span><br><span class="line">System.out.print(temp[x] + <span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组案例：数组转置"><a href="#数组案例：数组转置" class="headerlink" title="数组案例：数组转置"></a>数组案例：数组转置</h1><p>所谓的转置最为简单的理解就是首位交换。如果要实现这样的交换有两种实现思路：</p><h2 id="开辟一个新的等长数组，然后将数组倒序保存进去。"><a href="#开辟一个新的等长数组，然后将数组倒序保存进去。" class="headerlink" title="开辟一个新的等长数组，然后将数组倒序保存进去。"></a>开辟一个新的等长数组，然后将数组倒序保存进去。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组转置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array15</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> result [] = reserve(data);</span><br><span class="line">printArray(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] reserve(<span class="keyword">int</span> data []) &#123;</span><br><span class="line"><span class="keyword">int</span> result [] = <span class="keyword">new</span> <span class="keyword">int</span> [data.length];</span><br><span class="line"><span class="keyword">int</span> flat = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = data.length - <span class="number">1</span>;x &gt;= <span class="number">0</span>;x--) &#123;</span><br><span class="line">result[flat++]=data[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> data [])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;data.length;i++) &#123;</span><br><span class="line">System.out.print(data[i]+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/fanzhuan1.PNG" alt></p><p>使用此类模式最大的问题在于开辟了两块相同的堆内存空间，所以造成了空间浪费。</p><h2 id="思路2：在一个数组上完成。"><a href="#思路2：在一个数组上完成。" class="headerlink" title="思路2：在一个数组上完成。"></a>思路2：在一个数组上完成。</h2><p><img src="http://oujvmc3la.bkt.clouddn.com/fanzhuan2.PNG" alt></p><p><img src="http://oujvmc3la.bkt.clouddn.com/fanzhuan3.PNG" alt></p><p>这种转换只需要数组长度除以2就可以了。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组转置,一个数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array16</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> result [] = reserve(data);          <span class="comment">//反转</span></span><br><span class="line">printArray(result);<span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] reserve(<span class="keyword">int</span> data []) &#123;</span><br><span class="line"><span class="keyword">int</span> center = data.length / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tail = data.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; center;x++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = data[tail];</span><br><span class="line">data[tail] = data[head];</span><br><span class="line">data[head] = temp;</span><br><span class="line">head++;</span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> data [])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;data.length;i++) &#123;</span><br><span class="line">System.out.print(data[i]+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要进行二维数组的转置，那么肯定有一个前提：行列相等。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/fanzhuan4.PNG" alt></p><p>范例：保证中间轴不动（x==y）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多维数组转置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array17</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data [][] = <span class="keyword">new</span> <span class="keyword">int</span> [][] &#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">reserve(data);          <span class="comment">//反转</span></span><br><span class="line">printArray(data);<span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span> data [][])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; data.length;x++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y = x;y &lt; data[x].length;y++) &#123;</span><br><span class="line"><span class="keyword">if</span>(x != y) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = data[x][y];</span><br><span class="line">data[x][y] = data[y][x];</span><br><span class="line">data[y][x] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> data [][])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; data.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; data[i].length;j++) &#123;</span><br><span class="line">System.out.print(data[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组案例：二分查找"><a href="#数组案例：二分查找" class="headerlink" title="数组案例：二分查找"></a>数组案例：二分查找</h1><p>如果说现在要求你在指定的数组中查询一个数据的位置。那么现在可能想到最简化的实现方法：整体数组遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array18</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> search = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> data[] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">System.out.print(index(data,search));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">index</span><span class="params">(<span class="keyword">int</span> data[],<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x= <span class="number">0</span>;x &lt; data.length;x++) &#123;</span><br><span class="line"><span class="keyword">if</span>(data[x] == key) &#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的时间复杂度是n，也就是说数组中的数据都要进行一次遍历，这样我们才能确定我们需要查找的数据是否存在，那么现在想要进行更加快速的查找方式，最好的方法是进行我们的二分查找（折半查找）。</p><p>二分查找的前提是排序。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/erfenzz.PNG" alt></p><p>范例：实现二分查找（采用方法递归完成）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组二分法查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array19</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="comment">//二分法查找的前提的数组已经排序</span></span><br><span class="line"><span class="keyword">int</span> data[] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> search = <span class="number">6</span>;</span><br><span class="line">System.out.print(binarySearch(data,<span class="number">0</span>,data.length-<span class="number">1</span>,search));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(from &lt; to) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (from/<span class="number">2</span>)+(to/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(arr[mid]==key) &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; arr[mid]) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch(arr,from,mid-<span class="number">1</span>,key);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &gt; arr[mid]) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch(arr,mid+<span class="number">1</span>,to,key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象数组（核心）"><a href="#对象数组（核心）" class="headerlink" title="对象数组（核心）"></a>对象数组（核心）</h1><p>在之前所定义的数组都属于基本数据类型的数组，那么对象也可以将其定义为数组，这样的操作形式称为对象数组。</p><p>对象数组往往是以引用数据类型为主的定义，例如：类，接口，而且对象数组也分为两种定义格式：</p><ul><li>对象数组动态初始化：<code>类名称 对象数组名称 [] = new 类名称[长度];</code></li><li>对象数组的静态初始化：<code>类名称 对象数组名称 [] = new 类名称[]{实例化对象,...};</code></li></ul><p>范例：对象数组的动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象数组的动态初始化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"姓名："</span>+name+<span class="string">" ,年龄："</span>+age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Array20</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="comment">//动态初始化之后，对象数组中的每一个元素都是其数据类型的默认值</span></span><br><span class="line">Person per [] = <span class="keyword">new</span> Person [<span class="number">3</span>];<span class="comment">//动态初始化</span></span><br><span class="line">per[<span class="number">0</span>] = <span class="keyword">new</span> Person(<span class="string">"王凯"</span>,<span class="number">20</span>);</span><br><span class="line">per[<span class="number">1</span>] = <span class="keyword">new</span> Person(<span class="string">"云"</span>,<span class="number">21</span>);</span><br><span class="line">per[<span class="number">2</span>] = <span class="keyword">new</span> Person(<span class="string">"贵"</span>,<span class="number">22</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; per.length;x++) &#123;</span><br><span class="line">System.out.print(per[x].getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象数组的静态初始化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n,<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"姓名："</span>+name+<span class="string">" ，年龄："</span>+age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array21</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">Person per [] = <span class="keyword">new</span> Person [] &#123;</span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">"王凯"</span>,<span class="number">22</span>),</span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">"云"</span>,<span class="number">21</span>),</span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">"贵"</span>,<span class="number">23</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; per.length;x++) &#123;</span><br><span class="line">System.out.println(per[x].getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个对象可以保存更多的属性，所以对象数组可以保存的内容要比基本数据类型更多。那么应用的也就更多，所有的开发必定都存在对象数组的概念。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/OBar.PNG" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于java数组的定义与使用&lt;/p&gt;
&lt;h1 id=&quot;数组基本概念&quot;&gt;&lt;a href=&quot;#数组基本概念&quot; class=&quot;headerlink&quot; title=&quot;数组基本概念&quot;&gt;&lt;/a&gt;数组基本概念&lt;/h1&gt;&lt;p&gt;数组在开发之中一定会使用,但是像以下讲解的时候这么用的数组少了.
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java类与对象</title>
    <link href="https://blog.loong.io/2018/01/02/java/"/>
    <id>https://blog.loong.io/2018/01/02/java/</id>
    <published>2018-01-02T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.194Z</updated>
    
    <content type="html"><![CDATA[<p>类与对象是整个面向对象设计的核心所在，也是所有概念的基础。类的本身属于引用数据类型，所以类的使用会牵扯到内存的分配问题。</p><h1 id="认识类与对象"><a href="#认识类与对象" class="headerlink" title="认识类与对象"></a>认识类与对象</h1><p>现在大家可以听懂本人说话，我们具备共同的特征：我们都是中国人，母语都是汉语，而且身体正常。具备这个特征的人很多，那么就自然是一个群体，而群体的特征就是整个类的定义概念。所谓的类描述的就是共性特征。</p><p>任何时候只是依靠共性特征是无法进行精准描述的，那么就需要一些个性化的特点。就可以描述一个个独立的事物。这样就可以推断出：所谓的类指的就是一个共性的概念，而对象指的是一个具体的可以使用的事物。</p><p>那么很明显，在实际的开发之中一定需要首先产生类，而后才可以产生对象。那么对象的所有操作行为都一定在类中进行了完整定义。类中没有定义的功能，那么对象一定是无法使用。</p><p>类中的组成：</p><ul><li>方法（操作的行为）</li><li>属性（变量，描述每一个对象的具体特点）</li></ul><h1 id="类与对象的定义"><a href="#类与对象的定义" class="headerlink" title="类与对象的定义"></a>类与对象的定义</h1><p>如果在程序之中要进行类的定义你可以使用class关键字完成，而定义的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名称 </span>&#123; <span class="comment">//所有的程序都要求以“&#123;&#125;”作为分界符</span></span><br><span class="line"></span><br><span class="line">          属性；</span><br><span class="line"></span><br><span class="line">          属性；</span><br><span class="line"></span><br><span class="line">          方法（）&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的方法不在由主类直接调用，而是要通过对象进行调用。</p><p>范例：定义类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个类中只是定义了两个属性和一个方法，特别需要注意的是，类中可以定义的属性数量和方法数量是没有限制的，而且在编写的时候，每一个方法中的代码尽量不要特别长。</p><p>类定义完成之后是不能够直接去使用的，如果要想使用类必须要产生对象，而对象的定义分为以下两种语法形式：</p><ul><li>声明并实例化对象：<code>类名称 对象名称 = new 类名称（）;</code></li><li>分步进行对象实例化：<pre><code>1. 声明对象：类名称 对象名称 = null；2. 实例化对象：对象名称 = new 类名称（）；</code></pre></li></ul><p>引用数据类型的最大特征在于内存的分配操作，只要出现有关键字new那么就只有一个解释：开辟新内存（内存是不可能无限开辟的，所以这个时候所谓的性能调优调整的就是内存问题）。</p><p>所有的对象只有实例化之后才可以真正的使用，而类的使用都是围绕着类进行的，那么此时就有两种形式：</p><ul><li>调用类中的属性：<code>对象.属性 = 内容；</code></li><li>调用类中的方法：<code>对象.方法（）；</code></li></ul><p>范例：声明并实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person kai = <span class="keyword">new</span> Person();<span class="comment">//这个时候就表示我们实例化了一个kai对象</span></span><br><span class="line">kai.name = <span class="string">"wangkai"</span>;<span class="comment">//设置对象中的属性</span></span><br><span class="line">kai.age = <span class="number">23</span>;</span><br><span class="line">kai.info();<span class="comment">//调用方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就实现了一个最基本的类的定义以及对象的使用。</p><h1 id="对象内存分析"><a href="#对象内存分析" class="headerlink" title="对象内存分析"></a>对象内存分析</h1><p>如果要进行对象的产生分析，那么首先就必须清楚引用类型。引用类型指的是内存空间的操作。而对于现在的内存主要会使用两块内存空间：</p><ul><li>堆内存空间：保存真正的数据，堆内存保存的是对象的属性信息；</li><li>栈内存空间：保存的堆内存的地址，堆内存的操作权，如果想要简化理解，可以理解为保存的是对象名称；</li></ul><p>所以按照之前的程序，那么现在就可以给出如下的内存参考图：</p><p><img src="http://oujvmc3la.bkt.clouddn.com/OOP1.PNG" alt></p><p>但是对于对象的产生实际上要知道一共会有两种一共会有两种格式，现在使用的是声明并实例化对象的格式，那么也可以使用分布的方式来完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person kai = <span class="keyword">null</span>;<span class="comment">//声明一个新的对象</span></span><br><span class="line">kai = <span class="keyword">new</span> Person();<span class="comment">//实例化了一个对象</span></span><br><span class="line">kai.name = <span class="string">"wangkai"</span>;<span class="comment">//设置对象中的属性</span></span><br><span class="line">kai.age = <span class="number">23</span>;</span><br><span class="line">kai.info();<span class="comment">//调用方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分布式具体内存分析：</p><p><img src="http://oujvmc3la.bkt.clouddn.com/OOP2.PNG" alt></p><p>但是千万要记住一点，对象（所有的引用数据类型）必须在其开辟空间之后才可以使用。如果使用了未开辟内存空间的引用类型，则将出现NullPointrException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person kai = <span class="keyword">null</span>;<span class="comment">//声明一个新的对象</span></span><br><span class="line">kai.info();<span class="comment">//调用方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候我们只是声明了对象，而并没有为其开辟堆内存空间，而本程序在编译的时候不会产生任何的语法错误，但是在执行的时候会出现如下的错误提示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException</span><br><span class="line">at 类与对象.Class3.main(Class3.java:<span class="number">15</span>)</span><br></pre></td></tr></table></figure><p>“NullPointerException”是在你们整个的开发人生之中会一直陪伴到你最后的一个异常。只有引用数据类型（数组，类，接口）才会产生此类异常，以后出现了就根据错误的位置观察该对象是否实例化。</p><h1 id="引用传递初次分析"><a href="#引用传递初次分析" class="headerlink" title="引用传递初次分析"></a>引用传递初次分析</h1><p>所有初学者最难的部分就是 引用传递分析。以后的开发之中都是引用传递。</p><p>引用传递的本质就在于别名，而这个别名只不过是放在了栈内存之中，即：一块堆内存可以被多个栈内存所指向。</p><p>范例：观察引用传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用传递</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person kai = <span class="keyword">new</span> Person();<span class="comment">//声明一个新的对象</span></span><br><span class="line">kai.name = <span class="string">"王凯"</span>;</span><br><span class="line">kai.age = <span class="number">23</span>;</span><br><span class="line">Person wang = kai;</span><br><span class="line">wang.name = <span class="string">"小王"</span>;</span><br><span class="line">kai.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此程序的执行观察时需要通过内存关系图来进行：</p><p><img src="http://oujvmc3la.bkt.clouddn.com/OOP3.PNG" alt></p><p>范例：观察引用传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用传递</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person per1 = <span class="keyword">new</span> Person();<span class="comment">//声明一个新的对象</span></span><br><span class="line">Person per2 = <span class="keyword">new</span> Person();</span><br><span class="line">per1.name = <span class="string">"wangkai"</span>;</span><br><span class="line">per1.age = <span class="number">23</span>;</span><br><span class="line">per2.name = <span class="string">"kai"</span>;</span><br><span class="line">per2.age = <span class="number">23</span>;</span><br><span class="line">per2 = per1;</span><br><span class="line">per2.name = <span class="string">"hello"</span>;</span><br><span class="line">per2.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察此时的内存分析图：</p><p><img src="http://oujvmc3la.bkt.clouddn.com/OOP4.PNG" alt></p><p>在程序开发过程之中，所谓的垃圾空间指的就是没有任何栈内存指向的堆内存空间，所有的垃圾空间将不定期被java中的垃圾收集器（GC，Garbage Collector）进行回收以实现内存空间的释放，不过从实际开发来讲，虽然java有提供gc，但是gc也会造成程序性能的下降，所以开发过程之中一定要控制你对象的产生数量，即：无用的对象尽可能的少产生。</p><h1 id="private（私有）实现封装处理"><a href="#private（私有）实现封装处理" class="headerlink" title="private（私有）实现封装处理"></a>private（私有）实现封装处理</h1><p>面向对象之中有三大主要特征：封装，继承，多态，对于封装是整个java中最复杂的概念，而此次所讲的内容也不过是封装中的基本概念而已。</p><p>要想清楚封装，首先必须清楚如果没有封装会怎样。</p><p>范例：观察如下的一个程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//观察如下程序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class5</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person per1 = <span class="keyword">new</span> Person();<span class="comment">//声明一个新的对象</span></span><br><span class="line">per1.name = <span class="string">"wangkai"</span>;</span><br><span class="line">per1.age = -<span class="number">230</span>;</span><br><span class="line">per1.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序实际上是不会出现任何的语法错误的，因为从int型的数据保存范围来讲，是允许保存有负数的。但是不会有一个人的年龄是-230，那么这个时候也就证明这个时候属于业务逻辑出错。</p><p>此时如果要想回避此类问题，那么首先要解决的就是如何可以让对象不能够直接操作年龄的属性，或者说是如何让类的外部不能够操作类中的敏感内容。所以此时解决问题的核心概念就在于：如何让内部的操作对外部不可见，此时就可以使用private关键字来实现。</p><p>范例：利用private来实现封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用private实现封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line"><span class="keyword">private</span> String name = <span class="string">"wangkai"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class6</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person1 per1 = <span class="keyword">new</span> Person1();<span class="comment">//声明一个新的对象</span></span><br><span class="line">per1.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类中的属性和方法上都可以使用private定义，但是大部分情况下很少会在方法上使用private。一旦属性的声明上使用了private定义之后，那么如果其他类直接进行该属性访问的时候就将出现如下的错误提示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.Error: Unresolved compilation problems:</span><br><span class="line">The field Person2.name is not visible</span><br><span class="line">The field Person2.age is not visible</span><br></pre></td></tr></table></figure><p>此时使用了private声明之后属性安全了，外部无法直接操作了，但是新的问题又来了。那么如果现在要想进行private私有属性的访问，按照java是设计原则就可以使用setter，getter访问：</p><ul><li>setter方法：主要用于进行属性内容的设置；<pre><code>private String name：public void setName（String n）</code></pre></li><li>getter方法：主要用于属性内容的取得；<pre><code>private String name： public void getName（）</code></pre></li></ul><p>范例：扩展person类中的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setter，getter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person8</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line"><span class="keyword">private</span> String name = <span class="string">"wangkai"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class8</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person8 per1 = <span class="keyword">new</span> Person8();<span class="comment">//声明一个新的对象</span></span><br><span class="line">per1.setName(<span class="string">"wangkai"</span>);</span><br><span class="line">per1.setAge(<span class="number">23</span>);</span><br><span class="line">per1.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果说现在非要进行检测，那么可以在setter里面完成。</p><p>范例：setter检测数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以在setter里面检测数据是否符合要求</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person9</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line"><span class="keyword">private</span> String name = <span class="string">"wangkai"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">0</span> &amp;&amp; a &lt; <span class="number">150</span>) &#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class9</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person9 per1 = <span class="keyword">new</span> Person9();<span class="comment">//声明一个新的对象</span></span><br><span class="line">per1.setName(<span class="string">"wangkai"</span>);</span><br><span class="line">per1.setAge(<span class="number">160</span>);</span><br><span class="line">per1.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类的设计原则：</p></blockquote><blockquote><p>以后再编写类的时候类中的属性必须使用private封装。而使用private封装的属性如果需要被外部所使用，那么按照格式定义相应的setter，getter方法。<br>private实现封装的最大特征在于：只允许本类访问，而不允许外部访问。<br>private只是封装的第一步。</p></blockquote><h1 id="构造方法与匿名对象"><a href="#构造方法与匿名对象" class="headerlink" title="构造方法与匿名对象"></a>构造方法与匿名对象</h1><p>在之前讲解了实例化对象的产生格式：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">①类名称 ②对象名称 = ③<span class="keyword">new</span> <span class="type"></span>④类名称（）；</span><br></pre></td></tr></table></figure><p>对于以上的格式观察组成部分：</p><ul><li>①类名称：任何的对象都应该有其对应的类，因为没有类就不知道对象具备的功能；</li><li>②对象名称：是一个唯一的标记，表示的是以后的操作的属性的标记；</li><li>③new：表示开辟新的堆内存空间；</li><li>④类名称（）：构造方法。</li></ul><p>通过以上的分析就应该已经清楚了，所谓的构造方法指的就是在使用关键字new实例化新对象的时候来调用的操作方法，但是对于构造方法定义也需要遵守如下原则：<code>方法名称必须与类名称相同，并且构造方法没有返回值类型声明，同时每一个类中一定会至少存在有一个构造方法，如果类中没有明确的定义任何一个构造方法，那么将自动生成一个无参的，什么都不做的构造方法。</code></p><p>范例：定义一个无参的什么都不做的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类中定义构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person10</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line"><span class="keyword">private</span> String name = <span class="string">"wangkai"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person10</span><span class="params">()</span> </span>&#123;<span class="comment">//构造函数，与类名称同名，并且构造方法没有返回值类型声明</span></span><br><span class="line">System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">0</span> &amp;&amp; a &lt; <span class="number">150</span>) &#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class10</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person10 per1 = <span class="keyword">new</span> Person10();<span class="comment">//声明一个新的对象</span></span><br><span class="line">per1.setName(<span class="string">"wangkai"</span>);</span><br><span class="line">per1.setAge(<span class="number">160</span>);</span><br><span class="line">per1.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>疑问：既然构造方法中没有返回数据，为什么不使用void定义呢？</p><p>现在的类中的组成：属性，普通方法，构造方法。</p><p>属性是在对象开辟堆内存的时候就开辟的空间。</p><p>构造方法是在使用关键字new同时调用的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;<span class="comment">//这是一个构造方法，结构与普通方法截然不同，无返回值声明；</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通方法是在对象已经实例化完成了（空间开辟了，构造方法执行了）再调用的，可以调用多次；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>()</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Person</span><span class="params">()</span></span>&#123;<span class="comment">//这是一个普通方法，虽然命名不标准；</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于类中可以自动生成的无参构造函数方法实际上是有一个前提的：你类中没有定义任何的构造方法，相反，如果你现在类中已经定义了构造方法，那么此类默认的构造方法将不会自动生成。</p><p>范例：类中定义一个有参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类中定义一个有参数的构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person11</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line"><span class="keyword">private</span> String name = <span class="string">"wangkai"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person11</span><span class="params">(String n,<span class="keyword">int</span> a)</span> </span>&#123;<span class="comment">//构造函数，与类名称同名，并且构造方法没有返回值类型声明</span></span><br><span class="line">name = n;<span class="comment">//setName(n)</span></span><br><span class="line">setAge(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">0</span> &amp;&amp; a &lt; <span class="number">150</span>) &#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class11</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person11 per1 = <span class="keyword">new</span> Person11(<span class="string">"wangkai"</span>,<span class="number">30</span>);<span class="comment">//声明一个新的对象</span></span><br><span class="line">per1.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法的作用：</p><ol><li><p>构造方法的调用和对象内存分配几乎是同步完成的，所以可以利用构造方法设置类中的属性内容，构造方法可以为类中的属性进行初始化处理；</p></li><li><p>通过构造方法设置内容实际上就可以避免重复的setter调用了。</p></li></ol><p>setter方法除了具备有设置内容之外，也可以承担修改数据的操作；<br>既然构造方法本身属于方法，那么方法就一定可以进行重载，而构造方法的重载更加简单，因为方法名称就是类名称，你能够做的只有实现参数的类型或个数不同这一概念。</p><p>范例：构造方法重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数重载</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person12</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person12</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person12</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person12</span><span class="params">(String n,<span class="keyword">int</span> a)</span> </span>&#123;<span class="comment">//构造函数，与类名称同名，并且构造方法没有返回值类型声明</span></span><br><span class="line">name = n;<span class="comment">//setName(n)</span></span><br><span class="line">setAge(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">0</span> &amp;&amp; a &lt; <span class="number">150</span>) &#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class12</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line">Person12 per1 = <span class="keyword">new</span> Person12(<span class="string">"wangkai"</span>);<span class="comment">//声明一个新的对象</span></span><br><span class="line">per1.setAge(<span class="number">23</span>);</span><br><span class="line">per1.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行构造方法重载的时候请注意以下定义结构。建议若干个构造方法按照参数的个数采用升序或降序排列。</p><p>同时也需要注意一点：在进行类定义的时候，请按照如下顺序完成：</p><ol><li>第一部分写属性；</li><li>第二部分写构造方法；</li><li>第三部分写普通方法；</li></ol><p>发现构造方法可以传递属性的内容了，那么很多时候为了使用方便，往往会使用匿名对象完成。</p><p>范例：匿名对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person13</span></span>&#123;<span class="comment">//定义一个类，类名称要求首字母大写</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person13</span><span class="params">(String n,<span class="keyword">int</span> a)</span> </span>&#123;<span class="comment">//构造函数，与类名称同名，并且构造方法没有返回值类型声明</span></span><br><span class="line">name = n;<span class="comment">//setName(n)</span></span><br><span class="line">setAge(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">0</span> &amp;&amp; a &lt; <span class="number">150</span>) &#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name = "</span>+ name + <span class="string">",age = "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class13</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类名称 对象名称 = new 类名称（）；</span></span><br><span class="line"><span class="keyword">new</span> Person13(<span class="string">"wangkai"</span>,<span class="number">23</span>).info();<span class="comment">//匿名对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为匿名对象不会有任何的栈空间所指向，所以使用一次之后就将成为垃圾。</p><p>你现在是否使用匿名对象没有绝对定论，你一切都可以使用有名对象。</p><p>构造方法每个类中至少存在一个；</p><p>构造方法的名称与类名称相同，无返回值类型定义；</p><p>构造方法允许重载，重载时只需要考虑方法的参数类型或个数即可。</p><h1 id="简单java类"><a href="#简单java类" class="headerlink" title="简单java类"></a>简单java类</h1><p>第一个代码模型：简单java类</p><p>现在假设有这样一个要求，定义一个雇员类，该类中会包含雇员编号，姓名，职位，基本工资，佣金几个属性信息。</p><p>那么这种类称为简单java类，既然是简单java类就有自己明确的开发要求：</p><ul><li>类名称应该有意义，可以明确的描述出某一类，例如：Emp，Member，Dept；</li><li>类中的所有属相必须使用private封装，所有的属性必须 按照要求提供setter，getter方法；</li><li>类中可以定义若干个构造方法，但是必须保留有一个无参构造方法；</li><li>类中的所有方法都不允许出现任何的System.out语句，所有的输出必须交给调用处完成。</li><li>类中应该提供一个返回类完整信息的方法，这个方法名称暂时为getInfo（）。</li></ul><p>范例：编写程序类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单java类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> grade;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> i,String n,String s,<span class="keyword">int</span> g,<span class="keyword">double</span> so)</span> </span>&#123;</span><br><span class="line">setId(i);</span><br><span class="line">setName(n);</span><br><span class="line">setSex(s);</span><br><span class="line">setGrade(g);</span><br><span class="line">setScore(so);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">id = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">sex = s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(<span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line">grade = g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> so)</span> </span>&#123;</span><br><span class="line">score = so;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"id= "</span> + id + <span class="string">",name= "</span> + name + <span class="string">",sex= "</span> + sex + <span class="string">",grade = "</span> + grade +<span class="string">",score = "</span> + score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class14</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">Student kai = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">"wangkai"</span>,<span class="string">"man"</span>,<span class="number">2</span>,<span class="number">90.0</span>);</span><br><span class="line">System.out.println(kai.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>涵盖了之前所讲解的面向对象概念。</p><p>以后的开发中搞得最多的就是简单java类，从基础的web开发，到分布式开发，到处都是简单java类。<br>开发原则一定要记牢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类与对象是整个面向对象设计的核心所在，也是所有概念的基础。类的本身属于引用数据类型，所以类的使用会牵扯到内存的分配问题。&lt;/p&gt;
&lt;h1 id=&quot;认识类与对象&quot;&gt;&lt;a href=&quot;#认识类与对象&quot; class=&quot;headerlink&quot; title=&quot;认识类与对象&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象简介</title>
    <link href="https://blog.loong.io/2018/01/01/java/"/>
    <id>https://blog.loong.io/2018/01/01/java/</id>
    <published>2018-01-01T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.189Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象是一种程序的设计方法，但是并不表示所有的开发者都认同面向对象。因为有很多开发者认为面向对象过于复杂，所以更多人愿意使用函数式编程。</p><p>面向对象的前身属于面向过程，如果要想笼统的去解释这两种开发模型的区别，最好的例子：面向过程是解决问题，而面向对象是模块化设计。对于现在的程序开发更多情况下就像是汽车组装一样，不同的工厂生产不同的配件。将所有的零件组装在一起就可以形成一辆汽车，并且当一个零件坏掉的时候还可以进行配装。</p><p>在面向对象里面实际上还有很多的特点，归结起来有如下三类：</p><ul><li>封装性：内部的操作对外部而言不可见；</li><li>继承性：在上一辈的基础上继续发展；</li><li>多态性：这是一个最为重要的概念，利用多态性才可以得到良好的设计；</li></ul><p>那么在进行面向对象开发的时候也有三个阶段：OOA（面向对象分析），OOD（面向对象设计），OOP（面向对象编程）。</p><p>所有的程序的开发原则都离不开现实生活。如果从程序的开发角度来讲，面向对象给我们最大的特征：可以进行生活的抽象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面向对象是一种程序的设计方法，但是并不表示所有的开发者都认同面向对象。因为有很多开发者认为面向对象过于复杂，所以更多人愿意使用函数式编程。&lt;/p&gt;
&lt;p&gt;面向对象的前身属于面向过程，如果要想笼统的去解释这两种开发模型的区别，最好的例子：面向过程是解决问题，而面向对象是模块化
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java运算符</title>
    <link href="https://blog.loong.io/2017/12/23/java/"/>
    <id>https://blog.loong.io/2017/12/23/java/</id>
    <published>2017-12-23T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.180Z</updated>
    
    <content type="html"><![CDATA[<p>数学整个程序的基础，所以各种常用的计算符号，基本java都会提供。程序可以提供的只是最为基础的数学运算支持，如果需要完成更为复杂的计算，你需要自己进行二进制的处理了。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/%E8%BF%90%E7%AE%97%E7%AC%A6.PNG" alt></p><h1 id="基础数学运算符"><a href="#基础数学运算符" class="headerlink" title="基础数学运算符"></a>基础数学运算符</h1><p>在以后你写的代码之中，千万别写出以下的复杂计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> result = x - y++ + x * y -- - --x * y / x--;</span><br><span class="line">System.out.println(result);<span class="comment">//180</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于程序的计算而言，千万别写的谁也不知道。以后写的代码都写简单代码。</p><h2 id="基本四则运算"><a href="#基本四则运算" class="headerlink" title="基本四则运算"></a>基本四则运算</h2><p>基本四则运算实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">System.out.println(x  - y);<span class="comment">//-10</span></span><br><span class="line">System.out.println(x  + y);<span class="comment">//30</span></span><br><span class="line">System.out.println(x  * y);<span class="comment">//200</span></span><br><span class="line">System.out.println(x  / y);<span class="comment">//0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是也需要考虑另外一种情况，所有的运算符都是有其优先级的，这些优先级不需要背，一般用括号来改变优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">System.out.println((x  - y)*(x + y));<span class="comment">//-300</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h2><p>另外在数学计算里面有一个自增和自减的操作。</p><p>自增运算：</p><ul><li>++ 变量：先自增后进行运算</li><li>变量 ++：先运算再进行自增</li></ul><p>自减运算：</p><ul><li>–变量：先进行自减处理，然后进行运算</li><li>变量–：先进行运算，而后进行自减处理</li></ul><p>自增观察：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> result = ++x * y;</span><br><span class="line"><span class="comment">//++x先执行成11，然后11 * 20</span></span><br><span class="line">System.out.println(result);<span class="comment">//220</span></span><br><span class="line">System.out.println(x);<span class="comment">//11</span></span><br><span class="line"><span class="keyword">int</span> result1 = x++ * y;</span><br><span class="line"><span class="comment">//x*y,然后x自增</span></span><br><span class="line">System.out.println(result1);<span class="comment">//220</span></span><br><span class="line">System.out.println(x);<span class="comment">//12</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果实在记不住，就分开写。</p><h1 id="三目运算符（重点）"><a href="#三目运算符（重点）" class="headerlink" title="三目运算符（重点）"></a>三目运算符（重点）</h1><p>三目是一种赋值运算，他指的是根据条件来进行进行判断。对于三目运算的基本使用语法如下：</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">数据类型 变量 </span>=<span class="string"> 布尔表达式 ？ 条件满足时赋值语句 ：条件不满足时赋值内容；</span></span><br></pre></td></tr></table></figure><p>范例：将两个变量之中大的内容赋值给新变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//如果a&gt;b的条件为true，result的内容就是a，如果不满足result的内容就是b。</span></span><br><span class="line"><span class="keyword">int</span> result = a &gt; b ? a : b;</span><br><span class="line">System.out.println(result);<span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有的时候你实在不清楚这种三目运算，你</p><p>也可以写成if判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math5</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">result = a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">result = b;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(result);<span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们如果不使用三目运算符，整个代码所跨越的行太多了。</p><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><p>如果要进行关系运算的操作我们可以使用：<code>&gt;</code>, <code>&lt;</code> ,<code>&gt;=</code> ,<code>&lt;=</code>, <code>!=</code>,<code>==</code>.所有的关系运算符判断完成数据的返回结果都是布尔类型（boolean）。</p><p>范例：进行关系判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math6</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(a &gt; b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a &lt; b);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要提醒的是，可以直接将字符与数字进行判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math7</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">'a'</span> == <span class="number">97</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">'0'</span> == <span class="number">0</span>);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//字符0的编码并不是0，所以只会是false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h1><p>逻辑运算主要就是三类：与，或，非。</p><p>观察非操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math8</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(!(a &gt; b));<span class="comment">//true</span></span><br><span class="line"><span class="comment">//本来10不大于20，应该是false，但是使用了非操作，变为了true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在逻辑运算中最为麻烦的部分就是与和或两个操作，因为其各有两种写法。</p><ul><li>与操作：<code>&amp;</code>，<code>&amp;&amp;</code>；</li><li>或操作：<code>|</code> ，<code>||</code>。</li></ul><p>1、与操作：在进行多个条件判断的时候，只有所有的条件都满足了才有可能进入；</p><ul><li>&amp;：使用单与的时候明确的表示多个条件都需要判断，可是如果说前面的条件已经是false，无论后面有多少个true，最后返回的结果都是false，所以理论上后面的判断不应该在执行了，那么就可以使用‘&amp;&amp;’（短路与）；</li></ul><p>2、或操作：或操作的特点若干个判断条件只要有一个是true，那么最终的结果就是true，不管后面究竟有多少个false。</p><p> 从此以后所编写的逻辑运算之中，都使用我们的<code>&amp;&amp;</code>和<code>||</code>进行操作。</p><h1 id="位运算（了解）"><a href="#位运算（了解）" class="headerlink" title="位运算（了解）"></a>位运算（了解）</h1><p>位运算指的是可以按照二进制，八进制，十六进制进行数据处理。基本上考虑最多的还是二进制。在位运算之中，可以采用数据移位的处理方式实现一些数据的内容变化。</p><p>位运算实现的关键问题在于要进行十进制与二进制的转换，这种转换原则是数据除2取余，直到除到零为止，余数按照倒序排列。</p><ul><li>8进制：029；</li><li>16进制：0x30；</li></ul><p>关于java基础学习阶段的代码详见<a href="https://github.com/7666/java_base" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数学整个程序的基础，所以各种常用的计算符号，基本java都会提供。程序可以提供的只是最为基础的数学运算支持，如果需要完成更为复杂的计算，你需要自己进行二进制的处理了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oujvmc3la.bkt.clouddn.com/%E8
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java程序逻辑控制</title>
    <link href="https://blog.loong.io/2017/12/22/java/"/>
    <id>https://blog.loong.io/2017/12/22/java/</id>
    <published>2017-12-22T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.180Z</updated>
    
    <content type="html"><![CDATA[<p>程序的执行一共有三类形式：顺序结构，分支结构，循环结构。</p><h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><p>顺序结构指的是所有的代码按照定义的先后执行，就好比之前在主方法中所编写的代码一样，按照定义顺序一行行执行。</p><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><p>分支结构指的是进行逻辑判断，当满足与某些条件的时候才会执行某些语句。而对于分支结构有两类：if分支结构，switch分支结构。</p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>if分支结构的基础语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式)&#123;</span><br><span class="line"></span><br><span class="line">        条件满足时的执行代码；</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> （布尔表达式）&#123;</span><br><span class="line"></span><br><span class="line">         条件满足时执行的代码；</span><br><span class="line"></span><br><span class="line">&#125;...[<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">         所有条件都不满足时执行的代码；</span><br><span class="line"></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>范例：使用if语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">If</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"姑娘大了，可以嫁人了！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：使用if。。else语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">If1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"姑娘大了，可以嫁人了！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"孩子还太小，再等等！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：多条件判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">If2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">if</span>(age &lt;= <span class="number">18</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"未成年"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &gt; <span class="number">18</span> &amp;&amp; age &lt; <span class="number">23</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"还在上学！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"随便折腾吧！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>使用if…else这样的语法可以实现条件的判断,但是如果要想进行多数值内容的判断那么就可以使用switch完成,但是需要注意switch随着jdk版本的变化支持的数据类型也在不停的变化</p><ul><li>最初的数据类型支持:int,char;</li><li>从jdk1.4开始支持了枚举(enu);</li><li>从jdk1.7开始支持了String;</li></ul><p>switch语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(数字 | 枚举 | 字符 | 字符串)&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">case</span> 内容<span class="number">1</span> : &#123;</span><br><span class="line"></span><br><span class="line">                    内容满足时执行的语句;</span><br><span class="line"></span><br><span class="line">                    [<span class="keyword">break</span>;]</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">case</span> 内容<span class="number">2</span> : &#123;</span><br><span class="line"></span><br><span class="line">                    内容满足时执行的语句;</span><br><span class="line"></span><br><span class="line">                    [<span class="keyword">break</span>;]</span><br><span class="line"></span><br><span class="line">        &#125;...[</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:&#123;</span><br><span class="line"></span><br><span class="line">                    都不满足的时候执行的语句;</span><br><span class="line"></span><br><span class="line">                     [<span class="keyword">break</span>;]</span><br><span class="line"></span><br><span class="line">       &#125; ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：观察switch语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switch</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(a) &#123;</span><br><span class="line"><span class="keyword">default</span> : &#123;</span><br><span class="line">System.out.println(<span class="string">"没有条件被满足！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">System.out.println(<span class="string">"1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">System.out.println(<span class="string">"2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这种情况，1和2都被打印出来了。</p><p>switch这种开关语句有一种重要的特点：如果你在编写case的时候没有加上break。则会在满足的case语句之后一直执行，执行到遇到break，或全部结束。</p><p>jdk1.7开始支持String；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jdk1.7开始支持String</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switch1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String a = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">switch</span>(a) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"hello"</span>:&#123;</span><br><span class="line">System.out.println(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"world"</span>:&#123;</span><br><span class="line">System.out.println(<span class="string">"2"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span> : &#123;</span><br><span class="line">System.out.println(<span class="string">"没有条件被满足！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><p>循环结构</p><p>循环结构指的就是某几行代码被一直重复执行的操作形式。循环一般会有两类循环：while循环，for循环。</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">循环的初始化内容</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>（循环的结束条件判断）&#123;</span><br><span class="line"></span><br><span class="line">       循环语句；</span><br><span class="line"></span><br><span class="line">       修改循环结束条件判断；</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">循环的初始化内容</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">       循环语句；</span><br><span class="line"></span><br><span class="line">       修改循环结束条件判断；</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>（循环的结束条件判断）；</span><br></pre></td></tr></table></figure><p>范例：使用while实现1-100的累加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">While</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(a &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">sum += a;</span><br><span class="line">a++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用while循环的最大特点在于：如果判断条件不成立，那么while循环就一次都不执行，而使用do。。while的特点是即使判断条件不满足也会执行一次。</p><p>范例：使用do。。while实现累加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">While1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">sum += a;</span><br><span class="line">a++;</span><br><span class="line">&#125;<span class="keyword">while</span>(a &lt;= <span class="number">100</span>);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后的开发中do。。while基本不使用。基本上使用的就是while循环。</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>（循环初始化条件；循环结束判断；修改循环条件）&#123;</span><br><span class="line"></span><br><span class="line">      循环体代码；</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：使用for循环实现1-100的累加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">For</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= <span class="number">100</span>;a++) &#123;</span><br><span class="line">sum += a;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环使用原则：</p></blockquote><blockquote><p>对于不知道循环次数，但是知道循环结束条件的使用while循环；<br>如果已经知道明确的循环次数，则使用for循环；</p></blockquote><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><p>在进行循环的处理的时候有两类的关键字：<code>continue</code>，<code>break</code>。一般这样的语句一般都会结合if语句来一起使用。</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p><code>continue</code>：执行到此语句的时候将跳过循环体的剩余部分，而返回到循环的判断处进行处理；</p><p>范例：观察continue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Continue</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>;a &lt; <span class="number">10</span>;a++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p><code>break</code>:执行到该语句时，直接离他最近的一层循环。</p><p>范例：观察break</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Break</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>;a &lt; <span class="number">10</span>;a++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他语言中有一种goto的功能，这种功能一般不会出现在java里面，而且也没有这样的关键字，不过可以利用continue实现与之一样的功能。</p><h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><p>循环语句本身是可以进行嵌套使用的，但是从现在的开发来说，这种嵌套的操作已经少了。</p><p>范例：打印乘法口诀表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chengfa</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;=<span class="number">9</span> ;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= i;j++) &#123;</span><br><span class="line">System.out.print(j + <span class="string">"*"</span> + i + <span class="string">"="</span> + (i*j) + <span class="string">"  "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：打印三角形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sanjiao</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> line = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; line;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; line - i;j++ ) &#123;</span><br><span class="line">System.out.print(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i;j++) &#123;</span><br><span class="line">System.out.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>知道次数使用for，不知道次数知道结束条件使用while。</p></blockquote><p>关于java基础学习阶段的代码详见<a href="https://github.com/7666/java_base" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;程序的执行一共有三类形式：顺序结构，分支结构，循环结构。&lt;/p&gt;
&lt;h1 id=&quot;顺序结构&quot;&gt;&lt;a href=&quot;#顺序结构&quot; class=&quot;headerlink&quot; title=&quot;顺序结构&quot;&gt;&lt;/a&gt;顺序结构&lt;/h1&gt;&lt;p&gt;顺序结构指的是所有的代码按照定义的先后执行，就好比之
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java方法的定义和使用</title>
    <link href="https://blog.loong.io/2017/12/21/java/"/>
    <id>https://blog.loong.io/2017/12/21/java/</id>
    <published>2017-12-21T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.180Z</updated>
    
    <content type="html"><![CDATA[<p>首先对于方法的最大好处是可以进行重复调用，但是至于说哪些操作要形成方法，这些都要根据项目的实际经验来进行自我总结的。</p><h1 id="方法的基本定义"><a href="#方法的基本定义" class="headerlink" title="方法的基本定义"></a>方法的基本定义</h1><p>方法指的是一段可以被重复调用的代码块。</p><blockquote><p>限制条件：本次所讲解的方法指的是在主类中定义，并且由主方法直接调用的方法形式。</p></blockquote><p>在java里面如果想要进行方法的定义，我们可以使用以下的语法使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 方法返回值 方法名称（[参数类型 变量，.....]）&#123;</span><br><span class="line"></span><br><span class="line">       方法体代码；</span><br><span class="line"></span><br><span class="line">       [<span class="keyword">return</span> [返回值] ；]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义方法的时候对于方法的返回值有以下的两类：</p><ul><li>void：没有返回值；</li><li>数据类型（基本类型，引用类型）；</li></ul><p>范例：定义一个没有返回值，没有参数的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfa</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">print();</span><br><span class="line">print();</span><br><span class="line">print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"*************"</span>);</span><br><span class="line">System.out.println(<span class="string">"*Hello world*"</span>);</span><br><span class="line">System.out.println(<span class="string">"*************"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 范例：定义一个有参数无返回值的方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//有参数无返回值的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfa1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">print(<span class="string">"hello"</span>);</span><br><span class="line">print(<span class="string">"world"</span>);</span><br><span class="line">print(<span class="string">"kai"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"*************"</span>);</span><br><span class="line">System.out.println(<span class="string">"*"</span>+str+<span class="string">"*"</span>);</span><br><span class="line">System.out.println(<span class="string">"*************"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：有参数有返回值的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参数有返回值的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfa2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = add(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line"><span class="comment">//既然方法有返回值，那么这些返回值也可以直接输出</span></span><br><span class="line">System.out.println(add(<span class="number">100</span>,<span class="number">200</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是在定义方法的时候有一点要特别注意，如果某一个方法上使用了void定义（无返回值），那么该方法可以直接用return来结束调用。一般而言，这种return往往需要结合if判断来实现。</p></blockquote><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfa3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">print(<span class="number">10</span>);</span><br><span class="line">print(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">20</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"x = "</span> + x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于第一次接触方法的人来讲，先将语法记住了，至于怎么用需要时间来消化。</p><h1 id="方法重载（重点）"><a href="#方法重载（重点）" class="headerlink" title="方法重载（重点）"></a>方法重载（重点）</h1><p>方法重载指的是：方法的名称相同，参数的类型或个数不同。</p><p>范例：实现方法重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法重载</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfa4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">System.out.println(add(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">System.out.println(add(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line">System.out.println(add(<span class="number">1.1</span>,<span class="number">2.2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行方法重载的时候，有一个重要的原则：要求方法的返回值类型一定要相同。</p><p>范例：观察如下的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfa5</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello"</span>); <span class="comment">//输出字符串</span></span><br><span class="line">System.out.println(<span class="string">"A"</span>); <span class="comment">//输出字符</span></span><br><span class="line">System.out.println(<span class="number">1</span>);   <span class="comment">//输出整型</span></span><br><span class="line">System.out.println(<span class="keyword">true</span>);<span class="comment">//输出布尔</span></span><br><span class="line">System.out.println(<span class="number">1.1</span>);<span class="comment">//输出浮点型</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>证明，System.out.println(）是一个被重载的方法。</p><h1 id="方法递归调用（了解）"><a href="#方法递归调用（了解）" class="headerlink" title="方法递归调用（了解）"></a>方法递归调用（了解）</h1><p>方法的递归调用指的是一个方法自己调用自己的形式。</p><p>递归：</p><ul><li>方法必须有一个递归的结束条件</li><li>方法在每次递归处理的时候一定要做出一些变更</li></ul><p>范例：实现1-100的累加操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法递归实现1-100的加和</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfa6</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">System.out.println(num(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">1</span>) &#123;      <span class="comment">//结束条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x + num(x - <span class="number">1</span>);  <span class="comment">//做出变更</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【调用】第一次执行sum（）方法，主方法执行。return 100 + sum（100-1）；<br>【递归】第二次执行sum（）方法：return 99 + sum（99-1）；<br>【递归】第二次执行sum（）方法：return 98+ sum（98-1）；<br>…..</p><p>范例：60！计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法递归实现60！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fangfa7</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">System.out.println(nul(<span class="number">60</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">nul</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">1</span>) &#123;      <span class="comment">//结束条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * nul(x - <span class="number">1</span>);  <span class="comment">//做出变更</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码可以发现使用while循环的操作其实大部分都可以更换为递归，之所以使用递归主要是一个方法可以执行的操作很多，而且结构要好。</p><blockquote><p>关于java基础学习阶段的代码详见<a href="https://github.com/7666/java_base" target="_blank" rel="noopener">Github</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先对于方法的最大好处是可以进行重复调用，但是至于说哪些操作要形成方法，这些都要根据项目的实际经验来进行自我总结的。&lt;/p&gt;
&lt;h1 id=&quot;方法的基本定义&quot;&gt;&lt;a href=&quot;#方法的基本定义&quot; class=&quot;headerlink&quot; title=&quot;方法的基本定义&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基本数据类型划分</title>
    <link href="https://blog.loong.io/2017/11/03/java/"/>
    <id>https://blog.loong.io/2017/11/03/java/</id>
    <published>2017-11-03T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.179Z</updated>
    
    <content type="html"><![CDATA[<p>主要关于java的基本数据类型。</p><h1 id="java数据类型划分"><a href="#java数据类型划分" class="headerlink" title="java数据类型划分"></a>java数据类型划分</h1><p>java的数据类型主要分为两大类：</p><ol><li>基本数据类型</li><li>引用数据类型</li></ol><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>数值型</p><ul><li>整形:<code>byte</code>,<code>short</code>,<code>int</code>,<code>long</code>; 默认值:<code>0</code>;</li><li>浮点型:<code>float</code>,<code>double</code>;默认值:<code>0.0</code>;</li></ul><p>字符型</p><ul><li>字符型:<code>char</code>;默认值:<code>\u0000</code></li></ul><p>布尔型</p><ul><li>布尔型:<code>boolean</code>;默认值:<code>false</code></li></ul><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>数组,类,接口;默认值:null</p><h2 id="选用原则"><a href="#选用原则" class="headerlink" title="选用原则"></a>选用原则</h2><p>表示整数:<code>int</code>,描述小数就是用<code>double</code>.</p><p><code>long</code>这种数据类型一般会用来描述日期时间,内存大小或文件大小(字节);</p><p>如果需要进行编码转换或者进行二进制数据传输,使用<code>byte</code>(-127-128);</p><p><code>char</code>一般在描述中文的时候使用到(基本上都会忽略).</p><p><code>boolean</code>在描述程序逻辑的使用.</p><h1 id="基本数据类型-1"><a href="#基本数据类型-1" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="整形类型"><a href="#整形类型" class="headerlink" title="整形类型"></a>整形类型</h2><p>在java中任意一个整型类型都是<code>int</code>型.</p><h3 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h3><p>在整型的操作过程中都会有一个数据溢出的问题,指的是已经达到这个整型的最大值或者最小值,进行数据计算时会出现错误数据.</p><p>实例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Max_value</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = Integer.MAX_VALUE;<span class="comment">//最大值</span></span><br><span class="line">System.out.println(num + <span class="number">1</span>);<span class="comment">//数据溢出，加1变为最小值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决<code>int</code>类型溢出问题,就只有将其变为<code>long</code>类型一个方法.解决方法如下:</p><ul><li>先将int类型的数据赋给long类型数据,然后进行运算.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Int_overflow</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">long</span> result = num;</span><br><span class="line">System.out.println(result + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将int类型转变为long类型,然后进行数据运算.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Int_overflow1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">long</span> result = (<span class="keyword">long</span>)num + <span class="number">1</span>;</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大的数据类型塞到小的数据类型里面"><a href="#大的数据类型塞到小的数据类型里面" class="headerlink" title="大的数据类型塞到小的数据类型里面"></a>大的数据类型塞到小的数据类型里面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Long_int</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="comment">//任何整型其默认类型都是int,但是该数据已经超过了int可以保存的数据范围.</span></span><br><span class="line"><span class="comment">//那么现在需要明确表明这是一个long型</span></span><br><span class="line"><span class="keyword">long</span> num = <span class="number">2147483648L</span>;<span class="comment">//定义一个long类型，后缀为‘l’或者‘L’</span></span><br><span class="line"><span class="keyword">int</span> result = (<span class="keyword">int</span>)num;<span class="comment">//大的类型变为小的数据类型必须强制</span></span><br><span class="line"><span class="comment">//强制设置其数据类型,可能会导致损失数据精度.</span></span><br><span class="line">System.out.println(result);<span class="comment">//-2147483648</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>范围小的数据类型可以自动变为大的数据类型型<br>数据范围大的数据类型只有强制转换才可以转换为小的数据类型<br>尽量不要使用以上操作</p></blockquote><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p> 重要说明:之前说过其数据类型都有一个默认值,但是其在主程序中是无效的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Default_invain</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//不赋值,是会报错的(尚未初始化).</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案:</p><ul><li>在变量输出前为变量设置内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Default_invain1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">num = <span class="number">0</span>;<span class="comment">//在输出前设置其值</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式在老老版本中也会出错。</p></blockquote><ul><li>通用做法，定义变量时为其设置值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Default_invain2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">num = <span class="number">0</span>;<span class="comment">//在定义时为其设置值</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="byte类型"><a href="#byte类型" class="headerlink" title="byte类型"></a>byte类型</h3><p>说到整型，不得不去考虑byte数据类型，他的数据范围是-128~127之间。</p><p>声明byte类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Byte</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">byte</span> num = <span class="number">10</span>;<span class="comment">//10是int类型，在byte范围内。</span></span><br><span class="line"><span class="comment">//10是int类型，理论上需要强制转换</span></span><br><span class="line"><span class="comment">//实际上没有转换，因为其数据类型没有超出byte范围，符合byte要求</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你为byte赋值的数据大于其数据范围，那么就需要其数据类型的强制转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Byte1</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">byte</span> num = (<span class="keyword">byte</span>)<span class="number">128</span>;<span class="comment">//类型的强制转换</span></span><br><span class="line">System.out.println(num);<span class="comment">//-128</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，如果要将int常量直接赋值给byte变量，那么要求只能够是常量，而不能是int变量。</p></blockquote><p>错误实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Intyichu</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    Int num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">byte</span> result = num;</span><br><span class="line">    System.out.println(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Intyichu</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    Int num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">byte</span> result =(<span class="keyword">byte</span>) num;</span><br><span class="line">    System.out.println(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在开发中，byte和int经常会一起出现。</p></blockquote><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><h3 id="double数据类型"><a href="#double数据类型" class="headerlink" title="double数据类型"></a>double数据类型</h3><p>如果描述小数数据，默认的数据类型都是<code>double</code>.</p><p>定义一个小数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Double</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> num = <span class="number">10.1</span>;<span class="comment">//定义一个double类型</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而同时最需要注意的是，double可以保存的数字是最大的，也就是说double可以保存全宇宙中最大的有意义数字。</p><h3 id="float数据类型"><a href="#float数据类型" class="headerlink" title="float数据类型"></a>float数据类型</h3><p>float也可以用来描述小数，但是float的数据范围要小于double，而且要求在定义的时候进行强制转换，在数字后面加一个字母<code>f</code>,<code>F</code>.</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Double1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> num = <span class="number">1.1F</span>;<span class="comment">//float类型定义，必须在定义的数值之后加上F或者f，不然他就是一个double类型。</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小数与整型计算问题"><a href="#小数与整型计算问题" class="headerlink" title="小数与整型计算问题"></a>小数与整型计算问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Float_int</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> num = <span class="number">1.1</span>;<span class="comment">//定义一个小数</span></span><br><span class="line">System.out.println(num * <span class="number">10</span>);<span class="comment">//11.0 小数乘以一个整型会得到一个小数</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;<span class="comment">//定义一个整型</span></span><br><span class="line">System.out.println(num1 * <span class="number">1.1</span>);<span class="comment">//11.0</span></span><br><span class="line">System.out.println(<span class="number">10</span> / <span class="number">3</span>);<span class="comment">//3 一个整型除以一个整型只会得到一个整型</span></span><br><span class="line">System.out.println(<span class="number">10</span> / <span class="number">3.0</span>);<span class="comment">//3.333333 要想得到一个小数，只能把其中一个变为浮点型</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果要保证精度就必须保证其中一个是double或float型。<br>以后要进行除法运算的时候请一定要注意好你的类型。</p></blockquote><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>虽然在开发中会用到字符型的概念，但是真正去操作的情况并不多。</p><p>字符型使用<code>char</code>进行声明，而且用单引号来声明字符变量的内容，同时字符型可以与<code>int</code>互相转换。</p><p>定义一个字符型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Char</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'A'</span>;<span class="comment">//定义一个字符</span></span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在整个字符型的处理中，最麻烦的就在于它可以与int类型互相转换，char变为int内容的时候，其所包含的内容就是编码。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Char1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>)c;<span class="comment">//将char类型转换为int类型</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>常用范围：<br>大写字母（A-Z）：65-90<br>小写字母（a-z）：97-122<br>字符数字0-9不是一个概念</p></blockquote><p>字符0-9和数字0-9不同，实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Char2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> n = <span class="string">'9'</span>;</span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>)n;<span class="comment">//这里转换的是9这个数字的编码</span></span><br><span class="line">System.out.println(num);<span class="comment">//57</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例：将大写字母转换为小写字母</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Char3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> a = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">int</span> num = a + <span class="number">32</span>;<span class="comment">//大写字母与小写字母编码相差32</span></span><br><span class="line"><span class="keyword">char</span> b = (<span class="keyword">char</span>)num;<span class="comment">//将编码数字转换为字符型</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java中的使用的编码并不是ascii码而是unicode码，这种编码包含ascii码的编码范围，但是又多于ascii码。</p><p>这种编码是16进制编码，这种编码可以保存任何的文字信息，包括中文。</p><p>实例：保存中文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Char4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'王'</span>;</span><br><span class="line">System.out.println(c);<span class="comment">//王</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于java中对于字符的特性支持比较好，所以还有另外一类神奇的用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 程序</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> 变量<span class="number">1</span> = <span class="number">10</span>;</span><br><span class="line">    System.out.println(变量<span class="number">1</span>);<span class="comment">//10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打破了命名规则，虽然可以但是尽量别用。</p><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>布尔是一位数学家的名字，发明了两个单词：true，false。一般布尔类型都只表示逻辑的计算结果。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boolean</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="number">10</span> &gt; <span class="number">9</span>;</span><br><span class="line">System.out.println(flag);<span class="comment">//true</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意在java中<code>0</code>不代表<code>false</code>，<code>非零</code>不代表<code>true</code>;</p></blockquote><h1 id="引用类型-1"><a href="#引用类型-1" class="headerlink" title="引用类型"></a>引用类型</h1><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>char描述的只是单个字符，但是如果描述某个人的姓名单一字符做不到。那就要使用String型。</p><p>但是要说明的是。string并不是一个基本的数据类型，String是一个引用数据类型，不过这种类型在使用中比较特殊，可以按照基本数据类型的使用模式来进行套用。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Str</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String firstname = <span class="string">"隔壁"</span> ;</span><br><span class="line">String lastname = <span class="string">"老王"</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> f = <span class="number">1.1</span>;</span><br><span class="line">System.out.println(firstname + lastname + num + f);<span class="comment">//隔壁老王101.1</span></span><br><span class="line">System.out.println(firstname + lastname + (num + f));<span class="comment">//隔壁老王11.1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一旦在+的操作中出现字符串则表示的是字符串的拼接。都变为String类型。</p></blockquote><blockquote><p>（）可以解决优先级问题。</p></blockquote><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>java的转义字符</p><ol><li>八进制转义序列：<code>\ + 1到3位5数字</code>；范围<code>\000&#39;~&#39;\377</code>      <code>\0</code>：空字符</li><li>Unicode转义字符：<code>\u + 四个十六进制数字</code>；0~65535       <code>\u0000</code>：空字符</li><li>特殊字符：就3个<br>   <code>\&quot;</code>：双引号<br>  <code>\&#39;</code>：单引号<br>  <code>\\</code>：反斜线</li><li>控制字符：5个</li></ol><p><code>\r</code> 回车</p><p><code>\n</code> 换行</p><p><code>\f</code> 走纸换页</p><p><code>\t</code> 横向跳格</p><p><code>\b</code> 退格</p><p><code>\&#39;</code> 单引号字符</p><p><code>\\</code> 反斜杠字符</p><p>点的转义：<code>.</code> ==&gt; <code>u002E</code></p><p>美元符号的转义：<code>$</code> ==&gt; <code>u0024</code></p><p>乘方符号的转义：<code>^</code> ==&gt; <code>u005E</code></p><p>左大括号的转义：<code>{</code> ==&gt; <code>u007B</code></p><p>左方括号的转义：<code>[</code> ==&gt; <code>u005B</code></p><p>左圆括号的转义：<code>(</code> ==&gt; <code>u0028</code></p><p>竖线的转义：<code>|</code> ==&gt; <code>u007C</code></p><p>右圆括号的转义：<code>)</code> ==&gt; <code>u0029</code></p><p>星号的转义：<code>*</code> ==&gt; <code>u002A</code></p><p>加号的转义：<code>+</code> ==&gt; <code>u002B</code></p><p>问号的转义：<code>?</code> ==&gt; <code>u003F</code></p><p>反斜杠的转义：<code>\</code> ==&gt; <code>u005C</code></p><p>所以<code>\\|</code>实际上还可以写成：<code>\\u007C</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要关于java的基本数据类型。&lt;/p&gt;
&lt;h1 id=&quot;java数据类型划分&quot;&gt;&lt;a href=&quot;#java数据类型划分&quot; class=&quot;headerlink&quot; title=&quot;java数据类型划分&quot;&gt;&lt;/a&gt;java数据类型划分&lt;/h1&gt;&lt;p&gt;java的数据类型主要分为两
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java程序基本概念</title>
    <link href="https://blog.loong.io/2017/11/02/java/"/>
    <id>https://blog.loong.io/2017/11/02/java/</id>
    <published>2017-11-02T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.177Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要介绍java的基本概念，例如：注释，标志符，关键字。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>一般写的程序代码之中都要求加上注释，这样可以方便的进行程序的阅读。</p><p>在程序中支持三类注释：</p><ol><li>单行注释：// 注释内容</li><li>多行注释：/<em>注释内容</em>/</li><li>文档注释：/*<em> 文档注释标记 </em>/</li></ol><blockquote><p>注释与代码最大的区别是所有的注释内容不会被程序编译器所编译.<br>这个注释直接和你以后的项目文档有直接联系.</p></blockquote><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>标识符就是用于给java程序中变量，类，方法等命名的符号。例如：</p><p><img src="http://oujvmc3la.bkt.clouddn.com/biaoshifu.jpg" alt></p><ol><li><p>标识符可以由字母、数字、下划线（_）、美元符（$）组成，但不能包含 @、%、空格等其它特殊字符，不能以数字开头。譬如：123name 就是不合法滴</p></li><li><p>标识符不能是 Java 关键字和保留字（ Java 预留的关键字，以后的升级版本中有可能作为关键字），但可以包含关键字和保留字。如：不可以使用 void 作为标识符，但是 Myvoid 可以</p></li><li><p>标识符是严格区分大小写的。 所以涅，一定要分清楚 imooc 和 IMooc 是两个不同的标识符哦！</p></li><li><p>标识符的命名最好能反映出其作用，做到见名知意。</p></li></ol><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>Java 语言中有一些具有特殊用途的词被称为关键字。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/javaguanjianzi.jpg" alt></p><blockquote><p>关键字说明:<br>java有两个未使用到的关键字:goto,const<br>java中的有特殊含义的单词(不算关键字):null,false,true;<br>JDK1.4之后追加了assert关键字<br>JDK1.5之后追加了enum关键字</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里主要介绍java的基本概念，例如：注释，标志符，关键字。&lt;/p&gt;
&lt;h1 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h1&gt;&lt;p&gt;一般写的程序代码之中都要求加上注释，这样可以方便的进行程序的阅读
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java入门</title>
    <link href="https://blog.loong.io/2017/11/01/java/"/>
    <id>https://blog.loong.io/2017/11/01/java/</id>
    <published>2017-11-01T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.175Z</updated>
    
    <content type="html"><![CDATA[<p>Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。</p><p>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。</p><h1 id="JAVA发展历程"><a href="#JAVA发展历程" class="headerlink" title="JAVA发展历程"></a>JAVA发展历程</h1><p>JAVA（SUN斯坦福大学网络），1996年正式被民众使用。</p><p>SUN最早从事软件开发，而JAVA只是其软件产品。2009年被oracle收购了。</p><p>1995.05.23，JDK1.0，Java正式挂牌推出。</p><p>j2se：进行单机版程序的开发，往往是作为基础平台。</p><p>j2me：主要是进行移动开发。</p><p>j2ee：是Java开发的企业版。</p><h1 id="JAVA特点"><a href="#JAVA特点" class="headerlink" title="JAVA特点"></a>JAVA特点</h1><p>高级语言类型：</p><ol><li>编译型</li><li>解释型</li></ol><p>Java是以上两种语言的结合。.java先编译生成.class文件，Java解释器负责Java虚拟机的代码在特定的平台上运行</p><h2 id="Java的主要特点："><a href="#Java的主要特点：" class="headerlink" title="Java的主要特点："></a>Java的主要特点：</h2><ul><li>Java语言具有可移植型</li><li>Java开发足够简单</li><li>java是为数不多的多线程编程语言</li><li>Java支持自动的垃圾收集处理</li><li>java是一门面向对象的编程语言。</li></ul><h1 id="JAVA开发环境"><a href="#JAVA开发环境" class="headerlink" title="JAVA开发环境"></a>JAVA开发环境</h1><ul><li>JRE： Java Runtime Environment</li><li>JDK：Java Development Kit</li></ul><p>JRE顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。</p><p>JDK顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。</p><p>如果你需要运行java程序，只需安装JRE就可以了。如果你需要编写java程序，需要安装JDK。</p><p>因此，需要先安装jdk的开发包，其中包括了jre。<a href="https://www.java.com/zh_CN/download" target="_blank" rel="noopener">点此下载</a>。</p><blockquote><p>jdk安装之前先把电脑的防火墙关闭，不然可能会发生不可测的后果。</p></blockquote><blockquote><p>只安装jre会导致你编写的.java程序不能编译为.class文件，即javac命令找不到。</p></blockquote><blockquote><p>安装之后要进行环境变量的配置。在path中添加java/bin所在的绝对路径，新的环境属性必须在重启之后才会生效。</p></blockquote><h1 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h1><p>所有java程序必须是<code>.java</code>文件名后缀。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">'hello world!!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是一个最简单的java程序,它会输出<code>hello world!!</code>.</p><h2 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h2><ol><li>编译源代码文件,生成编译后的文件<code>*.class</code>文件.在命令行执行<code>javac Hello.java</code>就会在这个文件夹生成<code>Hello.class</code>文件.</li><li>解释java文件.在命令行执行<code>java Hello</code>就会执行该程序.</li></ol><blockquote><p>注意：其中的类名必须与文件名保持一致，不然就会报“类HelloWorld是公共的，应在名为HelloWorld.java的文件中声明”的编译错误。</p></blockquote><h2 id="分解程序"><a href="#分解程序" class="headerlink" title="分解程序"></a>分解程序</h2><h3 id="程序类"><a href="#程序类" class="headerlink" title="程序类"></a>程序类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>类是java中的基本单位,所有的java程序都是以类的形式存在的,在程序中对于类的定义有两种语法:</p><ol><li><code>public class 类名称{}</code>:其中类名称必须和文件名保持一致,一般类名称首字母大写.</li><li><code>class 类名称{}</code>:文件名称可以和类名称不同,生成的字节码文件就是类名称.class,在一个<em>.java中可以用class定义多个不同的类,并且在编译之后形成不同的`</em>.class`文件.</li></ol><blockquote><p>类名的首字母一般大写</p></blockquote><blockquote><p>在java的学习中可能会在一个*.java文件中定义多个类，主要是方便浏览，但是在实际的开发当中，几乎每一个java文件只会定义一个类。</p></blockquote><h3 id="主方法"><a href="#主方法" class="headerlink" title="主方法"></a>主方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">'hello world!!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主方法是一切的起点，也就是说所有的程序都是通过主方法开始执行的。</p><p>主方法编写的代码才是你整个程序该执行的程序逻辑。主程序所在的类称之为主类，而主类一般使用<code>public class</code>进行声明。</p><h3 id="信息输出"><a href="#信息输出" class="headerlink" title="信息输出"></a>信息输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">'hello world!!'</span>);</span><br></pre></td></tr></table></figure><p>指的是在 屏幕上进行信息的打印操作，而信息输出有以下两类语法：</p><ul><li>输出后换行：System.out.println(内容)；</li><li>输出后不换行：System.out.print(内容)；</li></ul><h1 id="CLASSPATH环境属性"><a href="#CLASSPATH环境属性" class="headerlink" title="CLASSPATH环境属性"></a>CLASSPATH环境属性</h1><p>CLASSPATH指的是类的加载路径。</p><p>如果一个Hello.class想要执行，那么命令行就必须在Hello.class所在的目录，否则就无法执行。</p><p>那么如何做到即使不在Hello.class所在的目录，也能执行这个文件呢？</p><p>那么这个时候就必须用我们的CLASSPATH来进行控制，所以执行如下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> <span class="attribute">CLASSPATH</span>=d：\mydemo</span><br></pre></td></tr></table></figure><p>结论：java解释一个程序类的时候，一定首先取得classpath设置的路径，而后才开始类的加载操作。</p><blockquote><p>需要注意的是，如果你现在的classpath设置的目录很多，那么对于程序的解释执行会非常不方便，所以最好采用的是默认机制：从当前所在的路径中进行类的加载，那么我们可以将classpath的内容设置为<code>.</code></p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> <span class="attribute">CLASSPATH</span>=.</span><br></pre></td></tr></table></figure><p>所以不建议大家去改变CLASSPATH的配置，当然我们可以为我们的项目去添加一个环境属性。</p><p>在环境变量中添加。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.loong.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.loong.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>前端必备demo演示网站</title>
    <link href="https://blog.loong.io/2017/10/27/demo/"/>
    <id>https://blog.loong.io/2017/10/27/demo/</id>
    <published>2017-10-27T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.173Z</updated>
    
    <content type="html"><![CDATA[<p>突然发觉<a href="https://github.com/Gaohaoyang" target="_blank" rel="noopener">高浩阳</a>前辈的博客中demo页面很神奇，它可以展示你的代码效果，对于一个前端来说有一个可以演示的地方真的很重要。</p><p>这个网站完美的实现了我的期望，你可以在上面写html，css，js，他就会在页面中给你展示出来，对于自己的技术的提高以及复习都有很大的帮助。</p><p>这也是我第一次接触这个类型的网站。新建了一个简单的来作为我的第一个demo，很简单只是一个hello world！很好的网站对于一个前端工程师而言。</p><p><a href="https://codepen.io/" target="_blank" rel="noopener">codepen.io</a>网址拿去。</p><p>网站展示：</p><p><img src="http://oujvmc3la.bkt.clouddn.com/demo.PNG" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然发觉&lt;a href=&quot;https://github.com/Gaohaoyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;高浩阳&lt;/a&gt;前辈的博客中demo页面很神奇，它可以展示你的代码效果，对于一个前端来说有一个可以演示的地方真的很重要。&lt;/p
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://blog.loong.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="https://blog.loong.io/2017/10/25/cors/"/>
    <id>https://blog.loong.io/2017/10/25/cors/</id>
    <published>2017-10-25T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.171Z</updated>
    
    <content type="html"><![CDATA[<p>跨域几乎是一个面试必问的问题，总结一下。</p><h1 id="造成跨域的两种策略"><a href="#造成跨域的两种策略" class="headerlink" title="造成跨域的两种策略"></a>造成跨域的两种策略</h1><p>浏览器的同源策略会导致跨域，这里同源策略又分为以下两种</p><ul><li>DOM同源策略：禁止对不同源页面DOM进行操作。这里主要场景是iframe跨域的情况，不同域名的iframe是限制互相访问的。</li><li>XmlHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起HTTP请求。</li></ul><blockquote><p>只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</p></blockquote><h1 id="为什么要有跨域限制"><a href="#为什么要有跨域限制" class="headerlink" title="为什么要有跨域限制"></a>为什么要有跨域限制</h1><p>了解完跨域之后，想必大家都会有这么一个思考，为什么要有跨域的限制，浏览器这么做是出于何种原因呢。其实仔细想一想就会明白，跨域限制主要是为了安全考虑。</p><p>AJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：</p><ul><li><p>用户登录了自己的银行页面 <a href="http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。" target="_blank" rel="noopener">http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。</a></p></li><li><p>用户浏览了恶意页面 <a href="http://evil.com。执行了页面中的恶意AJAX请求代码。" target="_blank" rel="noopener">http://evil.com。执行了页面中的恶意AJAX请求代码。</a></p></li><li><p><a href="http://evil.com向http://mybank.com发起AJAX" target="_blank" rel="noopener">http://evil.com向http://mybank.com发起AJAX</a> HTTP请求，请求会默认把<a href="http://mybank.com对应cookie也同时发送过去。" target="_blank" rel="noopener">http://mybank.com对应cookie也同时发送过去。</a></p></li><li><p>银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。</p></li><li><p>而且由于Ajax在后台执行，用户无法感知这一过程。</p></li></ul><p>DOM同源策略也一样，如果iframe之间可以跨域访问，可以这样攻击：</p><ul><li><p>做一个假网站，里面用iframe嵌套一个银行网站 <a href="http://mybank.com。" target="_blank" rel="noopener">http://mybank.com。</a></p></li><li><p>把iframe宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。</p></li><li><p>这时如果用户输入账号密码，我们的主网站可以跨域访问到<a href="http://mybank.com的dom节点，就可以拿到用户的输入了，那么就完成了一次攻击。" target="_blank" rel="noopener">http://mybank.com的dom节点，就可以拿到用户的输入了，那么就完成了一次攻击。</a></p></li></ul><p>所以说有了跨域跨域限制之后，我们才能更安全的上网了。</p><h1 id="跨域的解决方式"><a href="#跨域的解决方式" class="headerlink" title="跨域的解决方式"></a>跨域的解决方式</h1><h2 id="跨域资源共享"><a href="#跨域资源共享" class="headerlink" title="跨域资源共享"></a>跨域资源共享</h2><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。 对于这个方式，阮一峰老师总结的文章特别好，希望深入了解的可以看一下<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html。" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html。</a></p><p>这里我就简单的说一说大体流程。</p><ul><li><p>对于客户端，我们还是正常使用xhr对象发送ajax请求。<br>唯一需要注意的是，我们需要设置我们的xhr属性withCredentials为true，不然的话，cookie是带不过去的哦，设置： xhr.withCredentials = true;</p></li><li><p>对于服务器端，需要在 response header中设置如下两个字段:<br>Access-Control-Allow-Origin: <a href="http://www.yourhost.com" target="_blank" rel="noopener">http://www.yourhost.com</a></p></li><li>Access-Control-Allow-Credentials:true<br>这样，我们就可以跨域请求接口了。</li></ul><h2 id="jsonp实现跨域"><a href="#jsonp实现跨域" class="headerlink" title="jsonp实现跨域"></a>jsonp实现跨域</h2><p>基本原理就是通过动态创建script标签,然后利用src属性进行跨域。</p><p>这么说比较模糊，我们来看个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个fun函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">fata</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建一个脚本，并且告诉后端回调函数名叫fun</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.gerElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">'text/javasctipt'</span>;</span><br><span class="line">script.src = <span class="string">'demo.js?callback=fun'</span>;</span><br><span class="line">body.appendChild(script);</span><br></pre></td></tr></table></figure><p>返回的js脚本，直接会执行。所以就执行了事先定义好的fun函数了，并且把数据传入了进来。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fun</span><span class="params">(&#123;<span class="string">"name"</span>: "<span class="type">name</span>"&#125;)</span></span></span><br></pre></td></tr></table></figure><p>当然，这个只是一个原理演示，实际情况下，我们需要动态创建这个fun函数，并且在数据返回的时候销毁它。</p><p>因为在实际使用的时候，我们用的各种ajax库，基本都包含了jsonp的封装，不过我们还是要知道一下原理，不然就不知道为什么jsonp不能发post请求了~</p><h2 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h2><p>浏览器有跨域限制，但是服务器不存在跨域问题，所以可以由服务器请求所要域的资源再返回给客户端。</p><p>服务器代理是万能的。</p><h2 id="document-domain来跨子域"><a href="#document-domain来跨子域" class="headerlink" title="document.domain来跨子域"></a>document.domain来跨子域</h2><p>对于主域名相同，而子域名不同的情况，可以使用document.domain来跨域 这种方式非常适用于iframe跨域的情况，直接看例子吧 比如a页面地址为 <a href="http://a.yourhost.com" target="_blank" rel="noopener">http://a.yourhost.com</a> b页面为 <a href="http://b.yourhost.com。" target="_blank" rel="noopener">http://b.yourhost.com。</a> 这样就可以通过分别给两个页面设置 document.domain = <a href="http://yourhost.com" target="_blank" rel="noopener">http://yourhost.com</a> 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。</p><h2 id="使用window-name进行跨域"><a href="#使用window-name进行跨域" class="headerlink" title="使用window.name进行跨域"></a>使用window.name进行跨域</h2><p>window.name跨域同样是受到同源策略限制，父框架和子框架的src必须指向统一域名。window.name的优势在于，name的值在不同的页面(或者不同的域名)，加载后仍然存在，除非你显示的更改。并且支持的长度达到2M.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//a页面的代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="actionscript">  iframe.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> state = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  iframe.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(state === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> data = iframe.contentWindow.name;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="actionscript">        iframe.contentWindow.document.write(<span class="string">''</span>);</span></span><br><span class="line"><span class="undefined">        iframe.contentWindow.close();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.removeChild(iframe);</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(state === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="undefined">        state = 1;</span></span><br><span class="line"><span class="undefined">        iframe.contentWindow.location =</span></span><br><span class="line"><span class="actionscript">        <span class="string">'http://m.zhuanzhuan.58.com:8887/b.html'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.appendChild(iframe);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//b页面代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.name = <span class="string">"hello"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="location-hash跨域"><a href="#location-hash跨域" class="headerlink" title="location.hash跨域"></a>location.hash跨域</h2><p>location.hash方式跨域，是子框架具有修改父框架src的hash值，通过这个属性进行传递数据，且更改hash值，页面不会刷新。但是传递的数据的字节数是有限的。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//a页面的代码</span><br><span class="line"><span class="variable">&lt;script type="text/javascript"&gt;</span></span><br><span class="line">  iframe = document.createElement('iframe');</span><br><span class="line">  iframe.style.display = '<span class="keyword">none</span>';</span><br><span class="line">  var <span class="keyword">state</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  iframe.onload = function() &#123;</span><br><span class="line">    if(<span class="keyword">state</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        var data = window.location.hash;</span><br><span class="line">        console.<span class="keyword">log</span>(data);</span><br><span class="line">        iframe.contentWindow.document.write('');</span><br><span class="line">        iframe.contentWindow.close();</span><br><span class="line">        document.body.removeChild(iframe);</span><br><span class="line">    &#125; else if(<span class="keyword">state</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">state</span> = <span class="number">1</span>;</span><br><span class="line">        iframe.contentWindow.location =</span><br><span class="line">        'http://m.zhuanzhuan.<span class="number">58</span>.com:<span class="number">8887</span>/b.html';</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  document.body.appendChild(iframe);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//b页面代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  parent.location.hash = <span class="string">"world"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用postMessage实现页面之间通信"><a href="#使用postMessage实现页面之间通信" class="headerlink" title="使用postMessage实现页面之间通信"></a>使用postMessage实现页面之间通信</h2><p>信息传递除了客户端与服务器之前的传递，还存在以下几个问题：</p><ul><li><p>页面和新开的窗口的数据交互。</p></li><li><p>多窗口之间的数据交互。</p></li><li><p>页面与所嵌套的iframe之间的信息传递。</p></li></ul><p>window.postMessage是一个HTML5的api，允许两个窗口之间进行跨域发送消息。这个应该就是以后解决dom跨域通用方法了，具体可以参照MDN。</p><p>补充： 其实还有一些方法，比如window.name和location.hash。就很适用于iframe的跨域，不过iframe用的比较少了，所以这些方法也就有点过时了。</p><p>这些就是我对跨域的了解了，实际情况下，一般用cors，jsonp等常见方法就可以了。不过遇到了一些非常规情况，我们还是需要知道有更多的方法可以选择的</p><p>以上便是这次的文章分享了，可以给作者留言相互学习。也可以关注他的个人博客 <a href="https://wangningbo93.github.io/。" target="_blank" rel="noopener">https://wangningbo93.github.io/。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跨域几乎是一个面试必问的问题，总结一下。&lt;/p&gt;
&lt;h1 id=&quot;造成跨域的两种策略&quot;&gt;&lt;a href=&quot;#造成跨域的两种策略&quot; class=&quot;headerlink&quot; title=&quot;造成跨域的两种策略&quot;&gt;&lt;/a&gt;造成跨域的两种策略&lt;/h1&gt;&lt;p&gt;浏览器的同源策略会导致跨域，
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>html标签中meta属性使用介绍</title>
    <link href="https://blog.loong.io/2017/10/24/meta/"/>
    <id>https://blog.loong.io/2017/10/24/meta/</id>
    <published>2017-10-24T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.169Z</updated>
    
    <content type="html"><![CDATA[<p>meta是html语言head区的一个辅助性标签。也许你认为这些代码可有可无。其实如果你能够用好meta标签，会给你带来意想不到的效果，meta标签的作用有：搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等！</p><h1 id="html的meta总结"><a href="#html的meta总结" class="headerlink" title="html的meta总结"></a>html的meta总结</h1><p>meta标签的组成：meta标签共有两个属性，它们分别是http-equiv属性和name属性，不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。</p><h2 id="1、name属性"><a href="#1、name属性" class="headerlink" title="1、name属性"></a>1、name属性</h2><p>name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p><p>meta标签的name属性语法格式是：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metaname=<span class="string">"参数"</span><span class="built_in">content</span>=<span class="string">"具体的参数值"</span>&gt;。</span><br></pre></td></tr></table></figure><p>其中name属性主要有以下几种参数：</p><h3 id="A、Keywords-关键字"><a href="#A、Keywords-关键字" class="headerlink" title="A、Keywords(关键字)"></a>A、Keywords(关键字)</h3><p>说明：keywords用来告诉搜索引擎你网页的关键字是什么。</p><p>举例：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metaname=<span class="string">"keywords"</span><span class="built_in">content</span>=<span class="string">"meta总结,html meta,meta属性,meta跳转"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="B、description-网站内容描述"><a href="#B、description-网站内容描述" class="headerlink" title="B、description(网站内容描述)"></a>B、description(网站内容描述)</h3><p>说明：description用来告诉搜索引擎你的网站主要内容。</p><p>举例：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metaname=<span class="string">"description"</span><span class="built_in">content</span>=<span class="string">"haorooms博客,html的meta总结，meta是html语言head区的一个辅助性标签。"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="C、robots-机器人向导"><a href="#C、robots-机器人向导" class="headerlink" title="C、robots(机器人向导)"></a>C、robots(机器人向导)</h3><p>说明：robots用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引。</p><p>content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p><p>举例：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metaname=<span class="string">"robots"</span><span class="built_in">content</span>=<span class="string">"none"</span>&gt;</span><br></pre></td></tr></table></figure><p>具体参数如下：</p><p>信息参数为all：文件将被检索，且页面上的链接可以被查询；</p><p>信息参数为none：文件将不被检索，且页面上的链接不可以被查询；</p><p>信息参数为index：文件将被检索；</p><p>信息参数为follow：页面上的链接可以被查询；</p><p>信息参数为noindex：文件将不被检索，但页面上的链接可以被查询；</p><p>信息参数为nofollow：文件将被检索，但页面上的链接不可以被查询；</p><h3 id="D、author-作者"><a href="#D、author-作者" class="headerlink" title="D、author(作者)"></a>D、author(作者)</h3><p>说明：标注网页的作者</p><p>举例：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metaname=<span class="string">"author"</span><span class="built_in">content</span>=<span class="string">"root,root@xxxx.com"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="E、generator"><a href="#E、generator" class="headerlink" title="E、generator"></a>E、generator</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metaname=<span class="string">"generator"</span><span class="built_in">content</span>=<span class="string">"信息参数"</span>/&gt;</span><br></pre></td></tr></table></figure><p>meta标签的generator的信息参数，代表说明网站的采用的什么软件制作。</p><h3 id="F、COPYRIGHT"><a href="#F、COPYRIGHT" class="headerlink" title="F、COPYRIGHT"></a>F、COPYRIGHT</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="attribute">METANAME</span>=<span class="string">"COPYRIGHT"</span>CONTENT="信息参数"&gt;</span><br></pre></td></tr></table></figure><p>meta标签的COPYRIGHT的信息参数，代表说明网站版权信息。</p><h3 id="G、revisit-after"><a href="#G、revisit-after" class="headerlink" title="G、revisit-after"></a>G、revisit-after</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="attribute">METAname</span>=<span class="string">"revisit-after"</span>CONTENT="7days"&gt;</span><br></pre></td></tr></table></figure><p>revisit-after代表网站重访,7days代表7天，依此类推。</p><h2 id="2、http-equiv属性"><a href="#2、http-equiv属性" class="headerlink" title="2、http-equiv属性"></a>2、http-equiv属性</h2><p>http-equiv顾名思义，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。</p><p>meta标签的http-equiv属性语法格式是：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metahttp-equiv=<span class="string">"参数"</span><span class="built_in">content</span>=<span class="string">"参数变量值"</span>&gt;；</span><br></pre></td></tr></table></figure><p>其中http-equiv属性主要有以下几种参数：</p><h3 id="A、Expires-期限"><a href="#A、Expires-期限" class="headerlink" title="A、Expires(期限)"></a>A、Expires(期限)</h3><p>说明：可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。</p><p>用法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metahttp-equiv=<span class="string">"expires"</span><span class="built_in">content</span>=<span class="string">"Fri,12Jan200118:18:18GMT"</span>&gt;</span><br></pre></td></tr></table></figure><p>注意：必须使用GMT的时间格式。</p><h3 id="B、Pragma-cache模式"><a href="#B、Pragma-cache模式" class="headerlink" title="B、Pragma(cache模式)"></a>B、Pragma(cache模式)</h3><p>说明：禁止浏览器从本地计算机的缓存中访问页面内容。</p><p>用法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metahttp-equiv=<span class="string">"Pragma"</span><span class="built_in">content</span>=<span class="string">"no-cache"</span>&gt;</span><br></pre></td></tr></table></figure><p>注意：这样设定，访问者将无法脱机浏览。</p><h3 id="C、Refresh-刷新"><a href="#C、Refresh-刷新" class="headerlink" title="C、Refresh(刷新)"></a>C、Refresh(刷新)</h3><p>说明：自动刷新并指向新页面。</p><p>用法：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metahttp-equiv=<span class="string">"Refresh"</span>content=<span class="string">"2;URL=http://www.haorooms.com"</span>&gt; <span class="comment">//(注意后面的引号，分别在秒数的前面和网址的后面)</span></span><br></pre></td></tr></table></figure><p>注意：其中的2是指停留2秒钟后自动刷新到URL网址。</p><h3 id="D、Set-Cookie-cookie设定"><a href="#D、Set-Cookie-cookie设定" class="headerlink" title="D、Set-Cookie(cookie设定)"></a>D、Set-Cookie(cookie设定)</h3><p>说明：如果网页过期，那么存盘的cookie将被删除。</p><p>用法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="attribute">metahttp-equiv</span>=<span class="string">"Set-Cookie"</span>content="cookie <span class="attribute">value</span>=xxx;expires=Friday,12-Jan-200118:18:18GMT；path=/"&gt;</span><br></pre></td></tr></table></figure><p>注意：必须使用GMT的时间格式。</p><h3 id="E、Window-target-显示窗口的设定"><a href="#E、Window-target-显示窗口的设定" class="headerlink" title="E、Window-target(显示窗口的设定)"></a>E、Window-target(显示窗口的设定)</h3><p>说明：强制页面在当前窗口以独立页面显示。</p><p>用法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metahttp-equiv=<span class="string">"Window-target"</span><span class="built_in">content</span>=<span class="string">"_top"</span>&gt;</span><br></pre></td></tr></table></figure><p>注意：用来防止别人在框架里调用自己的页面。</p><h3 id="F、content-Type-显示字符集的设定"><a href="#F、content-Type-显示字符集的设定" class="headerlink" title="F、content-Type(显示字符集的设定)"></a>F、content-Type(显示字符集的设定)</h3><p>说明：设定页面使用的字符集。</p><p>用法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metahttp-equiv=<span class="string">"content-Type"</span><span class="built_in">content</span>=<span class="string">"text/html;charset=gb2312"</span>&gt;</span><br></pre></td></tr></table></figure><p>具体如下：</p><p>meta标签的charset的信息参数如GB2312时，代表说明网站是采用的编码是简体中文；</p><p>meta标签的charset的信息参数如BIG5时，代表说明网站是采用的编码是繁体中文；</p><p>meta标签的charset的信息参数如iso-2022-jp时，代表说明网站是采用的编码是日文；</p><p>meta标签的charset的信息参数如ks_c_5601时，代表说明网站是采用的编码是韩文；</p><p>meta标签的charset的信息参数如ISO-8859-1时，代表说明网站是采用的编码是英文；</p><p>meta标签的charset的信息参数如UTF-8时，代表世界通用的语言编码；</p><h3 id="G、content-Language（显示语言的设定）"><a href="#G、content-Language（显示语言的设定）" class="headerlink" title="G、content-Language（显示语言的设定）"></a>G、content-Language（显示语言的设定）</h3><p>用法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metahttp-equiv=<span class="string">"Content-Language"</span><span class="built_in">content</span>=<span class="string">"zh-cn"</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="H、Cache-Control指定请求和响应遵循的缓存机制。"><a href="#H、Cache-Control指定请求和响应遵循的缓存机制。" class="headerlink" title="H、Cache-Control指定请求和响应遵循的缓存机制。"></a>H、Cache-Control指定请求和响应遵循的缓存机制。</h3><p>Cache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、on</p><p>ly-if-cached，响应消息中的指令包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age。各个消息中的指令含义如下</p><p>Public指示响应可被任何缓存区缓存</p><p>Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效</p><p>no-cache指示请求或响应消息不能缓存</p><p>no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</p><p>max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应</p><p>min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应</p><p>max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。</p><h3 id="J、http-equiv-”imagetoolbar”"><a href="#J、http-equiv-”imagetoolbar”" class="headerlink" title="J、http-equiv=”imagetoolbar”"></a>J、http-equiv=”imagetoolbar”</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metahttp-equiv=<span class="string">"imagetoolbar"</span><span class="built_in">content</span>=<span class="string">"false"</span>/&gt;</span><br></pre></td></tr></table></figure><p>指定是否显示图片工具栏，当为false代表不显示，当为true代表显示。</p><h3 id="K、Content-Script-Type"><a href="#K、Content-Script-Type" class="headerlink" title="K、Content-Script-Type"></a>K、Content-Script-Type</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="attribute">Metahttp-equiv</span>=<span class="string">"Content-Script-Type"</span>Content="text/javascript"&gt;</span><br></pre></td></tr></table></figure><p>W3C网页规范，指明页面中脚本的类型。</p><h3 id="L-页面跳转，只用于IE"><a href="#L-页面跳转，只用于IE" class="headerlink" title="L 页面跳转，只用于IE"></a>L 页面跳转，只用于IE</h3><p>具体请看 <a href="http://www.haorooms.com/post/liulanq_think_ie" target="_blank" rel="noopener">http://www.haorooms.com/post/liulanq_think_ie</a></p><p>HTML &lt; base &gt; 标签</p><p>为页面上所有链接指定默认打开方式：</p><p>例如：</p><p>&lt;basetarget=”_self”&gt;</p><p>指定页面中所有标签都是本页打开！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;meta是html语言head区的一个辅助性标签。也许你认为这些代码可有可无。其实如果你能够用好meta标签，会给你带来意想不到的效果，meta标签的作用有：搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评
      
    
    </summary>
    
      <category term="HTML" scheme="https://blog.loong.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Node.js导论</title>
    <link href="https://blog.loong.io/2017/10/23/node/"/>
    <id>https://blog.loong.io/2017/10/23/node/</id>
    <published>2017-10-23T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.167Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js 不是一种独立的语言,与 PHP、Python、Perl、Ruby 的“既是语言也是平台” 不同。Node.js 也不是一个 JavaScript 框架,不同于 CakePHP、Django、Rails。Node.js更不 是浏览器端的库,不能与 jQuery、ExtJS 相提并论。Node.js 是一个让 JavaScript 运行在服务 端的开发平台,它让 JavaScript 成为脚本语言世界的一等公民,在服务端堪与 PHP、Python、 Perl、Ruby 平起平坐。</p><p>Node.js 是一个划时代的技术,它在原有的 Web 前端和后端技术的基础上总结并提炼出 了许多新的概念和方法,堪称是十多年来 Web 开发经验的集大成者。Node.js 可以作为服务 器向用户提供服务,与 PHP、Python、Ruby on Rails 相比,它跳过了 Apache、Nginx 等 HTTP 服务器,直接面向前端开发。Node.js 的许多设计理念与经典架构(如 LAMP)有着很大的 不同,可提供强大的伸缩能力,以适应21世纪10年代以后规模越来越庞大的互联网环境。</p><p>Node.js 是一个让 JavaScript 运行在浏览器之外的平台。它实现了诸如文件系统、模块、 包、操作系统 API、网络通信等 Core JavaScript 没有或者不完善的功能。历史上将 JavaScript 移植到浏览器外的计划不止一个,但Node.js 是最出色的一个。随着 Node.js 的成功,各种浏 览器外的 JavaScript 实现逐步兴起,因此产生了 CommonJS 规范。CommonJS 试图拟定一套 完整的 JavaScript 规范,以弥补普通应用程序所需的 API,譬如文件系统访问、命令行、模 块管理、函数库集成等功能。CommonJS 制定者希望众多服务端 JavaScript 实现遵循 CommonJS 规范,以便相互兼容和代码复用。Node.js 的部份实现遵循了CommonJS规范,但 由于两者还都处于诞生之初的快速变化期,也会有不一致的地方。</p><p>Node.js 的 JavaScript 引擎是 V8,来自 Google Chrome 项目。V8 号称是目前世界上最快 的 JavaScript 引擎,经历了数次引擎革命,它的 JIT(Just-in-time Compilation,即时编译) 执行速度已经快到了接近本地代码的执行速度。Node.js 不运行在浏览器中,所以也就不存 在 JavaScript 的浏览器兼容性问题,你可以放心地使用 JavaScript 语言的所有特性。</p><h1 id="Node-js优缺点"><a href="#Node-js优缺点" class="headerlink" title="Node.js优缺点"></a>Node.js优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>采用事件驱动、异步编程，为网络服务而设计。其实Javascript的匿名函数和闭包特性非常适合事件驱动、异步编程。而且JavaScript也简单易学，很多前端设计人员可以很快上手做后端设计。</li><li>Node.js非阻塞模式的IO处理给Node.js带来在相对低系统资源耗用下的高性能与出众的负载能力，非常适合用作依赖其它IO资源的中间层服务。</li><li>Node.js轻量高效，可以认为是数据密集型分布式部署环境下的实时应用系统的完美解决方案。Node非常适合如下情况：在响应客户端之前，您预计可能有很高的流量，但所需的服务器端逻辑和处理不一定很多。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>可靠性低. 一旦这个进程崩掉，那么整个web服务就崩掉了。</li><li>单进程，单线程，只支持单核CPU，不能充分的利用多核CPU服务器。</li></ol><h1 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h1><blockquote><p>这里只介绍Ubuntu怎么安装,windows只需要next就行.</p></blockquote><ol><li><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">下载</a>并解压(<code>tar xf  node-v8.7.0-linux-x64.tar.xz</code>);</p></li><li><p><code>sudo cp  node-v8.7.0-linux-x64   /usr/local  -a</code> 拷贝到这个目录下;</p></li><li><p>sudo vi /etc/bash.bashrc<br>最后添加<br>export PATH=$PATH:/usr/local/node-v8.7.0-linux-x64/bin</p></li><li><p>source  /etc/bash.bashrc</p></li><li><p><code>node -v</code>检查node.js的版本号</p></li></ol><h1 id="npm使用"><a href="#npm使用" class="headerlink" title="npm使用"></a>npm使用</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。出现版本提示表示安装成功;</p><h2 id="全局安装与本地安装"><a href="#全局安装与本地安装" class="headerlink" title="全局安装与本地安装"></a>全局安装与本地安装</h2><p>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有<code>-g</code>而已.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm --<span class="built_in">help</span>                 <span class="comment"># 帮助文档</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install express        <span class="comment"># 本地安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install express -g     <span class="comment"># 全局安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install jquery@3.0.0   <span class="comment"># 指定版本安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install update         <span class="comment"># 升级模块</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm uninstall jquery       <span class="comment"># 卸载模块</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install jquery@latest  <span class="comment"># 默认安装最新版,不过也可以指定</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install &lt;packageName&gt; --force  <span class="comment"># 强制重新安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install &lt;packageName&gt; -f       <span class="comment"># 强制重新安装</span></span></span><br></pre></td></tr></table></figure><h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><p>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。<br>可以通过 require() 来引入本地安装的包</p><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p>将安装包放在 /usr/lib/node_modules 下或者你 node 的安装目录。<br>可以直接在命令行使用.</p><h2 id="查看安装的模块"><a href="#查看安装的模块" class="headerlink" title="查看安装的模块"></a>查看安装的模块</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm ls        <span class="comment"># 查看本地模块</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm ls -g     <span class="comment"># 查看全局模块</span></span></span><br></pre></td></tr></table></figure><h2 id="使用-package-json"><a href="#使用-package-json" class="headerlink" title="使用 package.json"></a>使用 package.json</h2><p>package.json文件描述了一个NPM包的所有相关信息，包括作者、简介、包依赖、构建等信息。格式必须是严格的JSON格式。package.json 位于模块的目录下，用于定义包的属性。</p><p>每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。</p><p>我们现在看一个完整的package.json文件.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Hello World"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line"><span class="attr">"author"</span>: <span class="string">"张三"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"第一个node.js程序"</span>,</span><br><span class="line"><span class="attr">"keywords"</span>:[<span class="string">"node.js"</span>,<span class="string">"javascript"</span>],</span><br><span class="line"><span class="attr">"repository"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"https://path/to/url"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"license"</span>:<span class="string">"MIT"</span>,</span><br><span class="line"><span class="attr">"engines"</span>: &#123;<span class="attr">"node"</span>: <span class="string">"0.10.x"</span>&#125;,</span><br><span class="line"><span class="attr">"bugs"</span>:&#123;<span class="attr">"url"</span>:<span class="string">"http://path/to/bug"</span>,<span class="attr">"email"</span>:<span class="string">"bug@example.com"</span>&#125;,</span><br><span class="line"><span class="attr">"contributors"</span>:[&#123;<span class="attr">"name"</span>:<span class="string">"李四"</span>,<span class="attr">"email"</span>:<span class="string">"lisi@example.com"</span>&#125;],</span><br><span class="line"><span class="attr">"scripts"</span>: &#123;</span><br><span class="line"><span class="attr">"start"</span>: <span class="string">"node index.js"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"dependencies"</span>: &#123;</span><br><span class="line"><span class="attr">"express"</span>: <span class="string">"latest"</span>,</span><br><span class="line"><span class="attr">"mongoose"</span>: <span class="string">"~3.8.3"</span>,</span><br><span class="line"><span class="attr">"handlebars-runtime"</span>: <span class="string">"~1.0.12"</span>,</span><br><span class="line"><span class="attr">"express3-handlebars"</span>: <span class="string">"~0.5.0"</span>,</span><br><span class="line"><span class="attr">"MD5"</span>: <span class="string">"~1.2.0"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line"><span class="attr">"bower"</span>: <span class="string">"~1.2.8"</span>,</span><br><span class="line"><span class="attr">"grunt"</span>: <span class="string">"~0.4.1"</span>,</span><br><span class="line"><span class="attr">"grunt-contrib-concat"</span>: <span class="string">"~0.3.0"</span>,</span><br><span class="line"><span class="attr">"grunt-contrib-jshint"</span>: <span class="string">"~0.7.2"</span>,</span><br><span class="line"><span class="attr">"grunt-contrib-uglify"</span>: <span class="string">"~0.2.7"</span>,</span><br><span class="line"><span class="attr">"grunt-contrib-clean"</span>: <span class="string">"~0.5.0"</span>,</span><br><span class="line"><span class="attr">"browserify"</span>: <span class="string">"2.36.1"</span>,</span><br><span class="line"><span class="attr">"grunt-browserify"</span>: <span class="string">"~1.3.0"</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scripts-字段"><a href="#scripts-字段" class="headerlink" title="scripts 字段"></a>scripts 字段</h3><p>scripts指定了运行脚本命令的npm命令行缩写，比如start指定了运行<code>npm run start</code>时，所要执行的命令。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"preinstall"</span>: <span class="string">"echo here it comes!"</span>,</span><br><span class="line">    <span class="string">"postinstall"</span>: <span class="string">"echo there it goes!"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node index.js"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"tap test/*.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的scripts,指定了<code>npm run preinstall</code>、<code>npm run postinstall</code>、<code>npm run start</code>、<code>npm run test</code>时，所要执行的命令。</p><h3 id="dependencies字段，devDependencies字段"><a href="#dependencies字段，devDependencies字段" class="headerlink" title="dependencies字段，devDependencies字段"></a>dependencies字段，devDependencies字段</h3><p>dependencies字段指定了项目运行所依赖的模块，devDependencies指定项目开发所需要的模块。</p><p>它们都指向一个对象。该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。</p><blockquote><p>指定版本：比如1.2.2，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。<br>波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。<br>插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。<br>latest：安装最新版本。</p></blockquote><p>package.json文件可以手工编写，也可以使用npm init命令自动生成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm init --Yes</span></span><br></pre></td></tr></table></figure><p>这个命令采用互动方式，要求用户回答一些问题，然后在当前目录生成一个基本的package.json文件。所有问题之中，只有项目名称（name）和项目版本（version）是必填的，其他都是选填的。</p><p>有了package.json文件，直接使用<code>npm install</code>命令，就会在当前目录中安装所需要的模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>如果一个模块不在package.json文件之中，可以单独安装这个模块，并使用相应的参数，将其写入package.json文件之中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install express --save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install express --save-dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install express -S   <span class="comment"># 等同--save</span></span></span><br></pre></td></tr></table></figure><p>上面代码表示单独安装express模块，–save参数表示将该模块写入dependencies属性， –save-dev表示将该模块写入devDependencies属性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Node.js 不是一种独立的语言,与 PHP、Python、Perl、Ruby 的“既是语言也是平台” 不同。Node.js 也不是一个 JavaScript 框架,不同于 CakePHP、Django、Rails。Node.js更不 是浏览器端的库,不能与 jQuery
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="https://blog.loong.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>元素位置操作</title>
    <link href="https://blog.loong.io/2017/10/10/offsetscroll/"/>
    <id>https://blog.loong.io/2017/10/10/offsetscroll/</id>
    <published>2017-10-10T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.165Z</updated>
    
    <content type="html"><![CDATA[<p>scroll,offset的使用</p><h1 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h1><p>元素的可见大小由其高度、宽度决定,包括所有内边距、滚动条和边框大小(注意,不包括外边距)。通过<br>下列 5 个属性可以取得元素的偏移量:</p><ol><li><code>offsetHeight</code>: 获得元素高度　＝　height + border + padding</li><li><code>offsetWidth</code> : 获得元素宽度　 ＝ widht + border + padding</li><li><code>offsetLeft</code>: 获得元素左外边框距离包含该元素的左内边框的距离(经过定位)</li><li><code>offsetTop</code>: 获得元素上外边框距离包含该元素的上内边框的距离(经过定位)</li><li><code>offsetParent</code>: 获得包含该元素的元素(定位)</li></ol><p><img src="http://oujvmc3la.bkt.clouddn.com/offset.png" alt></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>offset相关的<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.f</span> &#123;</span></span><br><span class="line"><span class="undefined">      width: 600px;</span></span><br><span class="line"><span class="undefined">      height: 300px;</span></span><br><span class="line"><span class="undefined">      margin: 50px auto;</span></span><br><span class="line"><span class="undefined">      border: 10px solid green;</span></span><br><span class="line"><span class="undefined">      padding: 10px;</span></span><br><span class="line"><span class="undefined">      position: relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="undefined">      width: 200px;</span></span><br><span class="line"><span class="undefined">      height: 200px;</span></span><br><span class="line"><span class="undefined">      padding: 20px;</span></span><br><span class="line"><span class="undefined">      border: 10px solid red;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 0;</span></span><br><span class="line"><span class="undefined">      left: 0;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"/***********jQuery******************/"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="built_in">window</span>).width());</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="built_in">document</span>).width());</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//获取 内容 width</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">"#box"</span>).width()); <span class="comment">//200</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//获取  width + padding</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">"#box"</span>).innerWidth()); <span class="comment">//240</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//获取  width + padding + border</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">"#box"</span>).outerWidth()); <span class="comment">//260</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"/**********原生js*************/"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//获取  width + padding + border</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(box.offsetWidth); <span class="comment">//260, 只读属性</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//获取  width + padding</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(box.clientWidth); <span class="comment">// 240, 只读属性</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//获取  width</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> styles = <span class="built_in">window</span>.getComputedStyle(box);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(styles.width));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(styles.border);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"/*************位置有关系***********************/"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//一个元素和最近的设置过定位(不是static)的祖先元素之间的距离</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// offsetLeft, offsetTop 只读</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"box.offsetLeft = "</span>, box.offsetLeft);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"box.offsetTop = "</span>, box.offsetTop);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    box.style.left = <span class="string">"100px"</span>;<span class="comment">//设置完毕之后， offsetLeft也就变了</span></span></span><br><span class="line"><span class="actionscript">    box.style.top = <span class="string">"100px"</span>;<span class="comment">//设置完毕之后， offsetTop变了</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"box.offsetParent = "</span>, box.offsetParent);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用offset实现动画"><a href="#使用offset实现动画" class="headerlink" title="使用offset实现动画"></a>使用offset实现动画</h2><p>元素偏移量　　＝　　当前偏移量　＋　移动步长　</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>offset动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    *&#123;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        border-radius: 50%;</span></span><br><span class="line"><span class="undefined">        background-color: gold;</span></span><br><span class="line"><span class="undefined">        margin-top: 200px;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        box.style.left = box.offsetLeft + <span class="number">1</span> +<span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(box.offsetLeft&gt;<span class="number">1200</span>)&#123;</span></span><br><span class="line"><span class="undefined">          clearInterval(timer);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,20);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h1><p>scroll是滚动用法，即通过拖动条改变页面位置，scroll相关属性：　　　　　</p><ol><li><code>scrollHeight</code> :在没有滚动条的情况下,元素内容的总高度。</li><li><code>scrollWidth</code> :在没有滚动条的情况下,元素内容的总宽度。</li><li><code>scrollLeft</code> :被隐藏在内容区域左侧的像素数。通过设置这个属性可以改变元素的滚动位置。</li><li><code>scrollTop</code> :被隐藏在内容区域上方的像素数。通过设置这个属性可以改变元素的滚动位置。</li></ol><p><img src="http://oujvmc3la.bkt.clouddn.com/scroll.png" alt></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>window.scrollTo 控制浏览器窗口的滚动条<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      body &#123;</span></span><br><span class="line"><span class="undefined">        width: 3000px;</span></span><br><span class="line"><span class="undefined">        height: 3000px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.go-top</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">        border-radius:  50%;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        line-height: 100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        right: 100px;</span></span><br><span class="line"><span class="undefined">        bottom: 100px;</span></span><br><span class="line"><span class="undefined">        cursor: pointer;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"go-top"</span> <span class="attr">class</span>=<span class="string">"go-top"</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./scroll.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> goTop = <span class="built_in">document</span>.getElementById(<span class="string">"go-top"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//jQuery中的 scroll</span></span></span><br><span class="line"><span class="undefined">    /* $(window).scroll(function()&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> temp = getScrollValue();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"垂直滚动了: "</span>, temp.top);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// console.log("水平滚动了: ", temp.left);</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (temp.top &gt;= <span class="number">666</span>) &#123;</span></span><br><span class="line"><span class="javascript">        $(goTop).show();</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        $(goTop).hide();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//原生的scroll事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> temp = getScrollValue();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"垂直滚动了: "</span>, temp.top);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// console.log("水平滚动了: ", temp.left);</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (temp.top &gt;= <span class="number">666</span>) &#123;</span></span><br><span class="line"><span class="javascript">        $(goTop).show();</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        $(goTop).hide();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> timer;</span></span><br><span class="line"><span class="actionscript">    goTop.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      clearInterval(timer);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//让垂直滚动条缓慢滚动到顶部</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> current = <span class="built_in">document</span>.body.scrollTop;</span></span><br><span class="line"><span class="undefined">        current -= 100;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (current &lt;= <span class="number">10</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="undefined">          clearInterval(timer);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, current);</span></span><br><span class="line"><span class="undefined">      &#125;, 20);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JAVAScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能：实现一个比较通用的获得浏览器窗口的垂直，水平的滚动距离</span></span><br><span class="line"><span class="comment">返回值：对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      left: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">      top: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement.scrollTop &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      left: <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">      top:  <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      left: <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line">      top:  <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;scroll,offset的使用&lt;/p&gt;
&lt;h1 id=&quot;offset&quot;&gt;&lt;a href=&quot;#offset&quot; class=&quot;headerlink&quot; title=&quot;offset&quot;&gt;&lt;/a&gt;offset&lt;/h1&gt;&lt;p&gt;元素的可见大小由其高度、宽度决定,包括所有内边距、滚动条和边
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JSON XML</title>
    <link href="https://blog.loong.io/2017/09/21/JSON/"/>
    <id>https://blog.loong.io/2017/09/21/JSON/</id>
    <published>2017-09-21T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义介绍"><a href="#定义介绍" class="headerlink" title="定义介绍"></a>定义介绍</h2><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>可扩展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。<br>在电子计算机中，标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种的信息比如文章等。它可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。 它非常适合万维网传输，提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。是Internet环境中跨平台的、依赖于内容的技术，也是当今处理分布式结构信息的有效工具。早在1998年，W3C就发布了XML1.0规范，使用它来简化Internet的文档信息传输。    </p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><h2 id="JSON-vs-XML"><a href="#JSON-vs-XML" class="headerlink" title="JSON vs XML"></a>JSON vs XML</h2><ol><li>xml代码冗余</li><li>xml 数据类型不够广泛</li><li>xml 解析复杂</li></ol><h2 id="JSON用法"><a href="#JSON用法" class="headerlink" title="JSON用法"></a>JSON用法</h2><h3 id="JSON序列化"><a href="#JSON序列化" class="headerlink" title="JSON序列化"></a>JSON序列化</h3><p><code>JSON.stringify(value[, replacer [, space]])</code>即把JS对象转换为传输时的JSON字符串.</p><p>参数:</p><ul><li>value,将要序列化成 一个JSON 字符串的值。</li><li>replacer 可选,如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化；关于该参数更详细的解释和示例，请参考使用原生的 JSON 对象一文。</li><li>space 可选,指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格。</li></ul><p>返回值:</p><ul><li>一个表示给定值的JSON字符串。</li></ul><h3 id="JSON反序列化"><a href="#JSON反序列化" class="headerlink" title="JSON反序列化"></a>JSON反序列化</h3><p><code>JSON.parse()</code>方法解析一个JSON字符串，构造由字符串描述的JavaScript值或对象。可以提供可选的reviver函数以在返回之前对所得到的对象执行变换。</p><p>语法:</p><ul><li><p>JSON.parse(text[, reviver])<br>参数:</p></li><li><p>text 要被解析成JavaScript值的字符串，查看 JSON 对象学习的JSON 语法的说明。</p></li><li>reviver 可选,如果是一个函数，则规定了原始值如何被解析改造，在被返回之前。</li></ul><p>返回值</p><ul><li>Object对应给定的JSON文本。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>json<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> result = &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="string">'name'</span>:<span class="string">'wangkai'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'age'</span>: <span class="number">29</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'love'</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'student'</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> ko = <span class="built_in">JSON</span>.stringify(result);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(ko);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> ok = <span class="built_in">JSON</span>.parse(ko);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(ok);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XML-1"><a href="#XML-1" class="headerlink" title="XML"></a>XML</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>xml<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"***************************jquery*************************"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//创建一个XML</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      var xmlstr = `<span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>lisan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">student</span>&gt;</span>`</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//解析为DOM对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> result = $.parseXML(xmlstr);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//转换为jQuery对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> jXML = $(result);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(jXML);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//然后取出值</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> student = jXML.find(<span class="string">'student'</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> name = student.find(<span class="string">'name'</span>).text();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(name)<span class="comment">//lisan</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"********************js********************************"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//解析为DOM对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> jsXML = (<span class="keyword">new</span> DOMParser()).parseFromString(xmlstr, <span class="string">"application/xml"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//取出值</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> nam = jsXML.getElementsByTagName(<span class="string">'name'</span>)[<span class="number">0</span>].innerHTML;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(nam);<span class="comment">//lisan</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义介绍&quot;&gt;&lt;a href=&quot;#定义介绍&quot; class=&quot;headerlink&quot; title=&quot;定义介绍&quot;&gt;&lt;/a&gt;定义介绍&lt;/h2&gt;&lt;h3 id=&quot;XML&quot;&gt;&lt;a href=&quot;#XML&quot; class=&quot;headerlink&quot; title=&quot;XML&quot;&gt;&lt;/a&gt;XM
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="JSON" scheme="https://blog.loong.io/tags/JSON/"/>
    
      <category term="XML" scheme="https://blog.loong.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript面向对象</title>
    <link href="https://blog.loong.io/2017/09/21/object/"/>
    <id>https://blog.loong.io/2017/09/21/object/</id>
    <published>2017-09-21T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.159Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象的语言有一个标志,那就是它们都有类的概念,而通过类可以创建任意多个具有相同属性和方法的对象。<br>但是 ECMAScript 中没有类的概念,因此它的对象也与基于类的语言中的对象有所不同, 可以将ECMAScript对象理解为　　　　　　<br>包含多个键值对的集合，其中值可以是普通数据也可以是函数。</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象:所有的操作以对象为中心,对象拥有属性和方法,属性和方法属于对象的附庸.</p><p>面向对象的特点:</p><ol><li>封装:封装是把过程和数据包围起来,对数据的访问只能通过已定义的界面.</li><li>继承:派生类继承基类的属性方法.</li><li>多态:多态是指两个或者多个属于不同类的对象,对于同一个消息(方法调用)做出不同响应的过程的方法</li></ol><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><h3 id="使用已有的构造函数"><a href="#使用已有的构造函数" class="headerlink" title="使用已有的构造函数"></a>使用已有的构造函数</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hehe'</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object构造函数是所有构造函数的祖先,其他的都继承了Object的属性和方法</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// 创建了一个空对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">date</span>, <span class="keyword">typeof</span> str, <span class="keyword">typeof</span> a, <span class="keyword">typeof</span> obj)<span class="comment">//object</span></span><br></pre></td></tr></table></figure><h3 id="使用字面量来创建对象"><a href="#使用字面量来创建对象" class="headerlink" title="使用字面量来创建对象"></a>使用字面量来创建对象</h3><p><code>var obj = {};</code></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">      var obj = </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">        name : 'wangkai',</span></span><br><span class="line"><span class="template-variable">        age : 24</span></span><br><span class="line"><span class="template-variable">      &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      console.log(obj);//</span><span class="template-variable">&#123;name: "wangkai", age: 24&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      var obj1 = </span><span class="template-variable">&#123;&#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">      obj1.name = 'wangkai';</span></span><br><span class="line"><span class="xml">      obj1.age  = 24;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      console.log(obj1);//</span><span class="template-variable">&#123;name: "wangkai", age: 24&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      console.log(obj1.name);//访问属性,可以用 .</span></span><br><span class="line"><span class="xml">      console.log(obj1['name']);//访问属性,也可以用 []</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="自定义构造函数"><a href="#自定义构造函数" class="headerlink" title="自定义构造函数"></a>自定义构造函数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//使用构造函数来创建对象(批量创建)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//创建一个构造函数,构造函数一般是以大写字母开头</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.getname = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="keyword">this</span>.name;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.getage = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="keyword">this</span>.age;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//接下来就是用这个构造函数创建一个对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> kai = <span class="keyword">new</span> Person(<span class="string">'wangkai'</span>, <span class="number">24</span>);<span class="comment">//必须用new创建新的对象,不然其this指向的是window</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(kai);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用<code>new</code>创建新的对象,那么用<code>new</code>的时候发生了什么,会出现这种变化呢?</p><ol><li>this 指向新创建的对象</li><li>执行构造函数</li><li>返回创建完成的对象</li></ol></blockquote><blockquote><p>通过<code>obj.construction</code>可以确认这个对象是由哪个构造函数产生的.</p></blockquote><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>创建的每个函数都有一个 <code>prototype</code> (原型) 属性,这个属性是一个指针,指向一个对象,而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="actionscript">      Person.prototype.eat = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'wakaka.....'</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="actionscript">      Person.prototype.name = <span class="string">'kai'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> one = <span class="keyword">new</span> Person();</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> two = <span class="keyword">new</span> Person();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(one.name);<span class="comment">//kai</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(two.name);<span class="comment">//kai</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由上面的结果可以看出,添加到<code>prototype</code>的方法和属性成为了所有创建对象的共有属性或者方法.</p><h3 id="构造函数模式和原型模式结合"><a href="#构造函数模式和原型模式结合" class="headerlink" title="构造函数模式和原型模式结合"></a>构造函数模式和原型模式结合</h3><p>在原型模式中，每创建一个实例都会获得一样的属性值, 为了让每个实例对象都有自己特有的属性值可以将构造函数模式和原型模式相结合。<br>那么为什么不直接只用构造函数呢?他也可以添加共有属性和共有方法啊!<br>这里存在内存问题,每个对象都有的属性,每个对象都会给这个共有属性一块内存,那么一旦数量上去之后,就会占用大量内存,但是原型呢?他是一个引用类型,占用的只是一块内存.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="actionscript">      Person.prototype.leg = <span class="string">'two'</span>;</span></span><br><span class="line"><span class="actionscript">      Person.prototype.arm = <span class="string">'two'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> kai = <span class="keyword">new</span> Person(<span class="string">'kai'</span>, <span class="number">24</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(kai);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　</p><blockquote><p>这样即添加了特有属性,又添加了其共有属性.还有浪费内存.</p></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>原型链继承的缺点：</p><ol><li>构造函数中的属性没有实现继承</li><li>通过 new Person()来实现原型方法的继承，但是携带了无用的数据</li></ol><p><img src="http://oujvmc3la.bkt.clouddn.com/%E2%95%98%D0%BD%E2%95%A8%E2%95%90%E2%94%B4%E2%94%A4%E2%95%9D%E2%95%A0%E2%94%82%E2%95%A81.jpg" alt></p><p>先来一个实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="actionscript">      Person.prototype.arm = <span class="string">'two'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">Student</span><span class="params">(name, age, score)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      Student.prototype = <span class="keyword">new</span> Person();<span class="comment">//新产生的Person对象赋给Student的原型,必然新产生的对象有啥,其Student的原型就有啥.原型是对象共有的.</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//但是有一个问题就是新产生的Person对象也是有原型的啊,其原型里面的构造器指向的可不是Student啊,所以就有下面的一行代码,将构造器重定向.</span></span></span><br><span class="line"><span class="undefined">      Student.prototype.constructor = Student;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//上面两行代码就实现了Student继承Person</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      Student.prototype.hobbys = [<span class="string">'eat'</span>, <span class="string">'drink'</span>, <span class="string">'play'</span>, <span class="string">'happy'</span>];<span class="comment">//注意子的共有属性必然不能定义在继承函数之前,不然就会被继承函数覆盖.</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//试一下是否可以</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'kai'</span>, <span class="number">18</span>, <span class="number">99</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(stu.arm);<span class="comment">//kai</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(stu.hobbys);<span class="comment">//["eat", "drink", "play", "happy"]</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>属性和方法的查找顺序:从构造中内部开始 —–&gt; 自己的原型  —-&gt; 继承来的  —-&gt; 继承来的 …… —-&gt; Object</p></blockquote><blockquote><ol><li>所有实例共享属性，修改任意一个会影响其他实例  2. 创建实例时无法传递参数</li></ol></blockquote><h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><p>在子类构造函数中调用父类的构造函数.要想做到这一点必须要先学<code>call</code>或者<code>apply</code>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;call and apply&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> name = <span class="string">'global'</span>; <span class="comment">//window.name</span></span><br><span class="line"></span><br><span class="line">      function <span class="function"><span class="title">fun</span><span class="params">(arg1,arg2)</span></span>&#123;</span><br><span class="line">        console.log(<span class="string">"this = "</span>, <span class="keyword">this</span>);</span><br><span class="line">        console.log(<span class="string">"this.name = "</span>, <span class="keyword">this</span>.name);</span><br><span class="line">        console.log(<span class="string">"arg1 = "</span>, arg1);</span><br><span class="line">        console.log(<span class="string">"arg2 = "</span>, arg2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        function fun2 ()&#123;</span></span><br><span class="line"><span class="comment">          console.log("fun2 中  this = ", this);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        fun2();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//直接调用</span></span><br><span class="line">      <span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">      console.log(<span class="string">"---------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//间接调用</span></span><br><span class="line">      <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name: <span class="string">'zhansan'</span>,</span><br><span class="line">        age: <span class="number">20</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">        name: <span class="string">'lisi'</span>,</span><br><span class="line">        age: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      call方法的功能：在一个指定的this上调用函数，其实就是将函数内部的this指定为某个对象.</span></span><br><span class="line"><span class="comment">      call方法从第二个参数开始的参数，都是传递给函数的参数！！！</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="function"><span class="keyword">fun</span>.<span class="title">call</span><span class="params">(obj,<span class="number">10</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">fun</span>.<span class="title">call</span><span class="params">(obj2,<span class="number">100</span>,<span class="number">200</span>)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">fun</span>.<span class="title">call</span><span class="params">(<span class="literal">null</span>,<span class="number">1000</span>,<span class="number">2000</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      console.log(<span class="string">"-------------apply-----------"</span>);</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      apply: 功能和call一模一样</span></span><br><span class="line"><span class="comment">      区别：给函数传参使用的是数组,虽然此处传递的是数组，但是apply会把该数组中的每个元素分别传递给函数</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="function"><span class="keyword">fun</span>.<span class="title">apply</span><span class="params">(obj,[<span class="number">10</span>,<span class="number">20</span>])</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>以上为<code>call</code>和<code>apply</code>的用法!接下来是如何借用构造函数继承.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>借用构造函数继承<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.age = age;  </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    Person.prototype.sayHello = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"hello....."</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span><span class="params">(name,age,score)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//借用构造函数</span></span></span><br><span class="line"><span class="actionscript">      Person.call(<span class="keyword">this</span>, name, age);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.score = score;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    借用构造函数缺点：只能实现构造函数内部的属性和方法的继承，而原型上的属性和方法无法实现继承</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'lisi'</span>, <span class="number">20</span>, <span class="number">88</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(stu1);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>看了上面的原型链继承和借用构造函数继承,发现他们的一些方面是可以互补的.结合起来就有了下面的组合继承.</p></blockquote><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组合继承: 借用构造函数 + 原型链继承<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.age = age;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    Person.prototype.sayHello = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"hello....."</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span><span class="params">(name,age,score)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//使用借用构造函数,继承构造函数内部的属性</span></span></span><br><span class="line"><span class="actionscript">      Person.call(<span class="keyword">this</span>, name, age);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.score = score;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//使用原型链继承原型方法和原型属性</span></span></span><br><span class="line"><span class="actionscript">    Student.prototype = <span class="keyword">new</span> Person();</span></span><br><span class="line"><span class="undefined">    Student.prototype.constructor = Student;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'lisi'</span>, <span class="number">20</span>,<span class="number">59</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(stu1);</span></span><br><span class="line"><span class="undefined">    stu1.sayHello();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码是组合继承,即原型链继承+借用构造函数继承.但是还有一点小瑕丝,就是你查看继承关系的时候会发现其实原型链继承还是携带了无用的数据,这些无用的数据也占用了内存.<br>如下:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/2017-09-26%2020-30-29%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt></p><p>改良:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组合继承: 借用构造函数 + 原型链继承<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    功能：用于实现原型方法和属性的继承</span></span><br><span class="line"><span class="undefined">    @sup, 被继承的构造函数</span></span><br><span class="line"><span class="undefined">    @sub, 要继承的构造函数</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span><span class="params">(Sup,Sub)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//定义空构造函数的目的，就是为了不携带多余的属性</span></span></span><br><span class="line"><span class="actionscript">       <span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span></span>&#123;&#125;;</span></span><br><span class="line"><span class="undefined">       F.prototype = Sup.prototype;</span></span><br><span class="line"><span class="actionscript">       Sub.prototype = <span class="keyword">new</span> F();</span></span><br><span class="line"><span class="undefined">       Sub.prototype.constructor = Sub;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.age = age;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    Person.prototype.sayHello = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"hello....."</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span><span class="params">(name,age,score)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//使用借用构造函数,继承构造函数内部的属性</span></span></span><br><span class="line"><span class="actionscript">      Person.call(<span class="keyword">this</span>, name, age);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.score = score;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    使用原型链继承原型方法和原型属性</span></span><br><span class="line"><span class="actionscript">    要解决使用<span class="keyword">new</span> Person()产生多余的属性的问题</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined">    inherit(Person,Student);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'lisi'</span>, <span class="number">20</span>, <span class="number">34</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(stu1);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面向对象的语言有一个标志,那就是它们都有类的概念,而通过类可以创建任意多个具有相同属性和方法的对象。&lt;br&gt;但是 ECMAScript 中没有类的概念,因此它的对象也与基于类的语言中的对象有所不同, 可以将ECMAScript对象理解为　　　　　　&lt;br&gt;包含多个键值对的集
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript闭包</title>
    <link href="https://blog.loong.io/2017/09/21/closure/"/>
    <id>https://blog.loong.io/2017/09/21/closure/</id>
    <published>2017-09-21T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.156Z</updated>
    
    <content type="html"><![CDATA[<p>JAVAScript闭包:在函数内部定义一个函数,并且该函数引用到了当前作用域中的变量,并将该函数返回.</p><h2 id="创建一个闭包"><a href="#创建一个闭包" class="headerlink" title="创建一个闭包"></a>创建一个闭包</h2><p>闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式,就是在一个函数内部创建另一个函数。</p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>bibao<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> fun2;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> result = fun1();</span></span><br><span class="line"><span class="actionscript">      result()<span class="comment">//result()可以访问其他函数作用域中的变量,result()就是闭包.</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a>闭包的特点</h2><p>优点:</p><ul><li>实现变量的私有化,减少全局变量的定义.</li><li>动态生成数据(根据参数变化).</li></ul><p>缺点:</p><ul><li>闭包变量常驻内存,增加内存消耗.</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>count<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> count = <span class="number">50</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">          count++;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">red</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">          count--;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> count;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> [add, red, <span class="keyword">get</span>];</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> stucount = count();</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> addstu = stucount[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> redstu = stucount[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> getstu = stucount[<span class="number">2</span>];</span></span><br><span class="line"><span class="undefined">      addstu();</span></span><br><span class="line"><span class="undefined">      addstu();</span></span><br><span class="line"><span class="undefined">      redstu();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(getstu());</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//count无法直接修改,甚至访问不到,只能通过3个闭包函数进行操作.</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h2><p>下面的题目是面向对象与闭包相结合.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;closure&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    function <span class="function"><span class="title">fun</span><span class="params">(n,o)</span></span> &#123;</span><br><span class="line">    console.log(o);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="function"><span class="keyword">fun</span>:<span class="title">function</span><span class="params">(m)</span></span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="title">fun</span><span class="params">(m,n)</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> a = <span class="function"><span class="title">fun</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">      a.<span class="keyword">fun</span>(<span class="number">1</span>);<span class="comment">//0</span></span><br><span class="line">      a.<span class="keyword">fun</span>(<span class="number">2</span>);<span class="comment">//0</span></span><br><span class="line">      a.<span class="keyword">fun</span>(<span class="number">3</span>);<span class="comment">//0</span></span><br><span class="line">      <span class="keyword">var</span> b = <span class="function"><span class="title">fun</span><span class="params">(<span class="number">0</span>)</span></span>.<span class="keyword">fun</span>(<span class="number">1</span>).<span class="keyword">fun</span>(<span class="number">2</span>).<span class="keyword">fun</span>(<span class="number">3</span>);<span class="comment">//0 1 2</span></span><br><span class="line">      <span class="keyword">var</span> c = <span class="function"><span class="title">fun</span><span class="params">(<span class="number">0</span>)</span></span>.<span class="keyword">fun</span>(<span class="number">1</span>);<span class="comment">//0</span></span><br><span class="line">      c.<span class="keyword">fun</span>(<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line">      c.<span class="keyword">fun</span>(<span class="number">3</span>);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JAVAScript闭包:在函数内部定义一个函数,并且该函数引用到了当前作用域中的变量,并将该函数返回.&lt;/p&gt;
&lt;h2 id=&quot;创建一个闭包&quot;&gt;&lt;a href=&quot;#创建一个闭包&quot; class=&quot;headerlink&quot; title=&quot;创建一个闭包&quot;&gt;&lt;/a&gt;创建一个闭包&lt;/
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript内置对象Math,Date</title>
    <link href="https://blog.loong.io/2017/09/20/date/"/>
    <id>https://blog.loong.io/2017/09/20/date/</id>
    <published>2017-09-20T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.154Z</updated>
    
    <content type="html"><![CDATA[<p>Date类型使用自 UTC(Coordinated Universal Time,国际协调时间)1970 年 1 月 1 日午夜(零时)开始经过的毫秒数来保存日期。在使用这种数据存储格式的条件下, Date 类型保存的日期能够精确到 1970 年 1月 1 日之前或之后的 285 616 年。<br>ECMAScript 还为保存数学公式和信息提供了一个公共位置,即 Math 对象。与我们在 JavaScript 直接编写的计算功能相比, Math 对象提供的计算功能执行起来要快得多。 Math 对象中还提供了辅助完成<br>这些计算的属性和方法。   </p><h2 id="内置对象Date"><a href="#内置对象Date" class="headerlink" title="内置对象Date"></a>内置对象Date</h2><h3 id="创建一个日期对象"><a href="#创建一个日期对象" class="headerlink" title="创建一个日期对象"></a>创建一个日期对象</h3><p><code>var day = new Date();</code>:这是新建了一个现在的时间的对象.那么如何创建一个过去或者未来某一天的对象呢?<br><code>var day = new Date(&#39;2017-11-11 11:11:11&#39;)</code>:这就创建了一个将来的双11的日期.</p><h3 id="日期常用方法"><a href="#日期常用方法" class="headerlink" title="日期常用方法"></a>日期常用方法</h3><ul><li><code>getDate()</code>: 获取日</li><li><code>getDay ()</code> :获取星期</li><li><code>getMonth ()</code>: 获取月</li><li><code>getFullYear ()</code>: 获取完整年份</li><li><code>getHours ()</code>: 获取小时</li><li><code>getMinutes ()</code>: 获取分钟</li><li><code>getSeconds ()</code>: 获取秒</li><li><code>getMilliseconds ()</code>: 获取毫秒 1s = 1000ms</li><li><code>getTime ()</code> :返回累计毫秒数(从1970/1/1午夜)</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> day = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//现在时间 为2017-9-20</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(day.getYear());<span class="comment">//117 getYear返回的是距1900年1月1日的年份</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(day.getFullYear());<span class="comment">//2017 getFullYear返回的是公元年份</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(day.getMonth());<span class="comment">//8 返回的是月份-1,因为月份是0-11.</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(day.getDate());<span class="comment">//20 返回这个月的第几天</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(day.getDay());<span class="comment">//3 返回这个星期的第几天,星期日为0</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(day.getMinutes());<span class="comment">//20 返回分钟数</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(day.getSeconds());<span class="comment">//59 返回秒数</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(day.getMilliseconds());<span class="comment">//389 返回毫秒数</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(day.getTime());<span class="comment">//1505910059389 返回累计毫秒数(从1970/1/1午夜)</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Date-日期格式化为字符串的方法"><a href="#Date-日期格式化为字符串的方法" class="headerlink" title="Date 日期格式化为字符串的方法"></a>Date 日期格式化为字符串的方法</h3><ul><li><code>toDateString()</code> ——以特定于实现的格式显示星期几、月、日和年;</li><li><code>toTimeString()</code> ——以特定于实现的格式显示时、分、秒和时区;</li><li><code>toLocaleDateString()</code> ——以特定于地区的格式显示星期几、月、日和年;</li><li><code>toLocaleTimeString()</code> ——以特定于实现的格式显示时、分、秒;</li><li><code>toUTCString()</code> ——以特定于实现的格式完整的 UTC 日期。</li></ul><p>与 <code>toLocaleString()</code> 和 <code>toString()</code> 方法一样,以上这些字符串格式方法的输出也是因浏览器而异的,因此没有哪一个方法能够用来在用户界面中显示一致的日期信息。</p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//现在时间</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(d.toDateString());<span class="comment">//Wed Sep 20 2017</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(d.toLocaleDateString());<span class="comment">//2017/9/20</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(d.toTimeString());<span class="comment">//20:27:15 GMT+0800 (CST)</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(d.toLocaleTimeString());<span class="comment">//下午8:27:15</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(d.toUTCString());<span class="comment">//Wed, 20 Sep 2017 12:27:15 GMT</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="javascript-内置对象-Math"><a href="#javascript-内置对象-Math" class="headerlink" title="javascript　内置对象 Math"></a>javascript　内置对象 Math</h2><h3 id="Math-属性"><a href="#Math-属性" class="headerlink" title="Math 属性"></a>Math 属性</h3><p><img src="http://oujvmc3la.bkt.clouddn.com/math.png" alt></p><h3 id="Math-常见方法"><a href="#Math-常见方法" class="headerlink" title="Math 常见方法"></a>Math 常见方法</h3><h4 id="Math-max-Math-min"><a href="#Math-max-Math-min" class="headerlink" title="Math.max(),Math.min()"></a>Math.max(),Math.min()</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = Math.min(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">console.log(d);<span class="comment">//1 最小值</span></span><br><span class="line"></span><br><span class="line">d = Math.max(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">console.log(d);<span class="comment">//5 最大值</span></span><br><span class="line"></span><br><span class="line">var nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">56</span>,<span class="number">78</span>];</span><br><span class="line">d = Math.max.apply(Math, nums);</span><br><span class="line">console.log(d);<span class="comment">//78</span></span><br></pre></td></tr></table></figure><h4 id="舍入方法"><a href="#舍入方法" class="headerlink" title="舍入方法"></a>舍入方法</h4><p>下面来介绍将小数值舍入为整数的几个方法: <code>Math.ceil()</code> 、 <code>Math.floor()</code> 和 <code>Math.round()</code> 。</p><ul><li><code>Math.ceil()</code> 执行向上舍入,即它总是将数值向上舍入为最接近的整数;</li><li><code>Math.floor()</code> 执行向下舍入,即它总是将数值向下舍入为最接近的整数;</li><li><code>Math.round()</code> 执行标准舍入,即它总是将数值四舍五入为最接近的整数;</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取舍</span></span><br><span class="line"><span class="comment">//round</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">round</span>(<span class="number">20.1</span>));<span class="comment">//20</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">round</span>(<span class="number">20.6</span>));<span class="comment">//21</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">round</span>(<span class="number">-20.1</span>));<span class="comment">//-20</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">round</span>(<span class="number">-20.6</span>));<span class="comment">//-21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ceil 向上取</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">ceil</span>(<span class="number">20.1</span>));<span class="comment">//21</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">ceil</span>(<span class="number">20.6</span>));<span class="comment">//21</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">ceil</span>(<span class="number">-20.1</span>));<span class="comment">//-20</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">ceil</span>(<span class="number">-20.6</span>));<span class="comment">//-20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//floor 向下取</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">floor</span>(<span class="number">20.1</span>));<span class="comment">//20</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">floor</span>(<span class="number">20.6</span>));<span class="comment">//20</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">floor</span>(<span class="number">-20.1</span>));<span class="comment">//-21</span></span><br><span class="line">console.<span class="built-in">log</span>(Math.<span class="built-in">floor</span>(<span class="number">-20.6</span>));<span class="comment">//-21</span></span><br></pre></td></tr></table></figure><h4 id="random-方法"><a href="#random-方法" class="headerlink" title="random() 方法:"></a>random() 方法:</h4><p><code>Math.random()</code> 方法返回大于等于 0 小于 1 的一个随机数。<br>可以利用<code>Math.random()</code>实现某个正数范围内获得一个随机数:<code>值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)</code>.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">产生[<span class="number">0</span>, <span class="number">11</span>]之间的数</span><br><span class="line">num = Math.floor(Math.random()*<span class="number">12</span> + <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">产生[<span class="number">2</span>, <span class="number">10</span>]之间的数</span><br><span class="line">num = Math.floor(Math.random()*<span class="number">9</span> + <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p><img src="http://oujvmc3la.bkt.clouddn.com/math1.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Date类型使用自 UTC(Coordinated Universal Time,国际协调时间)1970 年 1 月 1 日午夜(零时)开始经过的毫秒数来保存日期。在使用这种数据存储格式的条件下, Date 类型保存的日期能够精确到 1970 年 1月 1 日之前或之后的 
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptDOM对象和jQuery对象的互相转换</title>
    <link href="https://blog.loong.io/2017/09/19/object/"/>
    <id>https://blog.loong.io/2017/09/19/object/</id>
    <published>2017-09-19T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.151Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery虽然简单,难免碰到必须要生js来解决的问题.但是他俩生成的对象并不能混用.这里来解决一下他俩的对象互相转化的问题.</p><blockquote><p>当然前提是你得引入jQuery</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jquery文档对象 ，DOM文档对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>jquery,dom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"lists"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//jQuery对象是DOM对象封装之后的结果，他们是不能混用的！！！！</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//jBox 是jQuery对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> jBox = $(<span class="string">"#box"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//box是DOM对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(jBox);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(box);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(jBox.id);<span class="comment">//jquery对象不要使用原生dom对象中的属性和方法</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(box.css(<span class="string">"width"</span>));<span class="comment">//dom对象不要使用query对象中的属性和方法</span></span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// jQuery  &lt;=====&gt;  DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(jBox.get(<span class="number">0</span>));<span class="comment">//变成了dom对象</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(box));<span class="comment">//变成 jQuery对象</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"--------------------------"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//.get(index) 按照位置直接获得对应的dom对象,多个对象的情况下</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lists = $(<span class="string">"#lists li"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lists.eq(<span class="number">0</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lists.eq(<span class="number">1</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lists.get(<span class="number">0</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lists.get(<span class="number">1</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jQuery虽然简单,难免碰到必须要生js来解决的问题.但是他俩生成的对象并不能混用.这里来解决一下他俩的对象互相转化的问题.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当然前提是你得引入jQuery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://blog.loong.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript字符串</title>
    <link href="https://blog.loong.io/2017/09/12/string/"/>
    <id>https://blog.loong.io/2017/09/12/string/</id>
    <published>2017-09-12T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.150Z</updated>
    
    <content type="html"><![CDATA[<p>掌握JAVAScript的String操作</p><h2 id="创建一个字符串"><a href="#创建一个字符串" class="headerlink" title="创建一个字符串"></a>创建一个字符串</h2><ul><li><code>var string1 = &#39;hello world&#39;;</code></li><li><code>var string2 = new String(&#39;hello world&#39;);</code></li><li><code>var string3 = String(&#39;hello world&#39;);</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>字符串操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> string1 = <span class="string">'hello world'</span>;<span class="comment">//创建的是一个字符串,普通类型</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> string2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);<span class="comment">//创建的是一个字符串对象,引用类型</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> string3 = <span class="built_in">String</span>(<span class="string">'hello world'</span>);<span class="comment">//和第一种相同</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(string1,string2,string3);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span> string1);<span class="comment">//string</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span> string2);<span class="comment">//object</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span> string3);<span class="comment">//string</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(string1 === <span class="string">'hello world'</span>));<span class="comment">//true</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(string2 === <span class="string">'hello world'</span>));<span class="comment">//false</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(string3 === <span class="string">'hello world'</span>));<span class="comment">//true</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h2><h3 id="charAt-index-获取响应位置的字符"><a href="#charAt-index-获取响应位置的字符" class="headerlink" title="charAt(index),获取响应位置的字符"></a>charAt(index),获取响应位置的字符</h3><p>这其实不是常用方法,但是要知道.获取相应位置的字符.一般采用的是<code>String[0]</code>,这样可以直接获取到第一个字符,等同于<code>String.charAt(0)</code>,但是明显是<code>String[0]</code>更为简单.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>字符串位置索引<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>));<span class="comment">//h</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str[<span class="number">0</span>]);<span class="comment">//h</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>PS:既然可以这样索引,如果把它的索引的值重新赋一个新的值,其原字符串是否会发生改变呢?事实证明,这个索引值可以赋一个新的值,没有报错,但是这个字符串本身并没有发生改变,字符串属于不可变类型.</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span></span><br><span class="line"><span class="actionscript">      str[<span class="number">0</span>] = <span class="string">'b'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str);<span class="comment">//hello world</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="charCodeAt-index-获取相应位置字符的编码"><a href="#charCodeAt-index-获取相应位置字符的编码" class="headerlink" title="charCodeAt(index),获取相应位置字符的编码"></a>charCodeAt(index),获取相应位置字符的编码</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">str</span> = <span class="string">'abcdef'</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.charCodeAt(<span class="number">0</span>));<span class="comment">//返回字符编码97</span></span><br></pre></td></tr></table></figure><h3 id="fromCharCode-将编码转换为字符"><a href="#fromCharCode-将编码转换为字符" class="headerlink" title="fromCharCode(),将编码转换为字符"></a>fromCharCode(),将编码转换为字符</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.fromCharCode(<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>);<span class="comment">//bcd</span></span><br></pre></td></tr></table></figure><h3 id="indexOf-查找"><a href="#indexOf-查找" class="headerlink" title="indexOf(),查找"></a>indexOf(),查找</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.indexOf(<span class="string">'l'</span>));<span class="comment">//2 同样,它索引的是第一个出现这个字符的位置.</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.indexOf(<span class="string">'wo'</span>));<span class="comment">//6 查找子串,查找的是第一个子串出现的位置,显示的索引位置是子串第一个字母出现的位置.</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.indexOf(<span class="string">'x'</span>));<span class="comment">//-1 如果这个字符找不到,它的索引值为-1.</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(str.indexOf(<span class="string">'l'</span>, <span class="number">5</span>));<span class="comment">//9 第二个参数表示调用该方法的字符串中开始查找的位置.默认为0.</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意,indexOf()严格区分大小写</p></blockquote><h3 id="slice-切片"><a href="#slice-切片" class="headerlink" title="slice(),切片"></a>slice(),切片</h3><p><code>slice()</code>从一个字符串中提取字符串并返回新字符串。在一个字符串中的改变不会影响另一个字符串.<br>两个参数:</p><ul><li><code>begin</code>,是一个索引位置,从该位置开始切割字符串.</li><li><code>end</code>,可选,如果不填,默认切到最后.也是一个索引位置,切到该位置.不包括在该位置的字符.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str.slice(<span class="number">0</span>, <span class="number">5</span>));<span class="comment">//hello</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str.slice(<span class="number">-5</span>, <span class="number">-1</span>));<span class="comment">//worl</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str.slice(<span class="number">-5</span>));<span class="comment">//world</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str.slice(<span class="number">-5</span>, <span class="number">10</span>))<span class="comment">//worl</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="substr-按照指定长度去切片"><a href="#substr-按照指定长度去切片" class="headerlink" title="substr(),按照指定长度去切片"></a>substr(),按照指定长度去切片</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str.substr(<span class="number">0</span>, <span class="number">5</span>));<span class="comment">//hello 第二个参数是表示要切几个字符长度</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="substring-切片"><a href="#substring-切片" class="headerlink" title="substring(),切片"></a>substring(),切片</h3><p>这个函数和<code>slice()</code>参数一样,不过他有个比较智能的方面,如果 <code>indexStart</code> 大于 <code>indexEnd</code>，则 <code>substring</code> 的执行效果就像两个参数调换了一样。例如，<code>str.substring(1, 0) == str.substring(0, 1)</code>。</p><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><p><code>toUpperCase()</code>:转化为大写.<br><code>toLowerCase()</code>:转化为小写.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>大小写<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> str = <span class="string">'Hello World'</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> str1 = <span class="string">'Hi China'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str.toUpperCase());<span class="comment">//HELLO WORLD</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str1.toLowerCase());<span class="comment">//hi china</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="split-字符串切割"><a href="#split-字符串切割" class="headerlink" title="split(),字符串切割"></a>split(),字符串切割</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>切割<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> str = <span class="string">'hello world hi china'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(str.split(<span class="string">' '</span>));<span class="comment">//返回一个数组;['hello','world','hi','china']</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;掌握JAVAScript的String操作&lt;/p&gt;
&lt;h2 id=&quot;创建一个字符串&quot;&gt;&lt;a href=&quot;#创建一个字符串&quot; class=&quot;headerlink&quot; title=&quot;创建一个字符串&quot;&gt;&lt;/a&gt;创建一个字符串&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var strin
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础进阶</title>
    <link href="https://blog.loong.io/2017/09/12/JAVAScript-2/"/>
    <id>https://blog.loong.io/2017/09/12/JAVAScript-2/</id>
    <published>2017-09-12T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.146Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript声明提升<br>JavaScript数值转换<br>javascript操作符及控制语句<br>javascript函数传参<br>javascript函数操作符<br>javascript数组的应用<br>javascript原生DOM操作<br>javascript原生事件操作</p><h2 id="声明提升"><a href="#声明提升" class="headerlink" title="声明提升"></a>声明提升</h2><h3 id="变量声明提升"><a href="#变量声明提升" class="headerlink" title="变量声明提升"></a>变量声明提升</h3><p>变量声明提升:变量的定义在执行时会被提升到当前作用域的顶部，但是赋值的操作位置不变.</p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(f);<span class="comment">//undefined</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> f = <span class="number">100</span>;</span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    变量声明提升:变量的定义在执行时会被提升到当前作用域的顶部，但是赋值的操作位置不变</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="函数声明提升"><a href="#函数声明提升" class="headerlink" title="函数声明提升"></a>函数声明提升</h3><p>函数声明提升：会将函数的声明提升到当前作用域的顶部.    </p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>作用域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    fun();<span class="comment">//100</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 函数声明提升：会将函数的声明提升到当前作用域的顶部</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> f = <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(f);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>提升<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a = <span class="number">10</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> a = <span class="number">100</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">/*等价代码*/</span></span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> a;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span></span><br><span class="line"><span class="undefined">      a = 100;</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    fun();<span class="comment">//</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个题,局部可以调用全局变量,所以应该会显示10.这是错的.不要忘了后面还有个<code>var a = 100;</code>,变量声明提升,所以<code>var a;</code>被提升到了局部的最顶部,所以全局变量a在局部被局部变量a覆盖了,由于变量声明提升,只有声明,没有赋值,所以这里的a为<code>undefined</code>.</p><h2 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h2><p>有3个函数可以把非数值转换为数值:<code>Number()</code>,<code>parseInt()</code>和<code>parseFloat()</code>.   </p><h3 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h3><p><code>Number()</code>可以用于任何数据类型,若该类型不能被装换为数字,则返回<code>NaN</code>.<br>实例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">Number</span>(<span class="string">"Hello world!"</span>); <span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">Number</span>(<span class="string">""</span>);<span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">Number</span>(<span class="string">"000011"</span>);<span class="comment">//11</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">Number</span>(<span class="literal">true</span>);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="built_in">Number</span>(<span class="literal">false</span>);<span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> num6 = <span class="built_in">Number</span>(<span class="string">"123hello"</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num7 = <span class="built_in">Number</span>(<span class="string">"0x12"</span>);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h3><p><code>parseInt()</code>函数在转换字符串时,更多的是看其是否符合数值模式.它会忽略字符串前面的空格,直到找到第一个非空格字符.如果第一个字符不是数字字符或者负号,<code>parseInt()</code>就会返回<code>NaN</code>;也就是说,用<code>parseInt()</code>转换空字符串会返回<code>NaN</code>(<code>Number()</code>对空字符串返回的是0).<br>如果第一个字符是数字字符,<code>parseInt()</code>会继续解析第二个字符,直到解析完所有后续字符或者遇到了一个非数字字符.<br>例如:<code>123hello</code>会被转换为<code>123</code>,因为<code>hello</code>会被完全忽略.类似的,<code>22.5</code>会被转换为<code>22</code>,因为小数点并不是有效的数字字符.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">""</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"1234abc"</span>));<span class="comment">//1234</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"abc"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10.123"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"0x12"</span>));<span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"070"</span>));<span class="comment">//70, 并没有解析为８进制</span></span><br></pre></td></tr></table></figure><p>为了消除在使用<code>parseInt()</code>函数时可能导致的进制转换问题,可以为这个函数提供第二个参数,转换时使用的基数(即多少进制).也就是说这个只能由别的进制转换为10进制,而不能将10进制转换为其他的进制.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"010"</span>, <span class="number">8</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"20"</span>,<span class="number">2</span>));<span class="comment">//超过范围时，转换为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">16</span>));</span><br></pre></td></tr></table></figure><h3 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h3><p><code>parseFloat()</code>函数也是从第一个字符开始的(位置0)开始解析每个字符,都按照十进制解析.而且也是一直解析到字符串的末尾,或者解析遇见一个无效的浮点数字字符为止.<br>也就是说,字符串中的第一个小数点是有效的,而第二个小数点就是无效的了,因此他后面的字符串将被忽略.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"----parseFloat---------"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.234"</span>)); <span class="comment">//10.234</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.abc"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.23.4"</span>));<span class="comment">//10.23</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"0x10.234"</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"010.234"</span>));<span class="comment">//10.234</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"abc"</span>));<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><h2 id="操作符以及控制语句"><a href="#操作符以及控制语句" class="headerlink" title="操作符以及控制语句"></a>操作符以及控制语句</h2><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p><code>break</code>和<code>continue</code>语句用于在循环中精确的控制代码的执行.其中,<code>break</code>语句会立即退出循环,强制继续执行循环后面的语句.而<code>continue</code>语句虽然也是立即退出循环,但退出循环后会从循环的顶部继续执行.</p><blockquote><p><code>break</code>只会跳出一层循环.<code>continue</code>后面的的语句不会执行.</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)&#123;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    alert(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">5</span>)&#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果是多层循环,你想用<code>break</code>跳出所有的循环,就必须用到<code>label</code>语句,使用<code>label</code>语句可以在代码中添加标签,以便将来使用.</p><p>实例:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">out</span>: <span class="keyword">for</span> (<span class="keyword">var</span> j = 0; j &lt; 10; j++) &#123;</span><br><span class="line"></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">"j = "</span> + j);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">      console.<span class="built_in">log</span>(<span class="string">"i = "</span> + i);</span><br><span class="line">      <span class="keyword">if</span> (i == 5) &#123;</span><br><span class="line">        <span class="comment">//跳出当前循环，继续运行循环后边的代码</span></span><br><span class="line">        <span class="comment">// break;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//跳出指定循环，继续运行循环后边的代码</span></span><br><span class="line">        <span class="keyword">break</span> <span class="keyword">out</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在这里<code>break</code>跳出的就不仅仅是一层循环了,而是跳出了<code>label</code>语句标记的循环.</p><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p><code>switch</code>语句与if语句的关系最为密切,而且也是在其他语言中普遍使用的一种流控制语句.<br><code>switch</code>语句中使用任何数据类型(在很多其他语言中只能使用数值),无论是字符串,还是对象都没有问题.其次,每个<code>case</code>的值不一定是常量,可以是变量,甚至可以是表达式.      </p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="keyword">value</span><span class="number">1</span>:</span><br><span class="line">       statement</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="keyword">value</span><span class="number">2</span>:</span><br><span class="line">       statement</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">       statement</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意要使用关键字<code>break</code>,否则会导致执行多个<code>case</code>语句.不过有些特殊情况也需要忽略<code>break</code>以实现某个目标.<br>没有<code>break</code>会导致,匹配到一个<code>case</code>,他后面的<code>case</code>也会依次执行.</p></blockquote><p>实例:是一个输入日期,求该该天是今年的第多少天?</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> year = <span class="number">2017</span>, mon = <span class="number">10</span>, day = <span class="number">10</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> leap = <span class="number">0</span>, sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> ((year % <span class="number">400</span> == <span class="number">0</span>) || ((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>)))&#123;</span></span><br><span class="line"><span class="undefined">      leap = 1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">switch</span> (mon)&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">12</span>:</span></span><br><span class="line"><span class="undefined">      sum += 30;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">11</span>:</span></span><br><span class="line"><span class="undefined">      sum += 31;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">10</span>:</span></span><br><span class="line"><span class="undefined">      sum += 30;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">9</span>:</span></span><br><span class="line"><span class="undefined">      sum += 31;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">8</span>:</span></span><br><span class="line"><span class="undefined">      sum += 31;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">7</span>:</span></span><br><span class="line"><span class="undefined">      sum += 30;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">6</span>:</span></span><br><span class="line"><span class="undefined">      sum += 31;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">5</span>:</span></span><br><span class="line"><span class="undefined">      sum += 30;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">4</span>:</span></span><br><span class="line"><span class="undefined">      sum += 31;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">3</span>:</span></span><br><span class="line"><span class="undefined">      sum += 28 + leap;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">2</span>:</span></span><br><span class="line"><span class="undefined">      sum += 31;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">case</span>  <span class="number">1</span>:</span></span><br><span class="line"><span class="undefined">      sum += day;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(sum);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JAVAScript函数"><a href="#JAVAScript函数" class="headerlink" title="JAVAScript函数"></a>JAVAScript函数</h3><p>函数对于任何编程语言来说都是一个核心的概念.通过函数可以封装任意多条语句,而且可以在任何地方.任何时候调用执行.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javascript函数示例:</span><br><span class="line"><span class="keyword">function</span> <span class="title">sum</span>(arg1,arg2)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">arg1</span> + arg2;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>在上面的代码中,其中<code>arg1</code>,<code>arg2</code>为传递的形参,<code>sum(1,2)</code>中的数值为实参.</p><h4 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h4><p><code>arguments</code>是存储了函数传递过来的实参的,并且arguments对象只有函数开始时才可用.<code>arguments</code>对象只是与数组类似(它并不是ARRAY的实例),因为可以使用方括号语法访问它的每一个元素(即第一个元素是<code>arguments[0]</code>,第二个元素是<code>arguments[1]</code>,依次类推),使用<code>length</code>属性来确定传递进来多少个参数.     </p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>函数传递参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//参数个数随意</span></span></span><br><span class="line"><span class="actionscript">     <span class="comment">//arguments 是一个伪数组</span></span></span><br><span class="line"><span class="actionscript">     <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arg)</span></span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//arguments只能在函数内部使用！！！！！</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//arguments 用于获得实参</span></span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> result = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">       <span class="comment">//arguments.length是参数的个数</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//arguments[i], 就指定参数</span></span></span><br><span class="line"><span class="javascript">         result += <span class="built_in">arguments</span>[i];</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(sum.length);<span class="comment">//1</span></span></span><br><span class="line"><span class="actionscript">     <span class="comment">//该函数的形式参数个数！！！！！！</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">     sum();</span></span><br><span class="line"><span class="undefined">     sum(1);</span></span><br><span class="line"><span class="undefined">     sum(1,2);</span></span><br><span class="line"><span class="undefined">     sum(1,2,3);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">         </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><p>函数调用一次之后表示运算完毕,使用return关键字可以返回结果,同样return可以提前结束函数的运行.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">(arg1,arg2)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">  console.log(<span class="string">"after return ..."</span>);<span class="comment">//不会执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;<span class="comment">//返回计算结果</span></span><br><span class="line"></span><br><span class="line">function fun1(arg1)&#123;</span><br><span class="line">  console.log(arg1);</span><br><span class="line">  <span class="keyword">return</span>;<span class="comment">//返回undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><p>布尔操作符一共有3个:与,非,或.</p><h4 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非(!)"></a>逻辑非(!)</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">alert</span>(!false); <span class="comment">//true</span></span><br><span class="line"><span class="selector-tag">alert</span>(!<span class="string">"blue"</span>);<span class="comment">//false</span></span><br><span class="line"><span class="selector-tag">alert</span>(!<span class="number">0</span>);<span class="comment">//true</span></span><br><span class="line"><span class="selector-tag">alert</span>(!NaN);<span class="comment">//true</span></span><br><span class="line"><span class="selector-tag">alert</span>(!<span class="string">""</span>);<span class="comment">//true</span></span><br><span class="line"><span class="selector-tag">alert</span>(!<span class="number">12345</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="逻辑与-amp-amp"><a href="#逻辑与-amp-amp" class="headerlink" title="逻辑与(&amp;&amp;)"></a>逻辑与(&amp;&amp;)</h4><p>操作符由两个和号(&amp;&amp;)表示,至少有两个操作数.<br>逻辑与的特点：短路<br>短路：与运算从左向右执行，一旦遇到一个为假的,那么后边的不再执行      </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="number">10</span> <span class="meta">&amp;&amp; 0);<span class="comment">//0</span></span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">0</span> <span class="meta">&amp;&amp; 10);<span class="comment">//0</span></span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">10</span> <span class="meta">&amp;&amp; 20);<span class="comment">//20</span></span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">10</span> <span class="meta">&amp;&amp; true);<span class="comment">//true</span></span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">10</span> <span class="meta">&amp;&amp; false);<span class="comment">//false</span></span></span><br><span class="line"></span><br><span class="line">var d = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//d++本身是一个表达式，只不过该表达式的值等于 没有自增1之前的值。</span></span><br><span class="line"><span class="comment">//++d本身也是一个表达式,只不过该表达式的值等于自增1以后的值.</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">10</span> <span class="meta">&amp;&amp; 20 &amp;&amp; 30 &amp;&amp; d++);<span class="comment">//10</span></span></span><br><span class="line">console.<span class="built_in">log</span>(d);<span class="comment">//11</span></span><br></pre></td></tr></table></figure><h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或(||)"></a>逻辑或(||)</h4><p>操作符由两个竖线符号(||)表示,至少有两个操作数.<br>它的特点和逻辑与类似,也是短路,不过他是从左向右执行,一旦遇到一个为真,那么后面的不在执行.   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="number">10</span> <span class="params">||</span> <span class="literal">false</span>);<span class="regexp">//</span><span class="number">10</span></span><br><span class="line">console.log(<span class="literal">false</span> <span class="params">||</span> <span class="number">10</span> <span class="params">||</span> <span class="number">20</span> );<span class="regexp">//</span><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><p>小于(&lt;),大于(&gt;),小于等于(&lt;=),和大于等于(&gt;=),相等(==)，不等(!=)，全等(===)，不全等(!==)操作符.</p><ol><li>如果两个操作数都是数值,则执行数值比较.</li><li>如果两个操作数都是字符串,则比较两个字符对应的字符编码值.</li><li>如果一个操作数是数值,则将另一个操作数转换为一个数值,然后执行数值比较.</li><li>如果一个操作数是对象,则调用这个对象的<code>valueOf()</code>方法,用得到的结果按照前面的规则执行比较.如果对象没有<code>valueOf()</code>方法,则调用<code>toString()</code>方法,并用得到的结果根据前面的规则执行比较.</li><li>如果一个操作数是布尔值,则现将其转换为数值,然后再执行比较.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &gt; <span class="number">20</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &lt; <span class="number">20</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &lt; <span class="string">"23"</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"23"</span> &gt; <span class="string">"233"</span>);<span class="comment">//false,按照编码的大小去比较,它是挨个字符去比较.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &gt; <span class="literal">NaN</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &lt; <span class="literal">NaN</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> == <span class="literal">NaN</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">==  相等, 是先转换再比较</span></span><br><span class="line"><span class="comment">=== 全等, 是仅比较而不转换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> == <span class="string">"10"</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> === <span class="string">"10"</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> != <span class="string">"10"</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> !== <span class="string">"10"</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><p><code>var result = 表达式１? 表达式2: 表达式3;</code><br>如果表达式１的值为true, 那么表达式2的值会赋值给result;否则，表达式3的值会赋值给result.</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 如果表达式１的值为<span class="literal">true</span>, 那么表达式<span class="number">2</span>的值会赋值给<span class="literal">result</span>;否则，表达式<span class="number">3</span>的值会赋值给<span class="literal">result</span></span><br><span class="line">    <span class="keyword">var</span> <span class="literal">result</span> = <span class="number">10</span> &gt; <span class="number">20</span> ?  'hello' : 'world';</span><br><span class="line">    console.log(<span class="literal">result</span>);//world</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">10</span>&gt;<span class="number">20</span>)&#123;</span><br><span class="line">    <span class="literal">result</span> = 'hello';</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="literal">result</span> = 'world';</span><br><span class="line">    &#125;</span><br><span class="line">    */</span><br></pre></td></tr></table></figure><h3 id="复合操作符"><a href="#复合操作符" class="headerlink" title="复合操作符"></a>复合操作符</h3><p>复合操作符用于简化操作符,提升性能.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复合运算符</span></span><br><span class="line">var a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">a += b; <span class="comment">// a = a + b;</span></span><br><span class="line">a -= b; <span class="comment">// a = a - b;</span></span><br><span class="line">a *= b; <span class="comment">// a = a * b;</span></span><br><span class="line">a /= b; <span class="comment">// a = a / b;</span></span><br><span class="line">a %= b; <span class="comment">// a = a % b;</span></span><br></pre></td></tr></table></figure><h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h3><p>使用逗号操作符可以在一条语句中执行多个操作,如下所示:<br><code>var num = 1, num1 = 2;</code>      </p><p>逗号操作符还可以用于赋值.在用于赋值时,逗号操作符总会返回表达式中的最后一项,比如:<br><code>var result = (表达式1,表达式2,表达式3);</code><br>result的值为表达式3的值.逗号运算符取最后一个的结果为整个表达式的结果,但是前边所有的表达式都会运算.</p><h2 id="JAVAScript数组"><a href="#JAVAScript数组" class="headerlink" title="JAVAScript数组"></a>JAVAScript数组</h2><p>数组是值的有序集合,每个值就是一个元素,每个元素在数组中有一个位置,以数字表示,成为索引.JAVAScript数组是无类型,数组元素可以是任意类型,并且同一个数组中的不同元素也可能是不同的类型.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  <span class="keyword">one</span> = [];</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">typeof</span> <span class="keyword">one</span>);<span class="comment">//object</span></span><br></pre></td></tr></table></figure><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>使用数组直接量进行创建,方括号中使用逗号隔开:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [];</span><br><span class="line">var b = [<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">var c = [<span class="number">1.1</span>,true,'a'];</span><br><span class="line">var d = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">3</span>];  <span class="comment">//其中省略的元素值为undefined,稀疏数组</span></span><br></pre></td></tr></table></figure><p>使用Array()创建:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="type">Array</span>();<span class="comment">//创建空数组</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="type">Array</span>(<span class="number">10</span>);<span class="comment">//创建长度为10的元素</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//创建一个已经包含三个元素的数组</span></span><br></pre></td></tr></table></figure><h3 id="数组的读写操作"><a href="#数组的读写操作" class="headerlink" title="数组的读写操作:"></a>数组的读写操作:</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = [<span class="string">"hello"</span>]<span class="comment">;</span></span><br><span class="line">var <span class="keyword">b </span>= a[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="string">"world"</span><span class="comment">;</span></span><br><span class="line">i = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">a[i + <span class="number">2</span>] = <span class="string">"string"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度:"></a>数组的长度:</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">console.log(a.length); <span class="comment">//长度为４</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">999</span>] = <span class="number">999</span>; <span class="comment">//长度为　1000, 稀疏数组的长度大于元素的个数</span></span><br><span class="line">console.log(a.length);<span class="comment">// 长度为1000</span></span><br></pre></td></tr></table></figure><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p>使用for循环是最常见的遍历数组的方式:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">for(var i = <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line">  console.log(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里还是可以提高效率的!如下:</span></span><br><span class="line">for(var i = <span class="number">0</span>, len = a.length; i &lt; len; i++)&#123;<span class="comment">//这里把长度赋值,不用每次去调用这个方法.</span></span><br><span class="line">  console.log(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更简单的方式:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a)<span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  console.log(a[i]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>使用一个方法<code>forEach()</code>也是可以遍历的,后面会说到.</p><h2 id="数组常用的方法"><a href="#数组常用的方法" class="headerlink" title="数组常用的方法"></a>数组常用的方法</h2><h3 id="数组元素的添加和删除"><a href="#数组元素的添加和删除" class="headerlink" title="数组元素的添加和删除"></a>数组元素的添加和删除</h3><p>添加:</p><ul><li>直接对新索引值进行赋值(不是一个方法).</li><li><code>push()</code>使用<code>push()</code>方法在数组末尾添加一个或者多个元素.返回值为新长度.</li><li><code>unshift()</code>使用<code>unshift()</code>方法在数组的开端添加一个或者多个元素.</li></ul><p>删除:</p><ul><li>直接用delete删除,如:<code>delete a[0];</code>,他不会改变元素的索引位置和长度,只是把那个元素变为<code>undefined</code>.</li><li><code>pop()</code>删除最后一个值,长度减一.返回值为删除的那个元素.</li><li><code>shift()</code>方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组的添加和删除<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 直接对新索引值进行赋值</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="undefined">    a1[3] = 4;</span></span><br><span class="line"><span class="undefined">    a1[4] = 5;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//直接用delete删除</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">delete</span> a1[<span class="number">0</span>];<span class="comment">//不影响长度</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//末尾的添加，删除</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a1.push(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>));<span class="comment">//8</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a1);<span class="comment">//[undefined,2,3,4,5,10,20,30]</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//删除最后一个，长度减1</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a1.pop());<span class="comment">//30</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//开头添加，删除</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//shift unshift</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a2.shift());<span class="comment">//1</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// a2.unshift(10,20,30);</span></span></span><br><span class="line"><span class="undefined">    a2.unshift(10);</span></span><br><span class="line"><span class="undefined">    a2.unshift(20);</span></span><br><span class="line"><span class="undefined">    a2.unshift(30);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a2);<span class="comment">//[30,20,10,2,3,4,5]</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h3><p><code>join()</code>方法,数组拼接,不会改变原有数组,只是将拼接的字符串作为返回值,默认用<code>,</code>拼接.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">//join 数组拼接</span></span><br><span class="line">console.<span class="built_in">log</span>(a2.<span class="built_in">join</span>());<span class="comment">//1,2,3,4,5,6</span></span><br><span class="line">console.<span class="built_in">log</span>(a2.<span class="built_in">join</span>(<span class="string">''</span>));<span class="comment">//123456</span></span><br><span class="line">console.<span class="built_in">log</span>(a2.<span class="built_in">join</span>(<span class="string">'*'</span>));<span class="comment">//1*2*3*4*5*6</span></span><br><span class="line">console.<span class="built_in">log</span>(a2.<span class="built_in">join</span>(<span class="string">'+'</span>));<span class="comment">//1+2+3+4+5+6</span></span><br><span class="line">console.<span class="built_in">log</span>(a2);<span class="comment">//[1,2,3,4,5,6],可见原有数组并不会发生改变</span></span><br></pre></td></tr></table></figure><h3 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse()方法"></a>reverse()方法</h3><p><code>reverse()</code>颠倒方法,将数组中元素的位置颠倒。第一个数组元素成为最后一个数组元素，最后一个数组元素成为第一个。reverse 方法颠倒数组中元素的位置，并返回该数组的引用。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//<span class="built_in">reverse</span>颠倒，数组本身也被修改了</span><br><span class="line">var a4 = [<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>];</span><br><span class="line">console.<span class="built_in">log</span>(a4.<span class="built_in">reverse</span>());//[<span class="string">'o'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>, <span class="string">'h'</span>]</span><br><span class="line">console.<span class="built_in">log</span>(a4.<span class="built_in">reverse</span>());//[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br></pre></td></tr></table></figure><h3 id="sort-方法-对数组进行排序"><a href="#sort-方法-对数组进行排序" class="headerlink" title="sort()方法,对数组进行排序"></a>sort()方法,对数组进行排序</h3><p><code>sort()</code>方法在适当的位置对数组的元素进行排序，并返回数组。 sort 排序不一定是稳定的。默认排序顺序是根据字符串Unicode码点。<br>参数为一个函数,如果没有参数,默认按<code>unicode</code>码进行排序.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a9 = [<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(a9.sort());<span class="comment">//按照字符的编码进行排序，默认从小到大,比较的是第一个字符.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// sort传入参数进行排序</span></span><br><span class="line">    a9.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"a = %d, b = %d"</span>, a, b);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//从小到大排序为a-b,从大到小排序为b-a</span></span><br><span class="line">      <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//影响原数组</span></span><br><span class="line">    <span class="built_in">console</span>.log(a9);</span><br></pre></td></tr></table></figure><h3 id="concat方法，连接数组并返回一个新数组"><a href="#concat方法，连接数组并返回一个新数组" class="headerlink" title="concat方法，连接数组并返回一个新数组"></a>concat方法，连接数组并返回一个新数组</h3><p><code>concat()</code>方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var num1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">var num2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">var num3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="comment">// 组成新数组[1, 2, 3, 4, 5, 6, 7, 8, 9]; 原数组 num1, num2, num3 未被修改</span></span><br><span class="line">var nums = num1.concat(num2, num3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var alpha = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">var numeric = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 组成新数组 ["a", "b", "c", 1, 2, 3]; 原数组 alpha 和 numeric 未被修改</span></span><br><span class="line">var alphaNumeric = alpha.concat(numeric);</span><br></pre></td></tr></table></figure><h3 id="slice-方法，对数组内容进行浅复制"><a href="#slice-方法，对数组内容进行浅复制" class="headerlink" title="slice 方法，对数组内容进行浅复制"></a>slice 方法，对数组内容进行浅复制</h3><p><code>slice()</code>方法返回一份从开始到结束(不包括结束)选择的数组的一部分浅拷贝到一个新数组对象.原始数组不会被改变.<br>两个参数:分别为开始位置和结束位置.都是可选参数.返回值为一个含有提取元素的新数组.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//slice 数组切片</span></span><br><span class="line">   var a12 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">//begin end(不包含)</span></span><br><span class="line">   console.log(a12.slice(<span class="number">1</span>,<span class="number">4</span>));<span class="comment">//[2,3,4]</span></span><br><span class="line">   console.log(a12.slice());<span class="comment">//全切</span></span><br><span class="line">   console.log(a12.slice(<span class="number">3</span>));<span class="comment">//从3开始切，到最后</span></span><br><span class="line">   console.log(a12.slice(<span class="number">-7</span>,<span class="number">8</span>));<span class="comment">//从4开始。。。。。</span></span><br><span class="line"></span><br><span class="line">   var result = a12.slice(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">   result[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">   <span class="comment">//result, a12不是同一块内存地址，相互不影响</span></span><br><span class="line">   console.log(a12, result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//slice浅复制(引用类型)</span></span><br><span class="line">   var a13 = [[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>],<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">   result = a13.slice(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改切片后的数组</span></span><br><span class="line">   result[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1000</span>;</span><br><span class="line">   console.log(a13, result);<span class="comment">//互相影响,引用的是同一块内存地址.</span></span><br></pre></td></tr></table></figure><h3 id="splice-对数组元素进行替换修改"><a href="#splice-对数组元素进行替换修改" class="headerlink" title="splice　对数组元素进行替换修改"></a>splice　对数组元素进行替换修改</h3><p>splice() 方法通过删除现有元素和/或添加新元素来更改一个数组的内容。   </p><p>语法:</p><ul><li>array.splice(start)</li><li>array.splice(start, deleteCount)</li><li>array.splice(start, deleteCount, item1, item2, …)</li></ul><p>参数:</p><ul><li>start​:指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从1计数）。</li><li>deleteCount 可选 :整数，表示要移除的数组元素的个数。如果 deleteCount 是 0，则不移除元素。这种情况下，至少应添加一个新元素。如果 deleteCount 大于start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。如果deleteCount被省略，则其相当于(arr.length - start)。</li><li>item1, item2, … 可选:要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。</li></ul><p>返回值:</p><p>由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">splice: 添加，删除，修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">var</span> myFish = [<span class="string">"angel"</span>, <span class="string">"clown"</span>, <span class="string">"mandarin"</span>, <span class="string">"surgeon"</span>];</span><br><span class="line">result = myFish.<span class="built_in">splice</span>(<span class="number">0</span>,<span class="number">1</span>);//result，删除元素组成的数组</span><br><span class="line">console.<span class="built_in">log</span>(myFish,result);//['angel']</span><br><span class="line"></span><br><span class="line">//任意位置添加</span><br><span class="line">myFish.<span class="built_in">splice</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line">console.<span class="built_in">log</span>(myFish);//[<span class="string">"clown"</span>,<span class="string">"hello"</span>, <span class="string">"world"</span>,<span class="string">"mandarin"</span>, <span class="string">"surgeon"</span>]</span><br><span class="line"></span><br><span class="line">//修改</span><br><span class="line">myFish.<span class="built_in">splice</span>(<span class="number">2</span>,<span class="number">1</span>, <span class="string">"china"</span>);</span><br><span class="line">console.<span class="built_in">log</span>(myFish);//[<span class="string">"clown"</span>,<span class="string">"hello"</span>, <span class="string">"china"</span>,<span class="string">"mandarin"</span>, <span class="string">"surgeon"</span>]</span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p><code>toString()</code> 返回一个字符串，表示指定的数组及其元素。与<code>join()</code>类似.但是他没有参数,只能以<code>,</code>连接.</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> monthNames = [<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>];</span><br><span class="line"><span class="keyword">var</span> myVar = monthNames.toString(); // assigns <span class="string">"Jan,Feb,Mar,Apr"</span> <span class="keyword">to</span> myVar.</span><br></pre></td></tr></table></figure><h3 id="ECMA5中数组新方法"><a href="#ECMA5中数组新方法" class="headerlink" title="ECMA5中数组新方法"></a>ECMA5中数组新方法</h3><h4 id="array-forEach"><a href="#array-forEach" class="headerlink" title="array.forEach()"></a>array.forEach()</h4><p><code>array.forEach(callback[, thisArg])</code></p><p>callback 在数组每一项上执行的函数，接收三个参数：</p><ul><li>currentValue, 当前项（指遍历时正在被处理那个数组项）的值。</li><li>index, 当前项的索引（或下标）。</li><li>array, 数组本身。</li><li>thisArg 可选参数。用来当作callback 函数内this的值的对象.</li></ul><blockquote><p> forEach在遍历完数组元素之前是不会终止的.</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach直接遍历</span></span><br><span class="line">var a14 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">var sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接遍历</span></span><br><span class="line">a14.forEach(function(current,index, arr)&#123;</span><br><span class="line">  console.log(<span class="string">"current = "</span>, current);</span><br><span class="line">  <span class="comment">// console.log("index = ", index);</span></span><br><span class="line">  <span class="comment">// console.log("arr = ", arr);</span></span><br><span class="line">  sum += current;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(sum);</span><br></pre></td></tr></table></figure><h4 id="array-map"><a href="#array-map" class="headerlink" title="array.map()"></a>array.map()</h4><p><code>array.map(callback[, thisArg])</code></p><p>callback 在数组每一项上执行的函数，接收三个参数：</p><ul><li>currentValue, 当前项（指遍历时正在被处理那个数组项）的值。</li><li>index, 当前项的索引（或下标）。</li><li>array, 数组本身。</li></ul><p>thisArg 可选参数。用来当作callback 函数内this的值的对象。</p><p>返回值： 一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for (var i = 0; i &lt; a14.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//   a14[i] += 10;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map 等价于上面的函数</span></span><br><span class="line"><span class="keyword">var</span> result = a14.map(<span class="function"><span class="keyword">function</span>(<span class="params">current,index,arr</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//map需要每次返回，由返回的数据共同组成一个新数组</span></span><br><span class="line">   <span class="keyword">return</span> current + <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p><code>arr.indexOf(searchElement[, fromIndex = 0])</code></p><ul><li>searchElement   要查找的元素        </li><li>fromIndex     指定开始位置,默认为0  </li></ul><p>返回给定元素能找在数组中找到的第一个索引值，否则返回-1。  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a15 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">80</span>,<span class="number">60</span>,<span class="number">34</span>];</span><br><span class="line">console.log(a15.indexOf(<span class="number">20</span>));<span class="comment">//1</span></span><br><span class="line">console.log(a15.indexOf(<span class="number">200</span>));<span class="comment">//-1</span></span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p><code>arr.filter(callback[, thisArg])</code></p><p>callback 用来测试数组的每个元素的函数。调用时使用参数 (element, index, array)。</p><ul><li>element, 当前项（指遍历时正在被处理那个数组项）的值。</li><li>index, 当前项的索引（或下标）。</li><li>array, 数组本身。</li></ul><p>返回true表示保留该元素（通过测试），false则不保留。该方法的返回值为通过测试的元素组成的新的数组.<br>thisArg 可选。执行 callback 时的用于 this 的值。</p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>filter方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> b = a.filter(<span class="function"><span class="keyword">function</span><span class="params">(element,index,array)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> element % <span class="number">2</span> === <span class="number">0</span>;<span class="comment">//其返回值为true的元素,都被添加到了其返回值中.</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 上面的代码等价于下面的</span></span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">if</span>(element%<span class="number">2</span>===<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a);<span class="comment">//[1,2,3,4,5,6,7,8,9,10],可见这个方法对原数组不会产生影响.</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(b);<span class="comment">//[2,4,6,8,10]</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//如何将一个稀疏数组变为稠密数组?</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> x = [<span class="number">1</span>,,,,,,,,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,,,,<span class="number">7</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> y = x.filter(<span class="function"><span class="keyword">function</span><span class="params">(element,index,array)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> element === <span class="literal">undefined</span> ? <span class="literal">false</span> : <span class="literal">true</span> ;<span class="comment">//三目运算</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(y);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="every-和some"><a href="#every-和some" class="headerlink" title="every()和some()"></a>every()和some()</h4><p><code>array.every(callback[,thisArg])</code>,<code>array.some(callback[,thisArg])</code></p><p>callback 用来测试数组的每个元素的函数。调用时使用参数 (element, index, array)。<br>thisArg 可选。执行 callback 时的用于 this 的值。</p><p>不同点:     </p><ul><li><code>array.every()</code>只有所有元素都通过函数测试，才会返回true,否则返回false.</li><li><code>array.some()</code>只要其中一个元素通过了函数测试,就会返回true,全部不通过才会返回false.</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>every some<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> a = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>];</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a.every(<span class="function"><span class="keyword">function</span>(<span class="params">element,index,array</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> element%<span class="number">2</span>===<span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">      &#125;));<span class="comment">//true</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> b = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">13</span>];</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(b.every(<span class="function"><span class="keyword">function</span>(<span class="params">element,index,array</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> element%<span class="number">2</span>===<span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">      &#125;));<span class="comment">//false</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> a = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>];</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a.some(<span class="function"><span class="keyword">function</span>(<span class="params">element,index,array</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> element%<span class="number">2</span>===<span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">      &#125;));<span class="comment">//true</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>];</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a.some(<span class="function"><span class="keyword">function</span>(<span class="params">element,index,array</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> element%<span class="number">2</span>===<span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">      &#125;));<span class="comment">//false</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p><code>arr.reduce(callback,[initialValue])</code><br>callback  执行数组中每个值的函数，包含四个参数:</p><ul><li>previousValue   上一次调用回调返回的值，或者是提供的初始值（initialValue）        </li><li>currentValue   数组中当前被处理的元素          </li><li>index   当前元素在数组中的索引         </li><li>array   调用 reduce 的数组</li></ul><p>initialValue  作为第一次调用 callback 的第一个参数。<br>返回一个值。  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>reduce<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> b = a.reduce(<span class="function"><span class="keyword">function</span><span class="params">(initvalue,element,index,array)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> initvalue + element;<span class="comment">//在不提供初始值的情况下,initvalue从数组的第一个值开始.</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//本次的返回值会赋给initvalue</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(b);<span class="comment">//55</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//当然你也可以设置初始值,如下:</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> c = a.reduce(<span class="function"><span class="keyword">function</span><span class="params">(initvalue,element,index,array)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> initvalue * element;</span></span><br><span class="line"><span class="actionscript">      &#125;,<span class="number">1</span>)<span class="comment">//在这里设置初始值</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(c);<span class="comment">//3628800</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JAVAScript"><a href="#JAVAScript" class="headerlink" title="JAVAScript"></a>JAVAScript</h2><p>JAVAScript与HTML之间的的交互是通过事件实现的.事件就是文档或浏览器窗口中发生的一些特定的交互瞬间.可以使用侦听器(或处理程序)来预定事件,以便事件发生时执行相应的代码.<br>JAVAScript事件的三要素:事件源, 事件, 事件处理程序三部分组成.</p><ul><li>事件源,指的是发生事件的对象</li><li>事件,指的是做了什么动作</li><li>事件处理程序,发生事件时要做的事</li></ul><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>如果你单击了某个按钮,他们会认为不仅仅发生在按钮上.换句话说,在单击按钮的同时,你也单击了按钮的容器元素,甚至你也单击了整个页面.事件流描述的是从页面中接受时间的顺序.有意思的是ie和netspace开发团队提出了差不多是完全相反的事件流的概念.ie的事件流是事件冒泡流,而netspace是事件捕获流.</p><p><img src="http://oujvmc3la.bkt.clouddn.com/dom.png" alt></p><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><p>ie的事件流叫做事件冒泡(event bubbling),即时间开始时由最具体的元素(文档中嵌套层次最深的那个节点)接受,然后逐级向上传播到较为不具体的节点(文档).</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Event Bubbling Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你单击了页面中的<code>&lt;div&gt;</code>元素,那么这个click事件会按照如下顺序传播:</p><ol><li><code>&lt;div&gt;</code></li><li><code>&lt;body&gt;</code></li><li><code>&lt;html&gt;</code></li><li><code>document</code></li></ol><p>也就是说,click事件首先是在<code>&lt;div&gt;</code>元素上发生,而这个元素就是我们单击的元素.然后,click事件沿DOM树向上传播,在每一级节点上都会发生,直至传播到<code>document</code>对象.</p><h4 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h4><p>事件捕获的思想是不太具体的节点应该更早的接收到事件,而更具体的节点应该最后接收到事件.<br>如果仍以前面的HTML页面作为演示事件捕获的例子,那么单击<code>&lt;div&gt;</code>元素就会以下列顺序触发click事件.</p><ol><li><code>document</code></li><li><code>&lt;html&gt;</code></li><li><code>&lt;body&gt;</code></li><li><code>&lt;div&gt;</code></li></ol><p>在事件捕获过程中,document对象首先接收到click事件,然后事件沿DOM树依次向下,一直传播到时间的实际位置,即<code>&lt;div&gt;</code>元素.</p><blockquote><p>由于老版本的浏览器不支持,因此很少有人使用事件捕获.不过我们可以放心的使用事件冒泡.</p></blockquote><h4 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h4><p>DOM2级事件”规定的事件流包括三个阶段:事件捕获阶段、处于目标阶段和事件冒泡阶段。首<br>先发生的是事件捕获,为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶<br>段,可以在这个阶段对事件做出响应。</p><h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><p>事件就是用户或浏览器自身执行的某种动作。诸如 click 、 load 和 mouseover ,都是事件的名字。而响应某个事件的函数就叫做事件处理程序(或事件侦听器)。事件处理程序的名字以 “on” 开头,因此click 事件的事件处理程序就是 onclick , load 事件的事件处理程序就是 onload 。为事件指定处理程序的方式有好几种。</p><h4 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h4><p>某个元素支持的每种事件,都可以使用一个与相应事件处理程序同名的 HTML 特性来指定。这个<br>特性的值应该是能够执行的 JavaScript 代码。例如,要在按钮被单击时执行一些 JavaScript,可以像下面<br>这样编写代码:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"button"</span> <span class="attribute">value</span>=<span class="string">"Click Me"</span> <span class="attribute">onclick</span>=<span class="string">"alert('Clicked')"</span> /&gt;</span><br></pre></td></tr></table></figure><p>当单击这个按钮时,就会显示一个警告框。这个操作是通过指定 onclick 特性并将一些 JavaScript<br>代码作为它的值来定义的。</p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>原生事件event<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        background: blue;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">clickDiv</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      alert(<span class="string">"我被点了。。。"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- html中添加事件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"alert('我被点了。。。')"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">onclick</span>=<span class="string">"clickDiv()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DOM0级事件处理程序"><a href="#DOM0级事件处理程序" class="headerlink" title="DOM0级事件处理程序"></a>DOM0级事件处理程序</h4><p>通过 JavaScript 指定事件处理程序的传统方式,就是将一个函数赋值给一个事件处理程序属性。这种为事件处理程序赋值的方法是在第四代 Web 浏览器中出现的,而且至今仍然为所有现代浏览器所支持。原因一是简单,二是具有跨浏览器的优势。要使用 JavaScript 指定事件处理程序,首先必须取得一个要操作的对象的引用。</p><p>每个元素(包括 window 和 document )都有自己的事件处理程序属性,这些属性通常全部小写,<br>例如 onclick 。将这种属性的值设置为一个函数,就可以指定事件处理程序,如下所示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"Clicked"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也可以删除通过 DOM0 级方法指定的事件处理程序,只要像下面这样将事件处理程序属性的值设<br>置为 null 即可:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="literal">null</span>;<span class="comment">//删除事件处理程序</span></span><br></pre></td></tr></table></figure><p>将事件处理程序设置为 null 之后,再单击按钮将不会有任何动作发生。</p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event事件注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//通过document.getElementById方法得到DOM对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//使用DOM0级的方式注册一个事件处理程序</span></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    缺点：</span></span><br><span class="line"><span class="undefined">    1. 同一个事件，只能注册一个事件处理程序！！！！</span></span><br><span class="line"><span class="undefined">    2. 移除一个事件程序，不方便</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="actionscript">    btn1.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c按钮1被点击了xxxxx"</span>, <span class="string">"color: red;font-size:50px"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 移除一个事件处理程序</span></span></span><br><span class="line"><span class="actionscript">      btn1.onclick = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    btn2.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c按钮2被单击了"</span>, <span class="string">"color: red;font-size:50px"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    btn2.ondblclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c按钮2被双击了"</span>, <span class="string">"color: green;font-size:50px"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DOM2级事件处理程序"><a href="#DOM2级事件处理程序" class="headerlink" title="DOM2级事件处理程序"></a>DOM2级事件处理程序</h4><p>“DOM2 级事件”定义了两个方法,用于处理指定和删除事件处理程序的操作: <code>addEventListener()</code><br>和 <code>removeEventListener()</code> 。所有 DOM 节点中都包含这两个方法,并且它们都接受 3 个参数:要处<br>理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是 true ,表示在捕获<br>阶段调用事件处理程序;如果是 false ,表示在冒泡阶段调用事件处理程序。<br>要在按钮上为 click 事件添加事件处理程序,可以使用下列代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.id);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>上面的代码为一个按钮添加了 onclick 事件处理程序,而且该事件会在冒泡阶段被触发(因为最<br>后一个参数是 false )。与 DOM0 级方法一样,这里添加的事件处理程序也是在其依附的元素的作用域<br>中运行。使用 DOM2 级方法添加事件处理程序的主要好处是可以添加多个事件处理程序。来看下面的<br>例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.id);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这里不推荐使用匿名函数来添加事件,会导致<code>removeEventListener()</code>,因为传入<code>removeEnventListener()</code>的事件处理函数必须和<code>addEnventListener()</code>一致.所以应该如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM2级event<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">handler1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c 单击111"</span>, <span class="string">"color:red;font-size:40px"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">handler2</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c 单击222"</span>, <span class="string">"color:red;font-size:40px"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 移除click事件的第一个事件处理程序</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 要想移除处理函数，那么该函数必须有名字(在指定的作用域中可访问到)</span></span></span><br><span class="line"><span class="actionscript">      btn.removeEventListener(<span class="string">'click'</span>, handler1, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">      btn.removeEventListener(<span class="string">'click'</span>, handler2, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    btn.addEventListener(<span class="string">'click'</span>, handler1, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">    btn.addEventListener(<span class="string">'click'</span>, handler2, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>DOM2级的事件执行顺序和注册顺序相同.</p></blockquote><h4 id="ie的事件处理程序"><a href="#ie的事件处理程序" class="headerlink" title="ie的事件处理程序"></a>ie的事件处理程序</h4><p>IE 实现了与 DOM 中类似的两个方法: <code>attachEvent()</code> 和 <code>detachEvent()</code> 。这两个方法接受相同的两个参数:事件处理程序名称与事件处理程序函数。由于 IE8 及更早版本只支持事件冒泡,所以通过<code>attachEvent()</code>添加的事件处理程序都会被添加到冒泡阶段。<br>要使用 <code>attachEvent()</code> 为按钮添加一个事件处理程序,可以使用以下代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"Clicked"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意: <code>attachEvent()</code>中的第一个参数为<code>onclick</code>,而不是DOM二级中的<code>click</code>.<br>还有在同一个元素上注册相同的事件,其执行顺序和注册顺序相反,这也是和DOM2级不同的.<br>DOM0级被认为是元素的方法,所以其this引用当前的元素;  IE事件处理程序的this等于window.</p></blockquote><p>使用 <code>attachEvent()</code> 添加的事件可以通过 <code>detachEvent()</code> 来移除,条件是必须提供相同的参数。<br>与 DOM 方法一样,这也意味着添加的匿名函数将不能被移除。不过,只要能够将对相同函数的引用传<br>给 <code>detachEvent()</code> ,就可以移除相应的事件处理程序。例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"Clicked"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, handler);</span><br><span class="line"><span class="comment">//这里省略了其他代码</span></span><br><span class="line">btn.detachEvent(<span class="string">"onclick"</span>, handler);</span><br></pre></td></tr></table></figure><p>这个例子将保存在变量 handler 中的函数作为事件处理程序。因此,后面的 <code>detachEvent()</code> 可以<br>使用相同的函数来移除事件处理程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM2级event<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">handler1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c 单击111"</span>, <span class="string">"color:red;font-size:40px"</span>);</span></span><br><span class="line"><span class="actionscript">      btn.detachEvent(<span class="string">'onclick'</span>, handler2);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">handler2</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c 单击222"</span>, <span class="string">"color:red;font-size:40px"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    ie： DOM2级的事件处理</span></span><br><span class="line"><span class="undefined">    ie: 处理程序的执行顺序是和注册顺序相反的</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="actionscript">    btn.attachEvent(<span class="string">'onclick'</span>, handler1);</span></span><br><span class="line"><span class="actionscript">    btn.attachEvent(<span class="string">'onclick'</span>, handler2);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"doucment被触发。。。。"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="跨浏览器的事件处理程序"><a href="#跨浏览器的事件处理程序" class="headerlink" title="跨浏览器的事件处理程序"></a>跨浏览器的事件处理程序</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">        功能：兼容浏览器的事件注册函数</span></span><br><span class="line"><span class="undefined">        @elem, 指定要注册的DOM对象</span></span><br><span class="line"><span class="undefined">        @type, 指定要注册的事件名称</span></span><br><span class="line"><span class="undefined">        @handler, 指定的事件处理函数</span></span><br><span class="line"><span class="undefined">        */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">addEvent</span><span class="params">(elem, type, handler)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//判断是否支持该方法，支持就为true，不支持就为false</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (elem.addEventListener) &#123;</span></span><br><span class="line"><span class="actionscript">        elem.addEventListener(type, handler, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem.attachEvent) &#123;</span></span><br><span class="line"><span class="actionscript">        elem.attachEvent(<span class="string">'on'</span> + type, handler);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        elem[<span class="string">'on'</span> + type] = handler;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> deal = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"btn 点击。。。。。"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    addEvent(btn, <span class="string">'click'</span>, deal);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    addEvent(btn, <span class="string">'dblclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"btn 双击。。。。。"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 编写 removeEvent来移除事件！！！！！</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span><span class="params">(elem, type, handler)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (elem.removeEventListener) &#123;</span></span><br><span class="line"><span class="actionscript">        elem.removeEventListener(type, handler, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem.detachEvent) &#123;</span></span><br><span class="line"><span class="actionscript">        elem.detachEvent(<span class="string">'on'</span> + type, handler);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        elem[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    removeEvent(btn, <span class="string">'click'</span>, deal)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>在触发DOM上的某个事件时,会产生一个事件对象event,这个对象中包含着所有与事件有关的信息.包括导致事件的元素,事件的类型以及其他与特定事件相关的信息.例如,鼠标操作导致的事件对象中,会包括鼠标的位置,而键盘操作导致的事件对象中,会包含与按下键的信息.所有浏览器都支持event对象,但支持方式不同.</p><h4 id="DOM中的事件对象"><a href="#DOM中的事件对象" class="headerlink" title="DOM中的事件对象"></a>DOM中的事件对象</h4><p>兼容DOM的浏览器都会将一个event对象传入到事件处理程序中.无论指定事件处理程序使用的是什么方法(DOM0级或DOM2级),都会传入event对象.来看下面的例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">alert(event.type);<span class="comment">//"click"</span></span><br><span class="line">&#125;;</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">alert(event.type);<span class="comment">//"click"</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这个例子的两个事件处理程序都会弹出一个警告框,显示由event.type属性表示的事件类型.这个属性始终都会包含被触发的事件类型.</p><p>|——|——-|<br>|属性|说明|<br>|event.type|被触发的事件类型|<br>|this|注册该事件处理程序的元素|<br>|event.currentTarget|注册该事件处理函数的元素|<br>|event.target|触发该事件源头的元素|<br>|event.stopPropagation()|阻止事件的传递|<br>|event.preventDefault()|阻止默认行为|<br>|event.stopImmediatePropagation()|停止冒泡,并且停止后续所有的事件处理程序|</p><p>键盘事件对象</p><p>|——|——-|<br>|event.key|具体按下哪个键,识别大小写|<br>|event.code|按下的是哪个键,不识别大小写|</p><p>鼠标事件对象</p><p>|———|———|<br>|event.screenX|点击时鼠标处于屏幕的X轴位置|<br>|event.screenY|点击时鼠标处于屏幕的Y轴的位置|<br>|event.clientX|点击时鼠标处于浏览器可视窗口的X轴位置|<br>|event.clientY|点击时鼠标处于浏览器可视窗口的Y轴位置|<br>|event.pageX|点击时鼠标处于页面的X轴位置|<br>|event.pageY|点击时鼠标处于页面的Y轴位置|<br>|event.which|鼠标点击的是哪个键,左(1),中(2),右(3)|<br>|event.button|鼠标点击的是哪个键,左(0),中(1),右(2)|</p><p>手机触摸</p><p>|——–|——-|——-|<br>|事件|touchstart|手指放上去|<br>|事件|touchmove|手指移动|<br>|事件|touchend|手指离开|</p><p>手机触摸实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>touch<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> startX,startY,endX,endY,X,Y;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">window</span>.startX = event.touches[<span class="number">0</span>].clientX;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">window</span>.startY = event.touches[<span class="number">0</span>].clientY;</span></span><br><span class="line"><span class="actionscript">      &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">window</span>.endX = event.changedTouches[<span class="number">0</span>].clientX;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">window</span>.endY = event.changedTouches[<span class="number">0</span>].clientY;</span></span><br><span class="line"><span class="undefined">         X = startX - endX;</span></span><br><span class="line"><span class="undefined">         Y = startY - endY;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(X);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(Y);</span></span><br><span class="line"><span class="javascript">         <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(X)&gt;<span class="built_in">Math</span>.abs(Y))&#123;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">if</span>(X&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">             alert(<span class="string">'向左滑动'</span>);</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">if</span>(X&lt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">             alert(<span class="string">'向右滑动'</span>);</span></span><br><span class="line"><span class="undefined">           &#125;;</span></span><br><span class="line"><span class="undefined">         &#125;;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(X)&lt;=<span class="built_in">Math</span>.abs(Y))&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(Y&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">              alert(<span class="string">'向上滑动'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(Y&lt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">              alert(<span class="string">'向下滑动'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ie中的事件对象"><a href="#ie中的事件对象" class="headerlink" title="ie中的事件对象"></a>ie中的事件对象</h4><p>与访问DOM中的event对象不同,要访问IE中的event对象有几种不同的方式,取决于指定事件处理程序的方法.在使用DOM0级方法添加事件处理程序时,event对象作为window对象的一个属性存在.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">window</span>.event;</span><br><span class="line">alert(event.type);</span><br><span class="line"><span class="comment">//"click"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在此,我们通过window.event取得了event对象,并检测了被触发事件的类型(IE中的type属性与DOM中的type属性是相同的).可是,如果事件处理程序是使用<code>attachEvent()</code>添加的,那么就会有一个event对象作为参数被传入事件处理程序函数中,如下所示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">alert(event.type);</span><br><span class="line"><span class="comment">//"click"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在像这样使用<code>attachEvent()</code>的情况下,也可以通过window对象来访问event对象,就像使用DOM0级方法一样.不过为方便起见,同一个对象也会作为参数传递.</p><p>IE的event对象同样也包含与创建它的事件相关的属性和方法.其中很多属性和方法都有对应的或者相关的DOM属性和方法.与DOM的event对象一样,这些属性和方法也会因为事件类型不同而不同,但所有事件对象都会包含下表所类的属性和方法.</p><p>|———|———|<br>|cancelBubble|默认值为 false ,但将其设置为 true 就可以取消事件冒泡(与DOM中的 stopPropagation() 方法的作用相同)|<br>|returnValue|默认值为 true ,但将其设置为 false 就可以取消事件的默认行为(与DOM中的 preventDefault() 方法的作用相同)|<br>|srcElement|事件的目标(与DOM中的 target 属性相同)|<br>|type|被触发的事件的类型|</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ie中的event对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">id</span>=<span class="string">"ln"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ln = <span class="built_in">document</span>.getElementById(<span class="string">"ln"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//ie低版本中处理函数中，没有event对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//所以只能有window.event来代替</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// console.log(window.event);</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//ie 低版本中 window.event对象上，没有target,currentTarget</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//使用srcElement取代target</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//停止事件冒泡！！！！</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//cancelBubble 取代 stopPropagation()</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//document 在低版本ie onclick不行</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"document....."</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// window.event.srcElement是触发事件的源头</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">window</span>.event.srcElement);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    ln.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// window.event.returnValue 的值来决定是否取消默认行为，</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 和 event.preventDefault() 功能一致</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是:<code>this</code>和<code>event.srcElement</code>在DOM0级中是相同的,但是用<code>attachEvent()</code>添加的事件处理程序,<code>this</code>和<code>event.srcElement</code>是不同的.</p></blockquote><h4 id="兼容浏览器的事件对象-基本"><a href="#兼容浏览器的事件对象-基本" class="headerlink" title="兼容浏览器的事件对象(基本)"></a>兼容浏览器的事件对象(基本)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>兼容浏览器的事件对象(基本)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 使用或运算或者条件判断来 实现event的兼容</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(event.target || event.srcElement);</span></span><br><span class="line"><span class="actionscript">      event.stopPropagation ? event.stopPropagation() : event.cancelBubblue = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOM对象模型"><a href="#DOM对象模型" class="headerlink" title="DOM对象模型"></a>DOM对象模型</h2><p>DOM为文档提供了结构化表示,并定义了如何通过脚本来访问文档结构.整个文档就是一棵树,树的根是<code>document</code></p><p><img src="http://oujvmc3la.bkt.clouddn.com/dom.jpg" alt></p><h3 id="node节点"><a href="#node节点" class="headerlink" title="node节点"></a>node节点</h3><p>整个文档全都是由节点构成的,包括元素(HTML标签),文字节点,属性节点.<br>每个节点都有一个nodeType属性,用于表明节点的类型.节点类型由在Node类型中定义的下列12个数值常量来表示,任何节点类型必居其一:</p><ul><li>Node.ELEMENT_NODE(1)；标签节点</li><li>Node.ATTRIBUTE_NODE(2)；</li><li>Node.TEXT_NODE(3)；文本节点</li><li>Node.CDATA_SECTION_NODE(4)；</li><li>Node.ENTITY_REFERENCE_NODE(5)；</li><li>Node.ENTITY_NODE(6)；</li><li>Node.PROCESSING_INSTRUCTION_NODE(7)；</li><li>Node.COMMENT_NODE(8)；</li><li>Node.DOCUMENT_NODE(9)；document节点</li><li>Node.DOCUMENT_TYPE_NODE(10)；</li><li>Node.DOCUMENT_FRAGMENT_NODE(11)；</li><li>Node.NOTATION_NODE(12)。</li></ul><blockquote><p>nodeName可以获得节点名称.</p></blockquote><h3 id="获得节点"><a href="#获得节点" class="headerlink" title="获得节点"></a>获得节点</h3><ul><li>document.getElementById(“id”) id 为标记的 #id</li><li>document.getElementsByTagName(“div”) 所有的div div</li><li>document.getElementsByClassName(“test”) 所有类名为 test</li></ul><p>id不能指定一个范围去查找元素,但是剩下的两个可以,如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我是body</span><br><span class="line">    <span class="comment">&lt;!-- DOM操作，节点操作，元素操作  --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>33<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//获得某个ul</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> items = <span class="built_in">document</span>.getElementById(<span class="string">"items"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//getElementsByClassName 可以指定在某个范围内去查找元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(items.getElementsByClassName(<span class="string">"item"</span>));<span class="comment">//5</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 通过 tagName 标签名</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>));<span class="comment">//10</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(items.getElementsByTagName(<span class="string">"li"</span>));<span class="comment">//7</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>无论返回多少个节点,返回的都是伪数组,它是能够通过<code>[0]</code>位置索引,还有<code>length</code>,但是他没有数组的那些方法.</p></blockquote><h3 id="节点访问"><a href="#节点访问" class="headerlink" title="节点访问"></a>节点访问</h3><h4 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h4><p><code>var parent = obj.parentNode;</code></p><h4 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><p><code>nextSibling</code>,<code>nextElementSibling</code>都是下一个兄弟,但是<code>nextSibling</code>会将文本节点识别为兄弟,而<code>nextElementSibling</code>只会将标签识别为兄弟.<br><code>previousSibling</code>,<code>previousElementsibling</code>都是上一个兄弟,这两个和上面的相同.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//兼容写法</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">one</span> = document.getElementById('<span class="keyword">one</span>');</span><br><span class="line"><span class="keyword">var</span> next = <span class="keyword">one</span>.nextElementSibling || <span class="keyword">one</span>.nextSibling;</span><br></pre></td></tr></table></figure><h4 id="第一个节点和最后一个节点"><a href="#第一个节点和最后一个节点" class="headerlink" title="第一个节点和最后一个节点"></a>第一个节点和最后一个节点</h4><p><code>firstChild</code>,<code>lastChild</code>:会识别文本节点</p><p><code>firstElementChild</code>,<code>lastElementChild</code>:只识别标签</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">兼容写法</span><br><span class="line"> <span class="keyword">var</span> par = <span class="built_in">document</span>.getElementById(<span class="string">"par"</span>);</span><br><span class="line"> <span class="keyword">var</span> fist = par.firstElementChild || par.firstChild;</span><br><span class="line"> <span class="keyword">var</span> last = par.lastElementChild || par.lastChild;</span><br></pre></td></tr></table></figure><h4 id="父元素的所有子节点"><a href="#父元素的所有子节点" class="headerlink" title="父元素的所有子节点"></a>父元素的所有子节点</h4><p><code>childNodes</code>: 包含文本节点，比如空格和换行<br><code>children</code>: 仅仅包含标签,不用考虑兼容性，都适用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> par = <span class="built_in">document</span>.getElementById(<span class="string">"par"</span>);</span><br><span class="line"><span class="keyword">var</span> childs = par.children;</span><br><span class="line"><span class="keyword">var</span> childs1 = par.childNodes;</span><br><span class="line"><span class="comment">//其中childs.length 要大于等于childs.length</span></span><br></pre></td></tr></table></figure><h3 id="DOM节点操作"><a href="#DOM节点操作" class="headerlink" title="DOM节点操作"></a>DOM节点操作</h3><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">  <span class="keyword">var</span> test1 = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">  创建div节点和span节点</span><br></pre></td></tr></table></figure><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a.appendChild(<span class="keyword">node</span><span class="title">), 将node</span>节点添加到 a的末尾，并且<span class="keyword">node</span><span class="title">节点是a</span>节点子节点</span><br><span class="line">var a = document.getElementById(<span class="string">"par"</span>);</span><br><span class="line">var <span class="keyword">node</span> <span class="title">= document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">a.appendChild(<span class="keyword">node</span><span class="title">); //a</span>节点末尾添加</span><br><span class="line"></span><br><span class="line">a.insertBefore(newnode, refnode), 将newnode节点插入到a节点的refnode之前。</span><br><span class="line">var a = document.getElementById(<span class="string">"par"</span>);</span><br><span class="line">var <span class="keyword">node</span> <span class="title">= document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">a.insertBefore(<span class="keyword">node</span><span class="title">, a</span>.fistElementChild);// 插入节点</span><br><span class="line">a.insertBefore(<span class="keyword">node</span><span class="title">, null</span>); //类似于appenchild, 插入到末尾</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript声明提升&lt;br&gt;JavaScript数值转换&lt;br&gt;javascript操作符及控制语句&lt;br&gt;javascript函数传参&lt;br&gt;javascript函数操作符&lt;br&gt;javascript数组的应用&lt;br&gt;javascript原生DOM操作&lt;br&gt;ja
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript定时器</title>
    <link href="https://blog.loong.io/2017/09/12/time/"/>
    <id>https://blog.loong.io/2017/09/12/time/</id>
    <published>2017-09-12T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.152Z</updated>
    
    <content type="html"><![CDATA[<p>页面中的很多效果都是动态发生改变的,比如:轮播图,每隔一定的时间都换一张图片显示，这些效果都可以用javascript的定时器实现。</p><h2 id="间隔定时器-setInterval"><a href="#间隔定时器-setInterval" class="headerlink" title="间隔定时器,setInterval()"></a>间隔定时器,setInterval()</h2><p><code>setInterval(callback, delay);</code>//每隔delay毫秒的时间就执行一次callback.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> si = setInterval(<span class="string">"alert('helloworld')"</span>, <span class="number">1000</span>);<span class="comment">//每隔1s输出helloworld</span></span><br><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.log(<span class="string">"helloworld"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">si = setInterval(<span class="function"><span class="keyword">fun</span>, 1000); //传入函数也可以，比较常用</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：setInterval如果调用的程序在间隔的时间内没有完成，那么仍然会再次执行该函数.</p></blockquote><blockquote><p>注意:间隔定时器是异步代码,必须等全部同步代码加载完毕,他才会运行!</p></blockquote><blockquote><p>注意:间隔定时器中的时间,指的是多少毫秒之后去排队,不一定会立即执行.如果代码的运行时间要大于间隔时间,那么在时间队列中就会有很多该任务.</p></blockquote><h2 id="取消间隔定时器-clearInterval"><a href="#取消间隔定时器-clearInterval" class="headerlink" title="取消间隔定时器,clearInterval()"></a>取消间隔定时器,clearInterval()</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.log(<span class="string">"helloworld"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> si = setInterval(<span class="function"><span class="keyword">fun</span>, 1000);</span></span><br><span class="line">clearInterval(si);<span class="comment">//需要用到setInterval返回的id</span></span><br></pre></td></tr></table></figure><h2 id="运用间隔定时器写一个简单的倒计时"><a href="#运用间隔定时器写一个简单的倒计时" class="headerlink" title="运用间隔定时器写一个简单的倒计时"></a>运用间隔定时器写一个简单的倒计时</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>timer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      *&#123;</span></span><br><span class="line"><span class="undefined">        border: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.time</span>&#123;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">width</span><span class="selector-pseudo">:400px</span>;</span></span><br><span class="line"><span class="undefined">          height: 300px;</span></span><br><span class="line"><span class="undefined">          font-size: 20px;</span></span><br><span class="line"><span class="undefined">          margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.time</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="undefined">          text-align: center;</span></span><br><span class="line"><span class="undefined">          color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>倒计时<span class="tag">&lt;<span class="name">span</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span>秒<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> time = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'time'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> timer = time.firstElementChild.firstElementChild;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> count = <span class="number">10</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">        count--;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(count === <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">          time.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">          clearInterval(timecount);<span class="comment">//记得要清理间隔计时器,不然会持续运行,占用大量内存.</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        timer.innerHTML = count;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(count);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> timecount = setInterval(fun, <span class="number">1000</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="超时定时器-setTimeout"><a href="#超时定时器-setTimeout" class="headerlink" title="超时定时器,setTimeout()"></a>超时定时器,setTimeout()</h2><p><code>setTimeout(callback,delay);</code>间隔delay毫秒之后执行函数callback,并且只执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outPut</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(d.getSeconds());</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">1000</span>);<span class="comment">//1s之后再次运行outPut函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取消超时定时器-clearTimeout"><a href="#取消超时定时器-clearTimeout" class="headerlink" title="取消超时定时器,clearTimeout()"></a>取消超时定时器,clearTimeout()</h2><p>与间隔定时器的取消定时器类似.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>timeout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> count = <span class="number">5</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">        count--;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="undefined">          clearTimeout(out);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span>;<span class="comment">//一定要return，不然下面有添加了新的定时器</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'呵呵'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(count);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> out = setTimeout(fun, <span class="number">1000</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      fun()</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="超时定时器写一个倒计时"><a href="#超时定时器写一个倒计时" class="headerlink" title="超时定时器写一个倒计时"></a>超时定时器写一个倒计时</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      *&#123;</span></span><br><span class="line"><span class="undefined">        border: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.time</span>&#123;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">width</span><span class="selector-pseudo">:400px</span>;</span></span><br><span class="line"><span class="undefined">          height: 300px;</span></span><br><span class="line"><span class="undefined">          font-size: 20px;</span></span><br><span class="line"><span class="undefined">          margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.time</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="undefined">          text-align: center;</span></span><br><span class="line"><span class="undefined">          color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>倒计时<span class="tag">&lt;<span class="name">span</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span>秒<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> time = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'time'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> span = time.firstElementChild.firstElementChild;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> count = <span class="number">10</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">        count--;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(count===<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="undefined">          clearTimeout(timeout);</span></span><br><span class="line"><span class="actionscript">          time.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span>;<span class="comment">//这里和间隔计时器不同,这里必须return,不然下面又会创建一个新的超时计时器.</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        span.innerHTML = count;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> timeout = setTimeout(fun, <span class="number">1000</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      fun();</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;页面中的很多效果都是动态发生改变的,比如:轮播图,每隔一定的时间都换一张图片显示，这些效果都可以用javascript的定时器实现。&lt;/p&gt;
&lt;h2 id=&quot;间隔定时器-setInterval&quot;&gt;&lt;a href=&quot;#间隔定时器-setInterval&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器兼容问题</title>
    <link href="https://blog.loong.io/2017/09/10/fx/"/>
    <id>https://blog.loong.io/2017/09/10/fx/</id>
    <published>2017-09-10T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.143Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器兼容性问题又被称为网页兼容性或网站兼容性问题，指网页在各种浏览器上的显示效果可能不一致而产生浏览器和网页间的兼容问题。在网站的设计和制作中，做好浏览器兼容，才能够让网站在不同的浏览器下都正常显示。而对于浏览器软件的开发和设计，浏览器对标准的更好兼容能够给用户更好的使用体验。</p><h2 id="浏览器兼容问题一：不同浏览器的标签默认的margin和padding不同"><a href="#浏览器兼容问题一：不同浏览器的标签默认的margin和padding不同" class="headerlink" title="浏览器兼容问题一：不同浏览器的标签默认的margin和padding不同"></a>浏览器兼容问题一：不同浏览器的标签默认的margin和padding不同</h2><p>问题症状：随便写几个标签，不加样式控制的情况下，各自的margin 和padding差异较大。</p><p>碰到频率:100%</p><p>解决方案：</p><p>可以使用Normalize来清除默认样式，具体可参考文章：来，让我们谈一谈 Normalize.css</p><p>也可以使用如下代码：</p><p>body,h1,h2,h3,ul,li,input,div,span,a,form …… { margin:0; padding:0; }</p><h2 id="浏览器兼容问题二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大"><a href="#浏览器兼容问题二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大" class="headerlink" title="浏览器兼容问题二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大"></a>浏览器兼容问题二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大</h2><p>问题症状:常见症状是IE6中后面的一块被顶到下一行</p><p>碰到频率：90%（稍微复杂点的页面都会碰到，float布局最常见的浏览器兼容问题）</p><p>解决方案：在float的标签样式控制中加入 display:inline;将其转化为行内属性</p><p>备注：我们最常用的就是div+CSS布局了，而div就是一个典型的块属性标签，横向布局的时候我们通常都是用div float实现的，横向的间距设置如果用margin实现，这就是一个必然会碰到的兼容性问题。</p><h2 id="浏览器兼容问题三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度"><a href="#浏览器兼容问题三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度" class="headerlink" title="浏览器兼容问题三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度"></a>浏览器兼容问题三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度</h2><p>问题症状：IE6、7和遨游里这个标签的高度不受控制，超出自己设置的高度</p><p>碰到频率：60%</p><p>解决方案：给超出高度的标签设置overflow:hidden;或者设置行高line-height 小于你设置的高度。</p><p>备注：这种情况一般出现在我们设置小圆角背景的标签里。出现这个问题的原因是IE8之前的浏览器都会给标签一个最小默认的行高的高度。即使你的标签是空的，这个标签的高度还是会达到默认的行高。</p><h2 id="浏览器兼容问题四：行内属性标签，设置display-block后采用float布局，又有横行的margin的情况，IE6间距bug"><a href="#浏览器兼容问题四：行内属性标签，设置display-block后采用float布局，又有横行的margin的情况，IE6间距bug" class="headerlink" title="浏览器兼容问题四：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug"></a>浏览器兼容问题四：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug</h2><p>问题症状：IE6里的间距比超过设置的间距</p><p>碰到几率：20%</p><p>解决方案：在display:block;后面加入display:inline;display:table;</p><p>备注：行内属性标签，为了设置宽高，我们需要设置display:block;(除了input/img标签比较特殊)。在用float布局并有横向的margin后，在IE6下，他就具有了块属性float后的横向margin的bug。不过因为它本身就是行内属性标签，所以我们再加上display:inline的话，它的高宽就不可设了。这时候我们还需要在display:inline后面加入display:talbe。</p><h2 id="浏览器兼容问题五：图片默认有间距"><a href="#浏览器兼容问题五：图片默认有间距" class="headerlink" title="浏览器兼容问题五：图片默认有间距"></a>浏览器兼容问题五：图片默认有间距</h2><p>问题症状：几个img标签放在一起的时候，有些浏览器会有默认的间距，通配符清除间距也不起作用。</p><p>碰到几率：20%</p><p>解决方案：使用float属性为img布局</p><p>备注：因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道。（也可使用负margin，虽然能解决，但负margin本身就是容易引起浏览器兼容问题的用法，所以尽量不要使用）</p><h2 id="浏览器兼容问题六：标签最低高度设置min-height不兼容"><a href="#浏览器兼容问题六：标签最低高度设置min-height不兼容" class="headerlink" title="浏览器兼容问题六：标签最低高度设置min-height不兼容"></a>浏览器兼容问题六：标签最低高度设置min-height不兼容</h2><p>问题症状：因为min-height本身就是一个不兼容的CSS属性，所以设置min-height时不能很好的被各个浏览器兼容</p><p>碰到几率：5%</p><p>解决方案：如果我们要设置一个标签的最小高度200px，需要进行的设置为：{min-height:200px; height:auto !important; height:200px; overflow:visible;}</p><p>备注：在B/S系统前端开发时，有很多情况下我们有这种需求。当内容小于一个值（如300px）时。容器的高度为300px；当内容高度大于这个值时，容器高度被撑高，而不是出现滚动条。这时候我们就会面临这个兼容性问题。</p><h2 id="浏览器兼容问题七：各种特殊样式的兼容，比如透明度、圆角、阴影等。特殊样式每个浏览器的代码区别很大，所以，只能现查资料通过给不同浏览器写不同的代码来解决。"><a href="#浏览器兼容问题七：各种特殊样式的兼容，比如透明度、圆角、阴影等。特殊样式每个浏览器的代码区别很大，所以，只能现查资料通过给不同浏览器写不同的代码来解决。" class="headerlink" title="浏览器兼容问题七：各种特殊样式的兼容，比如透明度、圆角、阴影等。特殊样式每个浏览器的代码区别很大，所以，只能现查资料通过给不同浏览器写不同的代码来解决。"></a>浏览器兼容问题七：各种特殊样式的兼容，比如透明度、圆角、阴影等。特殊样式每个浏览器的代码区别很大，所以，只能现查资料通过给不同浏览器写不同的代码来解决。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浏览器兼容性问题又被称为网页兼容性或网站兼容性问题，指网页在各种浏览器上的显示效果可能不一致而产生浏览器和网页间的兼容问题。在网站的设计和制作中，做好浏览器兼容，才能够让网站在不同的浏览器下都正常显示。而对于浏览器软件的开发和设计，浏览器对标准的更好兼容能够给用户更好的使用
      
    
    </summary>
    
      <category term="HTML" scheme="https://blog.loong.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://blog.loong.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>引入多个不同版本的jQuery</title>
    <link href="https://blog.loong.io/2017/09/10/conflict/"/>
    <id>https://blog.loong.io/2017/09/10/conflict/</id>
    <published>2017-09-10T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.142Z</updated>
    
    <content type="html"><![CDATA[<p>在同一个页面使用多个不同版本的jQuery,让他们并存并不冲突<br>jQuery自诞生以来,版本越来越多,而且jQuery官网的新版本还在不断的更新和发布中,现在已经达到了1.6.4版本,但是我们在以前的项目中已经使用了旧版本的jQuery,不能轻易更改.由于项目的需要,必然也需要不断使用较新版本的jQuery.</p><h2 id="简单粗暴的方式"><a href="#简单粗暴的方式" class="headerlink" title="简单粗暴的方式"></a>简单粗暴的方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jquery两个版本冲突问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery-2.2.2.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--按照顺序编写代码  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//2.2.2</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($.fn.jquery);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(jQuery.fn.jquery);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery-3.0.0.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//3.0.0</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//$.fn.jquery输出当前版本号</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($.fn.jquery);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(jQuery.fn.jquery);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于引入两个不同版本的jQuery会导致后面的把前面的覆盖掉,我们完全可以在没覆盖之前先把该做的事情做完再进行覆盖.</p><h2 id="利用noConflict"><a href="#利用noConflict" class="headerlink" title="利用noConflict"></a>利用<code>noConflict</code></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jquery两个版本冲突问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery-2.2.2.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery-3.0.0.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//3.0.0</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//$.fn.jquery输出当前版本号</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($.fn.jquery);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(jQuery.fn.jquery);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"noConflict 之前 "</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//使用 $.noConflict();</span></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="actionscript">    noConflict不写参数(<span class="literal">false</span>)，那么当前的jquery版本只会放弃$符号，不会放弃jQuery符号</span></span><br><span class="line"><span class="actionscript">    noConflict参数为<span class="literal">true</span>，那么当前的jquery版本将 $、jQuery符号都放弃给其他版本</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//返回值为当前jquery的可用符号</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $$ = $.noConflict(<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($.fn.jquery);<span class="comment">//2.2.2</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(jQuery.fn.jquery);<span class="comment">//2.2.2</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($$.fn.jquery);<span class="comment">//3.0.0</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然这种方式也是可以让多个版本的jQuery共存的.如下;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>在同一个页面中加载多个不同的jQuery版本<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 从谷歌服务器加载jQuery最新版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jQuery_New = $.noConflict(<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载jQuery1.6.2版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jQuery_1_6_2 = $.noConflict(<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载jQuery1.5.2版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jQuery_1_5_2 = $.noConflict(<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载jQuery1.4.2版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jQuery_1_4_2 = $.noConflict(<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载jQuery1.3.2版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jQuery_1_3_2 = $.noConflict(<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            alert(jQuery_New.fn.jquery);</span></span><br><span class="line"><span class="undefined">            alert(jQuery_1_6_2.fn.jquery);</span></span><br><span class="line"><span class="undefined">            alert(jQuery_1_5_2.fn.jquery);</span></span><br><span class="line"><span class="undefined">            alert(jQuery_1_4_2.fn.jquery);</span></span><br><span class="line"><span class="undefined">            alert(jQuery_1_3_2.fn.jquery);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            jQuery_New(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;$(<span class="string">'&lt;p&gt;我是最新的'</span>+$.fn.jquery+<span class="string">'版本添加进来的。&lt;/p&gt;'</span>).appendTo(<span class="string">'body'</span>);&#125;);</span></span><br><span class="line"><span class="javascript">            jQuery_1_6_2(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;$(<span class="string">'&lt;p&gt;我是'</span>+$.fn.jquery+<span class="string">'版本添加进来的。&lt;/p&gt;'</span>).appendTo(<span class="string">'body'</span>);&#125;);</span></span><br><span class="line"><span class="javascript">            jQuery_1_5_2(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;$(<span class="string">'&lt;p&gt;我是'</span>+$.fn.jquery+<span class="string">'版本添加进来的。&lt;/p&gt;'</span>).appendTo(<span class="string">'body'</span>);&#125;);</span></span><br><span class="line"><span class="javascript">            jQuery_1_4_2(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;$(<span class="string">'&lt;p&gt;我是'</span>+$.fn.jquery+<span class="string">'版本添加进来的。&lt;/p&gt;'</span>).appendTo(<span class="string">'body'</span>);&#125;);</span></span><br><span class="line"><span class="javascript">            jQuery_1_3_2(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;$(<span class="string">'&lt;p&gt;我是'</span>+$.fn.jquery+<span class="string">'版本添加进来的。&lt;/p&gt;'</span>).appendTo(<span class="string">'body'</span>);&#125;);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        在同一个页面中加载多个不同的jQuery版本</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在同一个页面使用多个不同版本的jQuery,让他们并存并不冲突&lt;br&gt;jQuery自诞生以来,版本越来越多,而且jQuery官网的新版本还在不断的更新和发布中,现在已经达到了1.6.4版本,但是我们在以前的项目中已经使用了旧版本的jQuery,不能轻易更改.由于项目的需要,
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://blog.loong.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>CSS </title>
    <link href="https://blog.loong.io/2017/09/10/hack/"/>
    <id>https://blog.loong.io/2017/09/10/hack/</id>
    <published>2017-09-10T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.144Z</updated>
    
    <content type="html"><![CDATA[<p>这里只列举一些使用比率较高的常用CSS Hack，且不考虑IE6以下的版本。若对其它更多Hack有兴趣，可Google或Baidu。</p><h2 id="条件Hack"><a href="#条件Hack" class="headerlink" title="条件Hack"></a>条件Hack</h2><p>语法:   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if &lt;keywords&gt;? IE &lt;version&gt;?]&gt;</span></span><br><span class="line"><span class="comment">HTML代码块</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>取值:<br><code>&lt;keywords&gt;</code></p><p>if条件共包含6种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本</p><ul><li>是否：指定是否IE或IE某个版本。关键字：空</li><li>大于：选择大于指定版本的IE版本。关键字：gt（greater than）</li><li>大于或等于：选择大于或等于指定版本的IE版本。关键字：gte（greater than or equal）</li><li>小于：选择小于指定版本的IE版本。关键字：lt（less than）</li><li>小于或等于：选择小于或等于指定版本的IE版本。关键字：lte（less than or equal）</li><li>非指定版本：选择除指定版本外的所有IE版本。关键字：!</li></ul><p><code>&lt;version&gt;</code></p><p>目前的常用IE版本为6.0及以上，推荐酌情忽略低版本，把精力花在为使用高级浏览器的用户提供更好的体验上<br>IE10及以上版本已将条件注释特性移除，使用时需注意。</p><p>说明:<br>用于选择IE浏览器及IE的不同版本<br>if条件Hack是HTML级别的（包含但不仅是CSS的Hack，可以选择任何HTML代码块）  </p><p>实例:    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;你在非IE中将看不到我的身影&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> gt IE <span class="number">6</span>]&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.test&#123;<span class="attr">color</span>:red;&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性级Hack"><a href="#属性级Hack" class="headerlink" title="属性级Hack"></a>属性级Hack</h2><p>语法：</p><p><code>selector{&lt;hack&gt;?property:value&lt;hack&gt;?;}</code></p><p>取值：</p><ul><li><code>_</code>：选择IE6及以下。连接线（中划线）（-）亦可使用，为了避免与某些带中划线的属性混淆，所以使用下划线（_)更为合适。</li><li><code>*</code>：选择IE7及以下。诸如：（+）与（#）之类的均可使用，不过业界对（*）的认知度更高</li><li><code>\9</code>：选择IE6+</li><li><code>\0</code>：选择IE8+和Opera15以下的浏览器</li></ul><p>说明：</p><p>选择不同的浏览器及版本<br>尽可能减少对CSS Hack的使用。Hack有风险，使用需谨慎<br>通常如未作特别说明，本文档所有的代码和示例的默认运行环境都为标准模式。  </p><p>实例:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#090</span>\<span class="number">9</span>; <span class="comment">/* For IE8+ */</span></span><br><span class="line">*<span class="attribute">color</span>: <span class="number">#f00</span>;  <span class="comment">/* For IE7 and earlier */</span></span><br><span class="line">_color: <span class="number">#ff0</span>;  <span class="comment">/* For IE6 and earlier */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择符级Hack"><a href="#选择符级Hack" class="headerlink" title="选择符级Hack"></a>选择符级Hack</h2><p>语法:</p><p><code>&lt;hack&gt; selector{ sRules }</code></p><p>说明：<br>选择不同的浏览器及版本<br>尽可能减少对CSS Hack的使用。Hack有风险，使用需谨慎<br>通常如未作特别说明，本文档所有的代码和示例的默认运行环境都为标准模式。<br>一些CSS Hack由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行Hack的。  </p><p>实例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="selector-tag">html</span> <span class="selector-class">.test</span> &#123; <span class="attribute">color</span>: <span class="number">#090</span>; &#125;       <span class="comment">/* For IE6 and earlier */</span></span><br><span class="line">* + <span class="selector-tag">html</span> <span class="selector-class">.test</span> &#123; <span class="attribute">color</span>: <span class="number">#ff0</span>; &#125;     <span class="comment">/* For IE7 */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:lang(zh-cmn-Hans)</span> &#123; <span class="attribute">color</span>: <span class="number">#f00</span>; &#125;  <span class="comment">/* For IE8+ and not IE */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:nth-child(1)</span> &#123; <span class="attribute">color</span>: <span class="number">#0ff</span>; &#125; <span class="comment">/* For IE9+ and not IE */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里只列举一些使用比率较高的常用CSS Hack，且不考虑IE6以下的版本。若对其它更多Hack有兴趣，可Google或Baidu。&lt;/p&gt;
&lt;h2 id=&quot;条件Hack&quot;&gt;&lt;a href=&quot;#条件Hack&quot; class=&quot;headerlink&quot; title=&quot;条件Hack
      
    
    </summary>
    
      <category term="HTML" scheme="https://blog.loong.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://blog.loong.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS3新特性</title>
    <link href="https://blog.loong.io/2017/08/31/css3/"/>
    <id>https://blog.loong.io/2017/08/31/css3/</id>
    <published>2017-08-31T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.137Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3是层叠样式表(Cascading Style Sheets)语言的最新进展,目的在于扩展CSS2.1.它为我们带来了许多期待已久的新特性， 例如圆角，阴影，gradients(渐变)，transitions(过渡) 或 animations(动画) ， 当然还有新的布局如 multi-columns ， flexible box 或 grid layouts。 这些实验性的内容带有 vendor-prefixed(提供商前缀)， 并且尽量不要在生产环境中使用， 即便要用， 也要时刻谨记： 这些内容的语法和语义在未来很有可能会改变。<br>CSS3是CSS2的进化版，新增了许多特性，是为了让web开发更加快捷和高效。</p><h2 id="CSS3选择器"><a href="#CSS3选择器" class="headerlink" title="CSS3选择器"></a>CSS3选择器</h2><ul><li>关系选择器</li></ul><ol><li>包含选择符(E F)</li><li>子选择符(E&gt;F)</li><li>相邻选择符(E+F)</li><li>兄弟选择符(E~F)</li></ol><ul><li>属性选择器</li></ul><ol><li><code>E[att]</code></li><li><code>E[att=“val”]</code></li><li><code>E[att~=“val”]</code></li><li><code>E[att^=“val”]</code></li><li><code>E[att$=“val”]</code></li><li><code>E[att*=“val”]</code></li><li><code>E[att|=“val”]</code></li></ol><ul><li>伪类选择器<br>常用：</li></ul><ol><li><code>E:link</code></li><li><code>E:visited</code></li><li><code>E:hover</code></li><li><code>E:active</code></li><li><code>E:focus</code></li><li><code>E:first-child</code></li><li><code>E:last-child</code></li><li><code>E:nth-child</code></li><li><code>E:empty</code>:没有匹配到任何子元素(包括text节点)的元素E.</li><li><code>E:checked</code>:匹配用户界面上处于选中状态的元素E。(用于input type为radio与checkbox时)</li><li><code>E:target</code> :匹配相关URL指向的E元素。解释：URL后面跟锚点#，指向文档内某个具体的元素。这个被链接的元素就是目标元素(target element)，:target选择器用于选取当前活动的目标元素。</li></ol><ul><li>伪元素</li></ul><ol><li><code>E:first-letter/E::first-letter</code>:设置对象内的第一个字符的样式.此伪对象仅仅作用于块对象.</li><li><code>E:first-line/E::first-line</code>:设置对象内的第一行的样式。此伪对象仅作用于块对象。</li><li><code>E:before/E::before</code></li><li><code>E:after/E::after</code></li><li><code>E::placeholder</code>:设置对象文字占位符的样式.::placeholder 伪元素用于控制表单输入框占位符的外观，它允许开发者/设计师改变文字占位符的样式，默认的文字占位符为浅灰色。<br>当表单背景色为类似的颜色时它可能效果并不是很明显，那么就可以使用这个伪元素来改变文字占位符的颜色。</li><li><code>E::selection</code>:设置对象被选择时的样式。需要注意的是，<code>::selection</code>只能定义被选择时的<code>background-color</code>，<code>color</code>及<code>text-shadow</code></li></ol><h2 id="CSS3颜色"><a href="#CSS3颜色" class="headerlink" title="CSS3颜色"></a>CSS3颜色</h2><h3 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h3><p>透明度 opacity<br>使用浮点数指定对象的不透明度。值被约束在[0.0-1.0]范围内，如果超过了这个范围，其计算结果将截取到与之最相近的值。<br>比如：<code>opacity: 0.6</code>;</p><h3 id="RGBA"><a href="#RGBA" class="headerlink" title="RGBA"></a>RGBA</h3><p>Red、Green、Blue、Alpha 即RGBA<br>R、G、B 取值范围0~255 A 为透明度 取值范围[0.0-1.0].<br>比如:<code>background: rgba(255, 0, 0, 0.5);</code></p><blockquote><p><code>opacity</code>会影响后代的透明度,也就是会继承.而<code>rgba</code>则不会,他影响的只有自己.</p></blockquote><h3 id="hsla"><a href="#hsla" class="headerlink" title="hsla"></a>hsla</h3><p>Hue、Saturation、Lightness、Alpha即HSLA<br>H 色调: 取值范围0~360，0/360表示红色、120表示绿色、240表示蓝色<br>S 饱和度: 取值范围0%~100%<br>L 亮度: 取值范围0%~100%<br>A 透明度: 取值范围0~1</p><h2 id="CSS3文本"><a href="#CSS3文本" class="headerlink" title="CSS3文本"></a>CSS3文本</h2><p><code>text-shadow</code>，可分别设置偏移量、模糊度、颜色（可设透明度）。最多4个参数,如下:</p><ol><li>水平偏移量 正值向右 负值向左。</li><li>垂直偏移量 正值向下 负值向上。</li><li>模糊度是不能为负值。</li><li>使用逗号分割可以设置多重效果。</li></ol><p>比如:<br><code>text-shadow: -5px -5px 2px red, 10px 10px 2px green;</code><br>显示如下:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/text.png" alt></p><p><code>text-shadow: -1px -1px 1px #000, 1px 1px 1px #FFF;</code><br><img src="http://oujvmc3la.bkt.clouddn.com/text1.png" alt></p><h2 id="CSS3边框"><a href="#CSS3边框" class="headerlink" title="CSS3边框"></a>CSS3边框</h2><p>边框圆角、边框阴影属性，应用十分广泛，兼容性也相对较好，具有符合渐进增强原则的特征，我们需要重点掌握。</p><h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>border-radius: 设置边框圆角<br>border-radius: 宽度|百分比 / 宽度|百分比<br>可分别设置长、短半径，以“/”进行分隔，遵循“1，2，3，4”规则，“/”前面的1~4个用来设置横轴半径（分别对应横轴1、2、3、4位置 ），“/”后面1~4个参数用来设置纵轴半径（分别对应纵轴1、2、3、4位置 ）<br>设置顺序： 1,2,3,4<br>比如：<br>border-radius: 10px ;<br>border-radius: 10px 11px;<br>border-radius: 10px/11px;</p><p><img src="http://oujvmc3la.bkt.clouddn.com/border.png" alt></p><h3 id="边框阴影"><a href="#边框阴影" class="headerlink" title="边框阴影"></a>边框阴影</h3><p><code>box-shadow</code>:边框阴影  </p><blockquote><p>1、水平偏移量 正值向右负值向左。<br>2、垂直偏移量 正值向下负值向上。<br>3、模糊度是不能为负值。<br>4、inset可以设置内阴影。</p></blockquote><p>设置边框阴影不会改变盒子的大小，即不会影响其兄弟元素的布局。<br>可以设置多重边框阴影，实现更好的效果，增强立体感。<br>比如：<br><code>box-shadow: 2px 2px 8px gray;</code><br>内阴影设置为:<br><code>box-shadow:2px 2px 5px 1px rgba(0,0,0,.6) inset;</code></p><h2 id="CSS3渐变"><a href="#CSS3渐变" class="headerlink" title="CSS3渐变"></a>CSS3渐变</h2><p>CSS 渐变是在CSS3 Image Module 中新增加的类型.使用CSS渐变可以在两种颜色之间制造出平滑的渐变效果,用它代替图片,可以加快页面的载入时间,减小宽带占用.同时,因为渐变是由浏览器直接生成的,他在页面缩放时的效果比图片更好,因此你可以更加灵活,便捷的调整页面布局.</p><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>为了创造一个线性渐变,你需要设置一个起始点和一个方向(指定为一个角度)的渐变效果.你还要定义终止色.终止色就是你想让它去平滑的过渡,并且你必须指定至少两种,当然也会可以指定更多的颜色去创造更复杂的渐变效果.<br><code>background:linear-gradient(180deg, #fff, #333);</code>       </p><ul><li><code>180deg</code>:用角度值指定渐变的方向或者角度.还可以设置:<code>to left</code>:设置渐变从右到左,相当于<code>270deg</code>.<code>to right</code>:设置渐变从左到右,相当于<code>90deg</code>.<code>to top</code>设置渐变从下到上,相当于<code>0deg</code>.<code>to bottom</code>设置渐变从右到左,相当于<code>180deg</code>.默认值为从上到下,等同于留空不写.</li><li><code>#fff</code>: 起始颜色.后面可以加结束位置,百分比和像素值都可以,比如:<code>background:linear-gradient(180deg, #fff 150px, #333);</code>,<code>background:linear-gradient(180deg, #fff 80%, #333);</code>.起始颜色和结束位置以空格隔开.</li><li><code>#333</code>:终止颜色.后面的结束位置不可改变.</li></ul><blockquote><p>注意:起始颜色和终止颜色之间可以添加颜色,属性和起始颜色相同,注意要以英文逗号隔开.例如:<code>background:linear-gradient(180deg, #fff, #666, #333);</code></p></blockquote><p><img src="http://oujvmc3la.bkt.clouddn.com/linear-gradient.png" alt></p><p><img src="http://oujvmc3la.bkt.clouddn.com/linear-gradient1.png" alt></p><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>径向渐变使用<code>radial-gradient</code>函数语法.这个语法和线性渐变很类似,除了你可以指定渐变结束时的形状(可能是一个圆形或者一个椭圆形)以及它的大小.默认来说,结束形状是椭圆形并且和容器的大小比例保持一致.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS3是层叠样式表(Cascading Style Sheets)语言的最新进展,目的在于扩展CSS2.1.它为我们带来了许多期待已久的新特性， 例如圆角，阴影，gradients(渐变)，transitions(过渡) 或 animations(动画) ， 当然还有新的
      
    
    </summary>
    
      <category term="CSS" scheme="https://blog.loong.io/categories/CSS/"/>
    
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://blog.loong.io/tags/CSS/"/>
    
      <category term="CSS3" scheme="https://blog.loong.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>媒体查询</title>
    <link href="https://blog.loong.io/2017/08/31/media/"/>
    <id>https://blog.loong.io/2017/08/31/media/</id>
    <published>2017-08-31T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.140Z</updated>
    
    <content type="html"><![CDATA[<p>媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式，媒体查询由媒体类型和一个或多个检测媒体特性的条件表达式组成。媒体查询中可用于检测的媒体特性有 width 、 height 和 color （等）。使用媒体查询，可以在不改变页面内容的情况下，为特定的一些输出设备定制显示效果。</p><p>常见的媒体查询特性</p><p><img src="http://oujvmc3la.bkt.clouddn.com/media.jpg" alt></p><p>媒体查询的大部分媒体特性都接受min和max用于表达’大于或等于’和’小于或等于’.如:width会有min-width和max-width</p><h2 id="媒体查询应用"><a href="#媒体查询应用" class="headerlink" title="媒体查询应用"></a>媒体查询应用</h2><h3 id="兼容移动设备"><a href="#兼容移动设备" class="headerlink" title="兼容移动设备"></a>兼容移动设备</h3><p>需要在html文档中添加以下代码,用来兼容移动设备的显示效果</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">"viewport"</span> <span class="attribute">content</span>=<span class="string">"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"</span>/&gt;</span><br></pre></td></tr></table></figure><p>参数解释:</p><ul><li><code>viewport</code>:可视区域</li><li><code>width=device-width</code>:宽度等于当前设备的宽度.</li><li><code>initial-scale</code>:初始的缩放比例(默认为1)</li><li><code>maximum-scale</code>:允许用户缩放到的最大比例(默认为1)</li><li><code>user-scalable=no</code>:用户不能手动缩放</li></ul><h3 id="添加媒体查询样式"><a href="#添加媒体查询样式" class="headerlink" title="添加媒体查询样式"></a>添加媒体查询样式</h3><h4 id="检测屏宽"><a href="#检测屏宽" class="headerlink" title="检测屏宽"></a>检测屏宽</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>媒体查询<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    移动设备有关viewport</span></span><br><span class="line"><span class="comment">    visual viewport</span></span><br><span class="line"><span class="comment">    idea viewport</span></span><br><span class="line"><span class="comment">    layout viewport</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="undefined">        font-size: 50px;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="undefined">      根据当前屏幕的特点，当符合其中某个规则时，就会应用对应的样式</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="css">      <span class="comment">/*根据可视窗口 宽度*/</span></span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> screen and (width:<span class="number">1000px</span>)&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="undefined">          color: green;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> screen and (height:<span class="number">400px</span>)&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="undefined">          font-size: 100px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: purple;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="undefined">      当尺寸大于等于 980px， min-width下限</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> all and (min-width: <span class="number">980px</span>)&#123;</span></span><br><span class="line"><span class="css">          <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="undefined">            color: orange;</span></span><br><span class="line"><span class="undefined">            font-size: 100px;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="undefined">      当尺寸小于等于 1200px， max-width上限</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> all and (max-width: <span class="number">1200px</span>)&#123;</span></span><br><span class="line"><span class="css">          <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="undefined">            background: yellow;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.three</span> &#123;</span></span><br><span class="line"><span class="undefined">        font-size: 100px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="undefined">      and是并且</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> all and (min-width: <span class="number">600px</span>) and (max-width:<span class="number">980px</span>)&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.three</span> &#123;</span></span><br><span class="line"><span class="undefined">          color: green;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> all and (min-width: <span class="number">981px</span>) and (max-width:<span class="number">1200px</span>)&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.three</span> &#123;</span></span><br><span class="line"><span class="undefined">          color: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> all and (min-width: <span class="number">1201px</span>) and (max-width:<span class="number">1920px</span>)&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.three</span> &#123;</span></span><br><span class="line"><span class="undefined">          color: blue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">      开始是红色的</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">      two元素</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span></span><br><span class="line">      three元素</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="检测横屏-竖屏"><a href="#检测横屏-竖屏" class="headerlink" title="检测横屏 竖屏"></a>检测横屏 竖屏</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>media<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="undefined">        font-size: 100px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="undefined">        content: "等待检测。。。。";</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="undefined">      检测屏幕</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> screen and (orientation: portrait)&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">content</span><span class="selector-pseudo">:"</span>竖屏。。。";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> screen and (orientation: landscape)&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">content</span><span class="selector-pseudo">:"</span>横屏。。。";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式，媒体查询由媒体类型和一个或多个检测媒体特性的条件表达式组成。媒体查询中可用于检测的媒体特性有 width 、 height 和 color （等）。使用媒体查询，可以在不
      
    
    </summary>
    
      <category term="CSS" scheme="https://blog.loong.io/categories/CSS/"/>
    
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://blog.loong.io/tags/CSS/"/>
    
      <category term="CSS3" scheme="https://blog.loong.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>伸缩盒子(flex)</title>
    <link href="https://blog.loong.io/2017/08/31/fiex/"/>
    <id>https://blog.loong.io/2017/08/31/fiex/</id>
    <published>2017-08-31T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.139Z</updated>
    
    <content type="html"><![CDATA[<p>弹性布局(fiexible box)模块旨在提供一个更加有效的方式来布置,对齐和分布在容器之间的各项内容,即使他们的大小是未知或者动态变化的.<br>弹性布局的主要思想是让容器有能力来改变项目的宽度和高度,以填满可用空间(主要是为了容纳所有类型的显示设备和屏幕尺寸)的能力.<br>最重要的是弹性盒子布局与方向无关,相对于常规的布局(块是垂直和内联为基础的),很显然,这些工作以及网页设计缺乏灵活性,无法支持大型和复杂的应用程序(特别是当他涉及到改变方向,缩放,拉伸和收缩等).</p><p><img src="http://oujvmc3la.bkt.clouddn.com/flex.jpg" alt></p><blockquote><p>要想设置一个弹性盒子,必须在其父元素设置<code>display:flex</code>!!!设置父元素之后,所有子元素会在一行上,但是他们并没有脱离标准流.</p></blockquote><h2 id="flex-伸缩盒子-常用属性"><a href="#flex-伸缩盒子-常用属性" class="headerlink" title="flex(伸缩盒子)常用属性"></a>flex(伸缩盒子)常用属性</h2><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow: "></a>flex-grow: <number></number></h3><ul><li><p>取值:<code>&lt;number&gt;</code>用数值来定义扩展比率.不允许为负值.</p></li><li><p>说明:设置或检索弹性盒子的扩展比率.根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间.</p></li></ul><p>演示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      *&#123;</span></span><br><span class="line"><span class="undefined">        border: 0px;</span></span><br><span class="line"><span class="undefined">        padding: 0px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:1000px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:solid</span> 1<span class="selector-tag">px</span> <span class="selector-tag">red</span>;</span></span><br><span class="line"><span class="undefined">        display: flex;   </span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置伸缩盒子,必须在父元素中设置这个属性,设置以后,子元素会在一行上,但是并没有脱离标准流. */</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span> &gt; <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">        background: lightblue;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">flex-grow</span><span class="selector-pseudo">:1</span>;   </span></span><br><span class="line"><span class="css">        <span class="comment">/* 这是设置扩展比例,当然也是可以每个子元素设置不同的比例. */</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one-1"</span>&gt;</span></span><br><span class="line">        1</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one-2"</span>&gt;</span></span><br><span class="line">        2</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one-3"</span>&gt;</span></span><br><span class="line">        3</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示如下:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/flex2.png" alt></p><p>可以看到子元素占据了全部的空间,这就是<code>flex-grow:1;</code>的功劳.每个子元素的宽是300px,父盒子的宽是1000px,应该还剩下100px,这个参数就是来分配这剩下的100px的归属的,当子元素的这个参数全部设置为1时,所有子元素的这个参数加起来为3,剩下的100px就会被分割成3份,每个子元素分得一份,每个盒子的宽度就是200px+(100px/3).</p><h3 id="flex-shrink："><a href="#flex-shrink：" class="headerlink" title="flex-shrink："></a>flex-shrink：<number></number></h3><ul><li>取值:<number>:用数值来定义收缩比率.不允许负值.   </number></li><li>说明:设置或者检索弹性盒的收缩比率.根据弹性盒子元素所设置收缩因子作为比率来收缩空间.</li></ul><p>演示:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">ul</span> class=<span class="string">"flex"</span>&gt;</span><br><span class="line">    &lt;li&gt;a&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;b&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;c&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">.<span class="attribute">flex</span>&#123;display:flex;<span class="attribute">width</span>:<span class="number">400px</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"><span class="selector-class">.flex</span> li&#123;<span class="attribute">width</span>:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.flex</span> <span class="selector-tag">li</span>:nth-child(<span class="number">3</span>)&#123;<span class="attribute">flex-shrink</span>:<span class="number">3</span>;&#125;</span><br></pre></td></tr></table></figure><p>a,b,c 将按照1:1:3的比率来收缩空间.<code>fiex-shrink</code>的默认值为1,如果没有显示定义该属性,将会自动按照默认值1在所有因子相加之后计算比率来进行空间收缩.本例中c显式的定义了<code>flex-shrink</code>，a,b没有显式定义，但将根据默认值1来计算，可以看到总共将剩余空间分成了5份，其中a占1份，b占1份，c占3分，即1:1:3<br>我们可以看到父容器定义为400px，子项被定义为200px，相加之后即为600px，超出父容器200px。那么这么超出的200px需要被a,b,c消化<br>通过收缩因子，所以加权综合可得200<em>1+200</em>1+200<em>3=1000px；<br>于是我们可以计算a,b,c将被移除的溢出量是多少：<br>a被移除溢出量：(200</em>1/1000)<em>200，即约等于40px<br>b被移除溢出量：(200</em>1/1000)<em>200，即约等于40px<br>c被移除溢出量：(200</em>3/1000)*200，即约等于120px<br>最后a,b,c的实际宽度分别为：200-40=160px, 200-40=160px, 200-120=80px   </p><h3 id="flex-direction-row-row-reverse-column-column-reverse"><a href="#flex-direction-row-row-reverse-column-column-reverse" class="headerlink" title="flex-direction: row | row-reverse | column | column-reverse"></a>flex-direction: row | row-reverse | column | column-reverse</h3><p>取值:</p><ul><li>row：主轴与行内轴方向作为默认的书写模式。即横向从左到右排列（左对齐）。(默认值)</li><li>row-reverse：对齐方式与row相反。</li><li>column：主轴与块轴方向作为默认的书写模式。即纵向从上往下排列（顶对齐）。</li><li>column-reverse：对齐方式与column相反。</li></ul><p>说明: 该属性通过定义flex容器的主轴方向来决定felx子项在flex容器中的位置。这将决定flex需要如何进行排列.主轴方向默认为x轴,即横轴.</p><h3 id="flex-wrap：nowrap-wrap-wrap-reverse"><a href="#flex-wrap：nowrap-wrap-wrap-reverse" class="headerlink" title="flex-wrap：nowrap | wrap | wrap-reverse"></a>flex-wrap：nowrap | wrap | wrap-reverse</h3><p>取值：</p><ul><li>nowrap：flex容器为单行。该情况下flex子项可能会溢出容器</li><li>wrap：flex容器为多行。该情况下flex子项溢出的部分会被放置到新行，子项内部会发生断行</li><li>wrap-reverse：反转 wrap 排列。</li></ul><p>说明: 该属性控制flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。</p><h3 id="align-content：flex-start-flex-end-center-space-between-space-around-stretch"><a href="#align-content：flex-start-flex-end-center-space-between-space-around-stretch" class="headerlink" title="align-content：flex-start | flex-end | center | space-between | space-around | stretch"></a>align-content：flex-start | flex-end | center | space-between | space-around | stretch</h3><p>取值：</p><ul><li>flex-start：各行向弹性盒容器的起始位置堆叠。弹性盒容器中第一行的侧轴起始边界紧靠住该弹性盒容器的侧轴起始边界，之后的每一行都紧靠住前面一行。</li><li>flex-end：各行向弹性盒容器的结束位置堆叠。弹性盒容器中最后一行的侧轴起结束界紧靠住该弹性盒容器的侧轴结束边界，之后的每一行都紧靠住前面一行。</li><li>center：各行向弹性盒容器的中间位置堆叠。各行两两紧靠住同时在弹性盒容器中居中对齐，保持弹性盒容器的侧轴起始内容边界和第一行之间的距离与该容器的侧轴结束内容边界与第最后一行之间的距离相等。（如果剩下的空间是负数，则各行会向两个方向溢出的相等距离。）</li><li>space-between：各行在弹性盒容器中平均分布。如果剩余的空间是负数或弹性盒容器中只有一行，该值等效于’flex-start’。在其它情况下，第一行的侧轴起始边界紧靠住弹性盒容器的侧轴起始内容边界，最后一行的侧轴结束边界紧靠住弹性盒容器的侧轴结束内容边界，剩余的行则按一定方式在弹性盒窗口中排列，以保持两两之间的空间相等。</li><li>space-around：各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。如果剩余的空间是负数或弹性盒容器中只有一行，该值等效于’center’。在其它情况下，各行会按一定方式在弹性盒容器中排列，以保持两两之间的空间相等，同时第一行前面及最后一行后面的空间是其他空间的一半。</li><li>stretch：各行将会伸展以占用剩余的空间。如果剩余的空间是负数，该值等效于’flex-start’。在其它情况下，剩余空间被所有行平分，以扩大它们的侧轴尺寸。</li></ul><p>说明: 当伸缩容器的侧轴还有多余空间时，本属性可以用来调准「伸缩行」在伸缩容器里的对齐方式，这与调准伸缩项目在主轴上对齐方式的 &lt;’ justify-content ‘&gt; 属性类似。请注意本属性在只有一行的伸缩容器上没有效果。</p><h3 id="align-items：flex-start-flex-end-center-baseline-stretch"><a href="#align-items：flex-start-flex-end-center-baseline-stretch" class="headerlink" title="align-items：flex-start | flex-end | center | baseline | stretch"></a>align-items：flex-start | flex-end | center | baseline | stretch</h3><p>取值：</p><ul><li>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</li><li>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</li><li>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</li><li>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</li><li>stretch：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</li></ul><p>说明: 定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。</p><h3 id="align-self：auto-flex-start-flex-end-center-baseline-stretch"><a href="#align-self：auto-flex-start-flex-end-center-baseline-stretch" class="headerlink" title="align-self：auto | flex-start | flex-end | center | baseline | stretch"></a>align-self：auto | flex-start | flex-end | center | baseline | stretch</h3><p>取值：</p><ul><li>auto：如果’align-self’的值为’auto’，则其计算值为元素的父元素的’align-items’值，如果其没有父元素，则计算值为’stretch’。</li><li>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</li><li>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</li><li>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</li><li>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</li><li>stretch：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</li></ul><p>说明: 定义flex子项单独在侧轴（纵轴）方向上的对齐方式。</p><h3 id="justify-content：flex-start-flex-end-center-space-between-space-around"><a href="#justify-content：flex-start-flex-end-center-space-between-space-around" class="headerlink" title="justify-content：flex-start | flex-end | center | space-between | space-around"></a>justify-content：flex-start | flex-end | center | space-between | space-around</h3><p>取值：</p><ul><li>flex-start：弹性盒子元素将向行起始位置对齐。该行的第一个子元素的主起始位置的边界将与该行的主起始位置的边界对齐，同时所有后续的伸缩盒项目与其前一个项目对齐。</li><li>flex-end：弹性盒子元素将向行结束位置对齐。该行的第一个子元素的主结束位置的边界将与该行的主结束位置的边界对齐，同时所有后续的伸缩盒项目与其前一个项目对齐。</li><li>center：弹性盒子元素将向行中间位置对齐。该行的子元素将相互对齐并在行中居中对齐，同时第一个元素与行的主起始位置的边距等同与最后一个元素与行的主结束位置的边距（如果剩余空间是负数，则保持两端相等长度的溢出）。</li><li>space-between：弹性盒子元素会平均地分布在行里。如果最左边的剩余空间是负数，或该行只有一个子元素，则该值等效于’flex-start’。在其它情况下，第一个元素的边界与行的主起始位置的边界对齐，同时最后一个元素的边界与行的主结束位置的边距对齐，而剩余的伸缩盒项目则平均分布，并确保两两之间的空白空间相等。</li><li>space-around：弹性盒子元素会平均地分布在行里，两端保留子元素与子元素之间间距大小的一半。如果最左边的剩余空间是负数，或该行只有一个伸缩盒项目，则该值等效于’center’。在其它情况下，伸缩盒项目则平均分布，并确保两两之间的空白空间相等，同时第一个元素前的空间以及最后一个元素后的空间为其他空白空间的一半。</li></ul><p>说明:设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式。<br>当弹性盒里一行上的所有子元素都不能伸缩或已经达到其最大值时，这一属性可协助对多余的空间进行分配。当元素溢出某行时，这一属性同样会在对齐上进行控制。</p><h3 id="order："><a href="#order：" class="headerlink" title="order："></a>order：<integer></integer></h3><p>取值：</p><ul><li><code>&lt;integer&gt;</code>：用整数值来定义排列顺序，数值小的排在前面。可以为负值。</li></ul><p>说明：设置或检索弹性盒模型对象的子元素出現的順序。order定义将会影响 &lt;’ position ‘&gt; 值为static元素的层叠级别，数值小的会被数值大的盖住。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;弹性布局(fiexible box)模块旨在提供一个更加有效的方式来布置,对齐和分布在容器之间的各项内容,即使他们的大小是未知或者动态变化的.&lt;br&gt;弹性布局的主要思想是让容器有能力来改变项目的宽度和高度,以填满可用空间(主要是为了容纳所有类型的显示设备和屏幕尺寸)的能力.
      
    
    </summary>
    
      <category term="CSS" scheme="https://blog.loong.io/categories/CSS/"/>
    
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://blog.loong.io/tags/CSS/"/>
    
      <category term="CSS3" scheme="https://blog.loong.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://blog.loong.io/2017/08/29/ajax/"/>
    <id>https://blog.loong.io/2017/08/29/ajax/</id>
    <published>2017-08-29T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.135Z</updated>
    
    <content type="html"><![CDATA[<p>AJAX即’Asynchronous Javascript And XML’(异步JavaScript和XML),是指一种创建交互式网页应用的网页开发技术.  </p><p>AJAX = 异步 JavaScript和XML(标准通用标记语言的子集).<br>AJAX是一种用于创建快速动态网页的技术.<br>AJAX是一种在无需重新加载整个页面的情况下,能够更新部分网页的技术.通过在后台与服务器进行少量数据交换,AJAX可以使网页实现异步更新.这意味着可以在不重新加载整个网页的情况下,对网页的某部分进行更新.<br>传统的网页(不使用AJAX)如果需要更新内容,必须重载整个网页页面.</p><h2 id="AJAX技术"><a href="#AJAX技术" class="headerlink" title="AJAX技术"></a>AJAX技术</h2><p>AJAX技术的核心是XMLHttpRequest对象(简称 XHR),XHR为向服务器发送请求和解析服务器想赢提供了流畅的借口.能够以异步方式从服务器取得更多信息,意味着用户单击后,可以不必刷新页面也可以取得新数据,也就是说,可以使用XHR对象取得新数据,然后再通过DOM将新数据插入到页面中.另外,虽然名字中包含XML的成分,但AJAX通信与数据格式无关;这种技术就是无需刷新页面即可从服务器取得数据,但不一定是XML数据.</p><ul><li>定义： ajax是用于客户端和服务端进行异步数据交互，在无需刷新整个页面的情况下实现局部数据更新的一种技术。</li><li>特点： 前后端通信，异步方式通信，无刷新，局部更新。</li></ul><p>优点:</p><ol><li>最大的一点是页面无刷新，用户的体验非常好。</li><li>使用异步方式与服务器通信，具有更加迅速的响应能力。</li><li>可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，ajax的原则是“按需取数据”，可以最大程度的减少冗余请求，和响应对服务器造成的负担。</li><li>基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。</li></ol><p>缺点:</p><ol><li>ajax不支持浏览器back按钮。</li><li>安全问题 AJAX暴露了与服务器交互的细节。</li><li>对搜索引擎的支持比较弱。</li><li>破坏了程序的异常机制。</li><li>不容易调试。</li></ol><h2 id="原生XHR对象应用"><a href="#原生XHR对象应用" class="headerlink" title="原生XHR对象应用"></a>原生XHR对象应用</h2><h3 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兼容低版本ie浏览器的代码,对于现代浏览器可以省略部分代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>)&#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> versions = [ <span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>,</span><br><span class="line">            <span class="string">"MSXML2.XMLHttp"</span>], i, len;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>,len=versions.length; i &lt; len; i++)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">                    <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ex)&#123;</span><br><span class="line">                    <span class="comment">//跳过</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面大堆的代码仅仅是为了兼容低版本的IE浏览器,对于现代的大部分浏览器而言,上面的大部分代码都是冗余的,只需要几行代码,如下:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面分别是老版本的IE浏览器和现在浏览器的创建函数.<br>现在需要调用这个函数生成一个实例化对象.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var xhr</span> = createXHR();</span><br></pre></td></tr></table></figure><p>当然对于现在大部分浏览器而言,上面的两个步骤可以缩减为一个步骤:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="type">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><p><code>XMLHttpRequest()</code>构造函数,初始化一个XMLHttpRequest对象,必须在所有其他方法被调用前调用构造函数.此处用于AJAX通信.</p><h3 id="open-初始化一个请求"><a href="#open-初始化一个请求" class="headerlink" title="open() 初始化一个请求"></a>open() 初始化一个请求</h3><p>使用XHR对象时,要调用的第一个方法就是<code>open()</code>,初始化一个请求,方法用于JAVAScript代码中,这个方法有以下参数</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void open(</span><br><span class="line">   DOMString <span class="function"><span class="keyword">method</span>,</span></span><br><span class="line"><span class="function">   <span class="title">DOMString</span> <span class="title">url</span>,</span></span><br><span class="line"><span class="function">   <span class="title">optional</span> <span class="title">boolean</span> <span class="title">async</span>,</span></span><br><span class="line"><span class="function">   <span class="title">optional</span> <span class="title">DOMString</span> <span class="title">user</span>,</span></span><br><span class="line"><span class="function">   <span class="title">optional</span> <span class="title">DOMString</span> <span class="title">password</span></span></span><br><span class="line"><span class="function">);</span></span><br></pre></td></tr></table></figure><p>参数:   </p><ul><li>method:请求所使用的HTTP方法,例如:’GET’,’POST’等.</li><li>url:该请求所要访问的URL</li><li>async:一个可选的布尔值参数,默认为true,意味着是否执行异步操作,如果值为false,则send()方法不会返回任何东西,直到接受到了服务器的返回数据.</li><li>user:可选参数,为授权使用;默认参数为空String.</li><li>password:可选参数,为授权使用;默认参数为空String.</li></ul><blockquote><p>对于这个方法,我们只需要前面的3个参数,关于代码:<br>一是URL相对于执行代码的当前页面(当然也可以使用绝对路径);<br>二是调用open()方法并不会真正的发送请求,而只是启动一个请求以备发送<br>三是关于第三个参数异步,异步：客户端发送请求之后，不用死等服务端的响应，可以继续先做自己的事。服务端什么时候响应，那客户端就什么时候接收响应。</p></blockquote><h3 id="send-发送一个请求"><a href="#send-发送一个请求" class="headerlink" title="send() 发送一个请求"></a>send() 发送一个请求</h3><p>发送请求.如果该请求是异步模式(默认),该方法会立即返回.相反,如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回.<br>XMLHttpRequest.send()接受一个可选的参数,其作为请求主体,如果请求方法是GET,其数据携带在URL上,则应将请求主体设置为null.</p><h3 id="接受响应"><a href="#接受响应" class="headerlink" title="接受响应"></a>接受响应</h3><p>在收到响应后,响应的数据会自动填充XHR对象的属性,相关属性简介如下:<br><code>onreadystatechange</code>:一个JAVAScript函数对象,当<code>readyState</code>属性改变时调用它.<br><code>readyState</code>:见下.<br><code>responseText</code>:作为响应的主体被返回的文本.<br><code>reponseXML</code>:如果响应的内容类型是<code>text/xml</code>或<code>application/xml</code>,这个属性中保存包含着响应数据的XML DOM文档.<br><code>status</code>:响应的HTTP状态.<br><code>statusTest</code>:HTTP状态说明.    </p><p>多数情况下,我们还是要发送异步请求,才能让JAVAScript继续执行下去而不必等待响应.此时,我们可以检测XHR对象的readyState属性,该属性表示请求响应过程的当前活动阶段.这个属性可取的值如下:</p><ul><li>0:未初始化.尚未调用open()方法.</li><li>1:启动.已经调用open()方法.</li><li>2:发送.已经调用send()方法,但尚未接收到响应.</li><li>3:接受.已经接收到部分响应数据.</li><li>4:完成.已经接受到全部响应数据,而且已经可以在客户端使用了.</li><li>只要readyState属性的值由一个值变成另外一个值,都会触发一次readystatechange事件.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#start"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//1. 想要使用ajax，必须要先创建xhr对象</span></span><br><span class="line">      <span class="comment">//此处的xhr用于ajax通信</span></span><br><span class="line">      <span class="keyword">var</span> xhr = createXHR();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//高版本浏览器</span></span><br><span class="line">      <span class="comment">// var xhr = new XMLHttpRequest();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//2. 准备向服务器发送一次http请求(get, post)</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      true表示是异步请求</span></span><br><span class="line"><span class="comment">      异步：客户端发送请求之后，不用死等服务端的响应，可以继续先做自己的事。</span></span><br><span class="line"><span class="comment">      服务端什么时候响应，那客户端就什么时候接收响应。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//数据格式  url?key=value&amp;key=value</span></span><br><span class="line">      xhr.open(<span class="string">"get"</span>, <span class="string">"http://127.0.0.1:8000/index?name=张三&amp;age=22&amp;score=88"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//用于转码用的</span></span><br><span class="line">      <span class="comment">// console.log(encodeURIComponent("张三 李四 xxx yyy ))) * /~skjkjh"));</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//4. 用于时刻准备接受服务端的响应</span></span><br><span class="line">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log("当前状态： " + xhr.readyState);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当状态为4时，表示响应完成， 失败？成功？</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span>) &amp;&amp; (xhr.status &lt; <span class="number">400</span>))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过xhr.response得到后端发送来的数据</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"recv from server: "</span>, xhr.response);</span><br><span class="line"></span><br><span class="line">            $(<span class="string">"&lt;h1&gt;success&lt;/h1&gt;"</span>).appendTo(<span class="string">"body"</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">"&lt;h1&gt;fail&lt;/h1&gt;"</span>).appendTo(<span class="string">"body"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//3. 真正发送一次请求</span></span><br><span class="line">      <span class="comment">//get请求，数据携带在url上，所有send为空即可</span></span><br><span class="line">      xhr.send();</span><br><span class="line">      $(<span class="string">"&lt;h1&gt;send完毕!&lt;/h1&gt;"</span>).appendTo(<span class="string">"body"</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>上面的代码就是一次完整的GET请求<br>GET是最常见的请求类型,最常用于向服务器查询某些信息.必要时,可以将查询字符串参数追加到URL的末尾,以便将信息发送给服务器.对XHR而言,位于传入open()方法的URL末尾的查询字符串必须经过正确的编码才行.<br><code>encodeURLComponent()</code>是对统一资源标示符(URL)的组成部分进行编码的方法.它使用一到四个转义序列来表示字符串中的的每个字符的UTF-8编码.它会转义除了字母,数字,<code>(</code>,<code>)</code>,<code>.</code>,<code>!</code>,<code>~</code>,<code>*</code>,<code>&#39;</code>,<code>-</code>和<code>_</code>之外的所有字符.<br>为了避免服务器收到不可预计的请求,对任何用户输入的作为URL部分的内容你都需要用<code>encodeURLComponent</code>进行转义.比如,一个用户可能会输入<code>Teyme &amp;time=again</code>作为comment变量的一部分.如果不使用<code>encodeURLComponent</code>对此内容进行转义,服务器得到的将是<code>commnet=Teyme%20&amp;time=again</code>.请注意,<code>&amp;</code>符号和<code>=</code>符号产生了一个新的键值对,所以服务器将得到两个键值对(一个键值对是comment=Teyme另一个则是time=again),而不是一个键值对.</p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>使用频率仅次于GET的是POST请求,通常用于向服务器发送应该被保存的数据.POST请求应该把数据作为主体提交,而GET请求传统上不是这样的.POST请求的主体可以包含非常多的数据,而且格式不限.<br>默认情况下,服务器对POST请求和提交Web表单的请求并不会一视同仁.因此,服务器端必须有程序来读取发送过来的原始数据,并从中解析出有用的部分.不过,我们可以使用XHR来模仿表单提交:首先将Content-Type头部信息设置为 <code>application/x-www-form-urlencoded</code>,也就是表单提交时的内容类型,其次是以适当的格式创建一个字符串.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送post数据时，按照form表单的数据格式进行发送</span></span><br><span class="line"><span class="comment">//需要设置http的头部来指定要发送的数据格式</span></span><br><span class="line"><span class="selector-tag">xhr</span><span class="selector-class">.setRequestHeader</span>(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">xhr</span><span class="selector-class">.send</span>(<span class="string">"name=lisi&amp;age=22&amp;score=88"</span>);</span><br></pre></td></tr></table></figure><p>由于,POSt请求不是通过URL实现的,所以URL也不必携带参数,完整的一次post请求如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax使用的基本步骤<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 兼容低版本ie浏览器的代码,对于现代浏览器可以省略部分代码</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createXHR</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>)&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>)&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> versions = [ <span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"MSXML2.XMLHttp"</span>], i, len;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (i=<span class="number">0</span>,len=versions.length; i &lt; len; i++)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">new</span> ActiveXObject(versions[i]);</span></span><br><span class="line"><span class="javascript">              <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">catch</span> (ex)&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">//跳过</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#start"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//1. 想要使用ajax，必须要先创建xhr对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//此处的xhr用于ajax通信</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> xhr = createXHR();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//高版本浏览器</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// var xhr = new XMLHttpRequest();</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//2. 准备向服务器发送一次http请求(get, post)</span></span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="actionscript">      <span class="literal">true</span>表示是异步请求</span></span><br><span class="line"><span class="undefined">      异步：客户端发送请求之后，不用死等服务端的响应，可以继续先做自己的事。</span></span><br><span class="line"><span class="undefined">      服务端什么时候响应，那客户端就什么时候接收响应。</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      xhr.open(<span class="string">"post"</span>, <span class="string">"http://127.0.0.1:8000/index"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//4. 用于时刻准备接受服务端的响应</span></span></span><br><span class="line"><span class="actionscript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log("当前状态： " + xhr.readyState);</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//当状态为4时，表示响应完成， 失败？成功？</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span>) &amp;&amp; (xhr.status &lt; <span class="number">400</span>))&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"&lt;h1&gt;success&lt;/h1&gt;"</span>).appendTo(<span class="string">"body"</span>);</span></span><br><span class="line"><span class="actionscript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"&lt;h1&gt;fail&lt;/h1&gt;"</span>).appendTo(<span class="string">"body"</span>);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//3. 真正发送一次请求</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//post请求，数据应该在send中发送！！！！！</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//发送post数据时，按照form表单的数据格式进行发送</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//需要设置http的头部来指定要发送的数据格式</span></span></span><br><span class="line"><span class="actionscript">      xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      xhr.send(<span class="string">"name=lisi&amp;age=22&amp;score=88"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="string">"&lt;h1&gt;send完毕!&lt;/h1&gt;"</span>).appendTo(<span class="string">"body"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-中的-Ajax-应用"><a href="#jQuery-中的-Ajax-应用" class="headerlink" title="jQuery 中的 Ajax 应用"></a>jQuery 中的 Ajax 应用</h2><p>jQuery库支持完整的Ajax操作.这里包含所有的函数和方法用于从服务端加载数据,并且不会导致页面刷新.</p><h3 id="底层接口"><a href="#底层接口" class="headerlink" title="底层接口"></a>底层接口</h3><ul><li><code>jQuery.ajax([setting])</code>其中<code>jQuery</code>等价于<code>$</code>,所以一般写成<code>$.ajax([setting])</code>.    </li><li><code>[setting]</code>是一个可选选项,一个以<code>{key:value}</code>组成的AJAX请求设置.其中的所有设置都是可选的,都有自己的默认值.   </li><li>说明: 执行一个异步的HTTP（Ajax）的请求。</li></ul><h4 id="常用的选项"><a href="#常用的选项" class="headerlink" title="常用的选项"></a>常用的选项</h4><p><strong>method</strong> (default:<code>&#39;GET&#39;</code>)<br>Type:<code>String</code><br>说明:HTTP的请求方法,例如:<code>POST</code>,<code>GET</code>.</p><hr><p><strong>url</strong>(default:当前页面的url)<br>Type:<code>String</code><br>说明:发送请求的地址.</p><hr><p><strong>data</strong><br>Type:<code>PlainObject</code>或<code>String</code>或<code>Array</code><br>说明:发送到服务器的数据。它被转换成一个查询字符串,如果已经是一个字符串的话就不会转换。查询字符串将被追加到GET请求的URL后面。参见 processData 选项说明，以防止这种自动转换。对象必须为”{键:值}”格式。如果这个参数是一个数组，jQuery会按照traditional 参数的值， 将自动转化为一个同名的多值查询字符串(查看下面的说明)。注：如 {foo:[“bar1”, “bar2”]} 转换为 ‘&amp;foo=bar1&amp;foo=bar2’。</p><hr><p><strong>dataType</strong>(default:<code>Intelligent Guess (xml, json, script, or html)</code>)<br>Type:<code>String</code><br>说明:从服务器返回你期望的数据类型.如果没有指定,jQuery将尝试通过MIME类型的响应信息来智能判断一个XML MIME类型就被识别为XML，在1.4中 JSON将生成一个JavaScript对象，在1.4中 script 将执行该脚本，其他任何类型会返回一个字符串）。 可用的类型（以及结果作为第一个参数传递给成功回调函数）有：</p><ul><li>“xml”: 返回 XML 文档，可以通过 jQuery 处理。</li><li>“html”: 返回纯文本 HTML 文本；包含的script标签会在插入DOM时执行。</li><li>“script”: 把响应的结果当作 JavaScript 执行，并将其当作纯文本返回。默认情况下会通过在URL中附加查询字符串变量 ，_=[TIMESTAMP]， 禁用缓存结果，除非设置了cache参数为true。注意: 在远程请求时(不在同一个域下)，所有POST请求都将转为GET请求。(注：因为将使用DOM的script标签来加载)</li><li>“json”:把响应的结果当作 JSON 执行，并返回一个JavaScript对象。跨域”json” 请求转换为”jsonp”，除非该请求在其请求选项中设置了jsonp:false。JSON 数据以严格的方式解析; 任何畸形的JSON将被拒绝，并且抛出解析错误信息。在jQuery1.9中，一个空响应也将被拒绝;服务器应该返回null或 {}响应代替。（见json.org的更多信息，正确的JSON格式。）</li><li>“jsonp”: 以 JSONP 的方式载入 JSON 数据块。会自动在所请求的URL最后添加”?callback=?”。默认情况下会通过在URL中附加查询字符串变量 ，_=[TIMESTAMP]， 禁用缓存结果，除非设置了cache参数为true。</li><li>“text”: 返回纯文本字符串。</li></ul><hr><p><strong>success</strong><br>Type:Function(<code>Anything</code> data,<code>String</code> textStatus,<code>jqXHR</code> jqXHR)<br>说明:请求成功后的回调函数.这个函数可以传递3个参数:</p><ul><li>从服务器返回的数据，并根据dataType参数进行处理后的数据或dataFilter回调函数，如果指定的话；</li><li>一个描述状态的字符串;</li><li>还有 jqXHR（在jQuery 1.4.x前为XMLHttpRequest） 对象 ;</li></ul><hr><p><strong>error</strong><br>Type:Function(<code>jqXHR</code> jqXHR, <code>String</code> textStatus, <code>String</code> errorThrown)<br>说明:请求失败时调用此函数。有以下三个参数：jqXHR (在 jQuery 1.4.x前为XMLHttpRequest) 对象、描述发生错误类型的一个字符串 和 捕获的异常对象。如果发生了错误，错误信息（第二个参数）除了得到null之外，还可能是”timeout”, “error”, “abort” ，和 “parsererror”。 当一个HTTP错误发生时，errorThrown 接收HTTP状态的文本部分，比如： “Not Found”（没有找到） 或者 “Internal Server Error.”（服务器内部错误）。 从jQuery 1.5开始, 在error设置可以接受函数组成的数组。每个函数将被依次调用。</p><h4 id="实例–登录"><a href="#实例–登录" class="headerlink" title="实例–登录"></a>实例–登录</h4><p>这个登录页面需要服务器支持,后端验证你输入的用户名,密码.当你的密码和用户名没有错时,会返回一个OK.验证错误就会返回一个FAIL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.login</span> &#123;</span></span><br><span class="line"><span class="undefined">      width: 500px;</span></span><br><span class="line"><span class="undefined">      margin: 50px auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.login</span> &gt; <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="undefined">      color: red;</span></span><br><span class="line"><span class="undefined">      visibility: hidden;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名或者密码不能为空！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> 密 码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"passwd"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = $(<span class="string">".login input[name=username]"</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = $(<span class="string">".login input[name=password]"</span>).val();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> ((!username) || (!password))&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//如果为空的情况要执行</span></span></span><br><span class="line"><span class="javascript">          $(<span class="string">".login &gt; p"</span>).css(<span class="string">"visibility"</span>, <span class="string">"visible"</span>);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="undefined">        用户的输入都是合法的，发送ajax登录请求</span></span><br><span class="line"><span class="undefined">        */</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">           method: <span class="string">"post"</span>,</span></span><br><span class="line"><span class="actionscript">           url: <span class="string">"/login"</span>, <span class="comment">//直接填写路由即可</span></span></span><br><span class="line"><span class="undefined">           data: &#123;name: username, passwd: password&#125;,</span></span><br><span class="line"><span class="actionscript">           success: <span class="function"><span class="keyword">function</span><span class="params">(data, textStatus, jqXHR)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">             <span class="keyword">if</span> (data == <span class="string">"OK"</span>)&#123;</span></span><br><span class="line"><span class="actionscript">               <span class="comment">//登录</span></span></span><br><span class="line"><span class="javascript">               <span class="built_in">window</span>.location = <span class="string">"https://www.baidu.com"</span>; <span class="comment">//跳转页面</span></span></span><br><span class="line"><span class="actionscript">             &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">               <span class="comment">//将input的值设置为空</span></span></span><br><span class="line"><span class="javascript">               $(<span class="string">".login input"</span>).val(<span class="string">""</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">               alert(<span class="string">"用户名和密码错误"</span>);</span></span><br><span class="line"><span class="undefined">             &#125;</span></span><br><span class="line"><span class="undefined">           &#125;,</span></span><br><span class="line"><span class="actionscript">           error: <span class="function"><span class="keyword">function</span><span class="params">(jqXHR, textStatus, error)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.error(error);</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AJAX即’Asynchronous Javascript And XML’(异步JavaScript和XML),是指一种创建交互式网页应用的网页开发技术.  &lt;/p&gt;
&lt;p&gt;AJAX = 异步 JavaScript和XML(标准通用标记语言的子集).&lt;br&gt;AJAX是一种
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://blog.loong.io/tags/jQuery/"/>
    
      <category term="AJAX" scheme="https://blog.loong.io/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>HTTP</title>
    <link href="https://blog.loong.io/2017/08/28/http/"/>
    <id>https://blog.loong.io/2017/08/28/http/</id>
    <published>2017-08-28T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.132Z</updated>
    
    <content type="html"><![CDATA[<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。HTTP是一个客户端和服务端请求和应答的标准.</p><h3 id="HTTP组成"><a href="#HTTP组成" class="headerlink" title="HTTP组成"></a>HTTP组成</h3><p><img src="http://oujvmc3la.bkt.clouddn.com/http.jpg" alt></p><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul><li>1XX:信息</li><li>2XX:成功</li><li>3XX:重定向</li><li>4XX:客户端错误</li><li>5XX:服务器错误</li></ul><p>详情见<a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin" target="_blank" rel="noopener">百度</a></p><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><p>在客户机和服务器之间进行通信,响应时,两种最常被用到的方法是:<code>GET</code> 和 <code>POST</code>.</p><ul><li>GET-从指定的资源请求数据.</li><li>POST-向指定的资源提交要被处理的数据.</li></ul><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>GET 方法用于获取由Request所标示的资源的信息,常见的形式是:<code>GET Request-URL HTTP/1.1</code>.GET方法是默认的HTTP请求的方法,例如当我们通过在浏览器的地址栏中直接输入网址的方式去访问网页的时候,浏览器采用的就是GET方法向服务器获取资源.<br>我们可以使用GET方法来提交表单数据,用GET方式提交的表单数据只经过了简单编码,同时它将作为URL的一部分向服务器发送,因此,如果使用GET方法来提交表单数据就存在着安全隐患.例如:<br><code>http://localhost/login.php?username=aa&amp;password=1234</code><br>从上面的URL请求中,很容易就可以辨认出表单提交的内容.(?之后的内容)另外由于GET方法提交的数据是作为URL请求的一部分所以提交的数据量不能太大.这是因为浏览器对url的长度有限制,下面是几种常见的浏览器的url长度限制(单位:字符):</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">IE:</span><span class="number">2803</span></span><br><span class="line"><span class="symbol">Firefox:</span><span class="number">65536</span></span><br><span class="line"><span class="symbol">Chorme:</span><span class="number">8182</span></span><br><span class="line"><span class="symbol">Safari:</span><span class="number">80000</span></span><br><span class="line"><span class="symbol">Opera:</span><span class="number">190000</span></span><br></pre></td></tr></table></figure><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>POST方法是GET方法的一个替代方法,它主要是向Web服务器提交表单数据,尤其是大批量的数据.在请求头信息结束之后的两个回车换行之后(实际是空一行),就是表单提交的数据.<br>POST方法克服了GET方法的一些缺点.通过POST方法提交表单数据时,数据不是作为URL请求的一部分而是作为标准数据传送给Web服务器,这就克服了GET方法中的信息无法保密和数据量太小的缺点.因此,处于安全的考虑以及对用户隐私的尊重,通常表单提交时采用POST方法.<br>从编程角度来讲,如果用户通过GET方法提交数据,则数据存放在QUERY_STRING环境变量中,而POST方法提交的数据则可以从标准输入流中获取.</p><h4 id="GET与POST方法有以下区别"><a href="#GET与POST方法有以下区别" class="headerlink" title="GET与POST方法有以下区别"></a>GET与POST方法有以下区别</h4><ol><li>在客户端,Get方式在通过URL提交数据,数据在URL中可以看到;POST方式,数据放在HTTP包的body中.</li><li>GET方式提交的数据大小有限制(因为浏览器对URL的长度有限制),而POST则没有此限制.</li><li>安全性问题,正如在(1)中提到,使用GET的时候,参数会显示在地址栏上,而POST不会.所以,如果这些数据是中文数据而且是非敏感数据,那么使用get;如果用户输入的数据不是中文字符而且包含敏感数据,那么还是使用post为好.</li><li>服务器取值方式不一样.GET方式取值,如php可以使用$_GET来取得变量的值,而POST方式通过$_POST来获取变量的值.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。HTTP是一个客户端和服务端请求和应答的标准.&lt;/p
      
    
    </summary>
    
      <category term="HTTP" scheme="https://blog.loong.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://blog.loong.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>课后题</title>
    <link href="https://blog.loong.io/2017/08/28/test1/"/>
    <id>https://blog.loong.io/2017/08/28/test1/</id>
    <published>2017-08-28T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.134Z</updated>
    
    <content type="html"><![CDATA[<ol><li>jQuery库中的<code>$()</code>是什么?<code>$(function(){})</code>的作用?</li><li>简述HTTP协议.</li><li>html页面中<code>DOCTYPE</code>的作用</li><li>css优先级计算方式</li><li>两栏布局,左边固定宽,右栏随窗口的大小变化,至少两种思路</li></ol><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><p>答:</p><ul><li><code>$()</code>等同于<code>jQuery()</code>,通过提供的选择器检索任何DOM元素并且通过这些元素创建一个新的jQuery对象.</li><li><code>$(function(){})</code>是<code>$(document).ready(function(){})</code>的简写,用来DOM加载完成之后执行一系列预先定义好的函数.DOM节点加载完毕指的的是页面上所有的标签都已经加载就绪(但不是所有的资源，比如图片，音频，视频等等),脚本文件尽量放在body最后.</li></ul><h5 id="拓展-详解浏览器渲染页面过程"><a href="#拓展-详解浏览器渲染页面过程" class="headerlink" title="拓展  详解浏览器渲染页面过程"></a>拓展  详解浏览器渲染页面过程</h5><p><img src="http://oujvmc3la.bkt.clouddn.com/%E2%95%AB%E2%95%A9%E2%95%98%E2%94%A4%E2%95%9D%E2%95%99%E2%95%98%E2%95%AA.jpg" alt></p><p>1.解析HTML文件，创建DOM树<br>自上而下，遇到任何样式（link、style）与脚本（script）都会阻塞（外部样式不阻塞后续外部脚本的加载）。<br>2.解析CSS<br>优先级：浏览器默认设置&lt;用户设置&lt;外部样式&lt;内联样式&lt;HTML中的style样式；<br>特定级：id数<em>100+类或伪类数</em>10+tag名称*1<br>3.将CSS与DOM合并，构建渲染树（renderingtree）<br>DOM树与HTML一一对应，渲染树会忽略诸如head、display:none的元素<br>4.布局和绘制，重绘（repaint）和重排（reflow）<br>重排：若渲染树的一部分更新，且尺寸变化，就会发生重排；<br>重绘：部分节点需要更新，但不改变其他集合形状。如改变某个元素的颜色，就会发生重绘。<br>附：<br>1.重绘和重排何时会发生：<br>（1）增加或删除DOM节点；<br>（2）display:none（重排并重绘）；visibility:hidden（重排）；<br>（3）移动页面中的元素；<br>（4）增加或修改样式；<br>（5）用户改变窗口大小，滚动页面等。<br>2.如何减少重绘和重排以提升页面性能：<br>（1）不要一个个修改属性，应通过一个class来修改<br>错误写法：div.style.width=”50px”;div.style.top=”60px”;<br>正确写法：div.className+=” modify”;<br>（2）clone节点，在副本中修改，然后直接替换当前的节点；<br>（3）若要频繁获取计算后的样式，请暂存起来；<br>（4）降低受影响的节点：在页面顶部插入节点将影响后续所有节点。而绝对定位的元素改变会影响较少的元素；<br>（5）批量添加DOM：多个DOM插入或修改，应组成一个长的字符串后一次性放入DOM。使用innerHTML永远比DOM操作快。（特别注意：innerHTML不会执行字符串中的嵌入脚本，因此不会产生XSS漏洞）。</p><h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><p>答:<br>HTTP协议,中文翻译为超文本传输协议,所有www文件必须遵守这个标准,HTTP协议是一个应用层协议,是客户端与服务器请求和应答的标准.</p><h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4><p>答:<br>DOCTYPE 一般写于HTML文档的最前端,指明其文档类型,让浏览器用什么标准去解析渲染页面.如果不写,只能按照浏览器默认的标准去解析渲染页面,浏览器之间默认的标准是不一样的.</p><h4 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h4><p>答:<br>优先级:<code>!important</code> &gt; <code>行内style</code> &gt; <code>ID</code> &gt; <code>类</code> &gt; <code>标签</code> &gt; <code>继承</code> &gt; <code>浏览器默认样式</code><br>特定级:在同一CSS规则中,默认其优先级为0,出现一次标签加1,出现一次类加10,出现一次id加100,如果优先级相同,后面的设置有效.</p><h4 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h4><p>答:</p><p>1.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>两栏布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">     <span class="selector-class">.a1</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">       height: 100px;</span></span><br><span class="line"><span class="undefined">       background: red;</span></span><br><span class="line"><span class="undefined">       float: left;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.a2</span>&#123;</span></span><br><span class="line"><span class="undefined">       height: 100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">       margin-left: 200px;</span></span><br><span class="line"><span class="undefined">       background: blue;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="css">     <span class="comment">/*让a1脱离标准流,不在单独占一行,a1没有占位置,那么a2就会到a1的位置单独占一行,用margin把a1的位置空出来.*/</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a2"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>两栏布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.b</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.b1</span>&#123;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.b2</span>&#123;</span></span><br><span class="line"><span class="undefined">        background: blue;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/*b2没有设置宽,但是可以看出这个已经符合题目要求了,以往学的定位,top和buttom设置一个,left和right设置一个,但是这里设置了left和right.*/</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'b'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b2"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;jQuery库中的&lt;code&gt;$()&lt;/code&gt;是什么?&lt;code&gt;$(function(){})&lt;/code&gt;的作用?&lt;/li&gt;
&lt;li&gt;简述HTTP协议.&lt;/li&gt;
&lt;li&gt;html页面中&lt;code&gt;DOCTYPE&lt;/code&gt;的作用&lt;/li&gt;
&lt;li&gt;c
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://blog.loong.io/tags/jQuery/"/>
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML中form表单</title>
    <link href="https://blog.loong.io/2017/08/24/form/"/>
    <id>https://blog.loong.io/2017/08/24/form/</id>
    <published>2017-08-24T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.131Z</updated>
    
    <content type="html"><![CDATA[<p>表单在网页中主要负责数据采集功能。一个表单有三个基本组成部分： 表单标签：这里面包含了处理表单数据所用CGI程序的URL以及数据提交到服务器的方法。 表单域：包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等。 表单按钮：包括提交按钮、复位按钮和一般按钮；用于将数据传送到服务器上的CGI脚本或者取消输入，还可以用表单按钮来控制其他定义了处理脚本的处理工作。</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p><img src="http://oujvmc3la.bkt.clouddn.com/form.png" alt></p><p>表单组成:<br>对于表单构成中的表单控件,提示信息和表单域,初学者可能比较难以理解,对他们的具体解释如下:</p><ul><li>表单控件:包含了具体的表单功能项,如单行文本输入框,密码输入框,复选框,提交按钮,重置按钮等.</li><li>提示信息:一个表单通常还需要包含一些说明行的文字,提示用户进行填写和操作.</li><li>表单域:它相当于一个容器,用来容纳所有的表单控件和提示信息,可以通过他定义处理表单数据所用的程序的url地址,以及数据提交到服务器的方法.如果定义表单域,表单中的数据就无法传送到后台服务器.</li></ul><h4 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h4><p>在HTML中,form标记被用于定义表单域,即创建一个表单,以实现用户信息的收集和传递,form中的所有内容都会被提交给服务器.创建表单的基本语法格式如下:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="built_in">action</span>=<span class="string">"xxx/xxx.cgi"</span> method=<span class="string">"get"</span> <span class="built_in">name</span>=<span class="string">"form1"</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> <span class="built_in">name</span>=<span class="string">"name"</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>form标签具体属性解释:</p><ul><li>action,属性用于指定接收并处理表单数据的服务器程序的url地址.</li><li>method,属性用于设置表单数据的提交方式,其取值为<code>get</code>或者<code>post</code>.</li><li>name,属性用于指定表单的名称,用来区分同一个页面中的多个表单.</li></ul><h4 id="input控件"><a href="#input控件" class="headerlink" title="input控件"></a>input控件</h4><p>input控件的基本语法格式如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"input类型"</span>  /&gt;</span><br><span class="line"></span><br><span class="line">//在上面的语法中,&lt;<span class="built_in">input</span> /&gt;标记为单标记,<span class="built_in">type</span>属性为最基本的属性,其取值有很多种,用于指定不同的控机类型.除了<span class="built_in">type</span>属性之外,&lt;<span class="built_in">input</span> /&gt;标记还可以定义很多其他属性,其常用属性如下表所示.</span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/input.jpg" alt></p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">maxlength</span>=<span class="string">"20"</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 单行文本输入框  其maxlength属性会导致其输入的最大字符数为20--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 密码输入框,其输入显示为圆点 value属性用来设置默认值--&gt;</span></span><br><span class="line">      男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span> 女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 单选按钮 要想做到单选,必须让其name属性相同 这里填写value值,其不再是默认值,而是进行表单提交时,提交的值--&gt;</span></span><br><span class="line">      课程:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"yw"</span>&gt;</span>语文 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"sx"</span>&gt;</span>数学 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 复选框 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 普通按钮,value属性为其设置显示名称 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"清空"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 重置按钮,让整个表单清空,value属性其设置显示名称 --&gt;</span></span><br><span class="line">      这有个隐藏域--&gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 隐藏域 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 文件域,供上传文件使用 multiple这个属性是多选,可以允许提交多个文件  accept属性用于指定文件类型,只能上传图片 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 提交按钮,会让整个表单提交 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"./timg.jpg"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 图片形式的提交 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其浏览器显示如下:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/2017-08-24%2019-24-40%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt></p><h4 id="textarea控件"><a href="#textarea控件" class="headerlink" title="textarea控件"></a>textarea控件</h4><p>如果需要输入大量的信息,那么就需要用到textarea标记.<br>通过textarea控件可以轻松的创建多行文本输入框,其基本语法格式如下:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea rows=<span class="string">"10"</span> cols=<span class="string">"10"</span>&gt;</span><br><span class="line">......</span><br><span class="line">&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>textarea文本域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    文本域:</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"10"</span> <span class="attr">style</span>=<span class="string">"vertical-align:top"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- rows和cols分别设置行宽和列高,当然也可用width和height设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="select控件"><a href="#select控件" class="headerlink" title="select控件"></a>select控件</h4><p>当点击下拉符号时,会出现一个选择列表.在HTML中,要想制作如下图所示的下拉菜单,就需要使用select控件.</p><p><img src="http://oujvmc3la.bkt.clouddn.com/select.jpg" alt></p><p>基本语法格式如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;select&gt;&lt;/select&gt;</code>标记用于在表单中添加一个下拉菜单,<code>&lt;option&gt;&lt;/option&gt;</code>用于定义下拉菜单中的具体选项,每对<code>&lt;select&gt;&lt;/select&gt;</code>中至少应包含一对<code>&lt;option&gt;&lt;/option&gt;</code>.</p><blockquote><p><select>和<option>的属性</option></select></p></blockquote><p><img src="http://oujvmc3la.bkt.clouddn.com/option.jpg" alt></p><h4 id="fieldset组合控件"><a href="#fieldset组合控件" class="headerlink" title="fieldset组合控件"></a>fieldset组合控件</h4><p>用于将form中的控件进行分组,fieldset没有必须或唯一的属性.<br><code>legend</code>用于给fieldset定义标题.</p><p>语法格式如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"test.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"radio"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其显示如下:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/2017-08-24%2019-48-48%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt></p><h3 id="jQuery中的表单操作"><a href="#jQuery中的表单操作" class="headerlink" title="jQuery中的表单操作"></a>jQuery中的表单操作</h3><h4 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h4><p>:button<br>:checkbox<br>:checked<br>:disabled<br>:enabled<br>:focus<br>:file<br>:image<br>:input<br>:password<br>:radio<br>:reset<br>:selected<br>:submit<br>:text</p><h4 id="表单元素值操作"><a href="#表单元素值操作" class="headerlink" title="表单元素值操作"></a>表单元素值操作</h4><ul><li>val() 获得值</li><li>val(value) 设置值</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 从复选框获取选中值</span><br><span class="line">$( "input[<span class="string">type=checkbox</span>][<span class="symbol">name=bar</span>]:checked" ).val();</span><br></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置文本框的值</span></span><br><span class="line">$(<span class="string">"input"</span>).val(<span class="keyword">text</span>);</span><br></pre></td></tr></table></figure><h4 id="表单的提交"><a href="#表单的提交" class="headerlink" title="表单的提交"></a>表单的提交</h4><p>对于表单而言,只要你点击提交按钮,表单就会提交一份数据交给服务器,即使表单中全是空.我们要做的是先在客户端判断,如果是空的,就去阻止表单去提交,直到它通过了客户端的验证.<br>想要做到这点,必须要提及的是jQuery中关于表单的事件<code>.submit()</code>,即表单的提交事件.<br><code>.submit()</code>:当用户试图提交表单时,就会在这个表单元素上触发<code>submit</code>事件.它只能绑定在<code>&lt;form&gt;</code>元素上.<br>详细代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-id">#account</span> &gt; <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">        visibility: hidden;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"account"</span>  <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名或者密码！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- input的name属性值必须和后端保持一致！！！！  --&gt;</span></span><br><span class="line">      username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"passwd"</span> <span class="attr">name</span>=<span class="string">"passwd"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//submit事件</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">"#account"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = $(<span class="string">"#account input[name=name]"</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = $(<span class="string">"#account input[name=passwd]"</span>).val();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> ((!username) || (!password))&#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">"#account &gt; p"</span>).css(<span class="string">"visibility"</span>, <span class="string">"visible"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//阻止提交</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//成功，就自动提交</span></span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li>不填提交会显示红色的字体:用户或者密码不能为空.当光标移动到输入框时,其红色警告字消失.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>不用form，只用控件！！！！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.message</span> &gt; <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">        visibility: hidden;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名或者密码不能为空！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     密  码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"passwd"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">   $(<span class="string">".message input"</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">     $(<span class="string">".message p"</span>).css(<span class="string">"visibility"</span>, <span class="string">"hidden"</span>);</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">   $(<span class="string">"#login"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">     <span class="comment">//val方法是用于获得表单控件的值</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> username = $(<span class="string">".message input[name=username]"</span>).val();</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> passwd = $(<span class="string">".message input[name=passwd]"</span>).val();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//  console.log(username, passwd);</span></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="actionscript">    username  或者 passwd 只要有<span class="number">1</span>个为空，那么就会执行<span class="keyword">if</span>中的语句。</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> ((!username) || (!passwd))&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//显示提示</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">".message p"</span>).css(<span class="string">"visibility"</span>, <span class="string">"visible"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//如果数据正确，需要将数据提交给后台！！！！</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//??????</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;表单在网页中主要负责数据采集功能。一个表单有三个基本组成部分： 表单标签：这里面包含了处理表单数据所用CGI程序的URL以及数据提交到服务器的方法。 表单域：包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等。 表单按钮：包括提交按钮、复位按
      
    
    </summary>
    
      <category term="HTML" scheme="https://blog.loong.io/categories/HTML/"/>
    
    
      <category term="jQuery" scheme="https://blog.loong.io/tags/jQuery/"/>
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript入门</title>
    <link href="https://blog.loong.io/2017/08/21/JAVAScript/"/>
    <id>https://blog.loong.io/2017/08/21/JAVAScript/</id>
    <published>2017-08-21T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.127Z</updated>
    
    <content type="html"><![CDATA[<p>JAVAScript一种直译式脚本语言,是一种动态类型.弱类型.基于原型的语言,内置支持类型.<br>它的解释器被称为JAVAScript引擎,为浏览器的一部分,广泛用于客户端的脚本语言,最早是在HTML网页上使用,用来给HTML网页增加动态功能.</p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>ECMAScript,描述了该语言的基本语法.</li><li>文档对象模型(DOM),描述处理网页内容的方法和接口.</li><li>浏览器对象模型(BOM),描述与浏览器进行交互的方法和接口.</li></ul><p><img src="http://oujvmc3la.bkt.clouddn.com/js.jpg" alt></p><h3 id="基本特点"><a href="#基本特点" class="headerlink" title="基本特点"></a>基本特点</h3><p>JAVAScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各种各样的动态效果,为用户提供更流畅美观的浏览效果.通常JAVAScript脚本是通过嵌入在HTML中来实现自身的功能的.</p><ol><li>是一种解释性脚本语言(代码不进行预编译).</li><li>主要用来向HTML页面添加交互行为.</li><li>可以直接嵌入HTML页面,但写成单独的js文件有利于结构和行为的分离.</li><li>跨平台特性,在绝大多数浏览器的支持下,可以在多种平台下运行(如windows.Linux.Mac.Android.ios等)</li></ol><h3 id="JAVAScript的作用"><a href="#JAVAScript的作用" class="headerlink" title="JAVAScript的作用"></a>JAVAScript的作用</h3><ul><li>嵌入动态文本与HTMLyemain</li><li>对浏览器事件做出响应.</li><li>读写HTML元素.</li><li>在数据被提交到服务器之前验证数据.</li><li>检测访客的浏览器信息</li><li>控制cookies,包括创建和修改等.</li><li>基于Node.js技术进行服务器编程</li></ul><h3 id="JAVAScript的编写方式"><a href="#JAVAScript的编写方式" class="headerlink" title="JAVAScript的编写方式"></a>JAVAScript的编写方式</h3><ul><li><p>行内样式</p><p>  <code>&lt;button onclick=&quot;alert();&quot;&gt;点我&lt;/button&gt;</code></p></li><li><p>嵌套样式:这个样式是写在<code>&lt;body&gt;&lt;/body&gt;</code>之内的,而不是别的.</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--嵌套javascript  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">"我是提示框！！！！"</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>外部的js脚本</p><p>先要创建一个<code>.js</code>结尾的文件,在里面写你需要的js脚本.<br>然后同样是在<code>&lt;body&gt;&lt;/body&gt;</code>标签中引入外部js脚本.<br><code>&lt;script src=&quot;./text.js&quot;&gt;&lt;/script&gt;</code></p></li></ul><h3 id="javascript-基本概念"><a href="#javascript-基本概念" class="headerlink" title="javascript 基本概念"></a>javascript 基本概念</h3><h4 id="严格区分大小写"><a href="#严格区分大小写" class="headerlink" title="严格区分大小写"></a>严格区分大小写</h4><p>第一个概念就是ECMAScript中的一切(变量,函数名和操作符)都区分大小写.<br>这也就意味着,变量名<code>test</code>和变量名<code>Test</code>分别代表着两个不同的变量.而函数名不能使用<code>typeof</code>,因为他是一个关键字,但<code>typeOf</code>则完全可以是一个有效的函数名.</p><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>所谓标识符,就是指变量,函数,属性的名字,或者函数的参数.标识符可以使按照下列格式规则组合起来的一个或多个字符:</p><ol><li><p>第一个字符必须是一个字母,下划线(_)或一个美元符号($)其他字符可以是字母,下划线,美元符号或数字.</p></li><li><p>标识符的字母也可以包含扩展的ASCII或Unicode字母字符,但我们不推荐这么做.</p></li><li><p>按照惯例,ECMAScript 标识符采用驼峰大小写格式,也就是第一个字母小写,剩下的每个单词的首字母大写,例如:<code>firstChild</code></p></li><li>不要和关键字重名</li></ol><h4 id="注释风格"><a href="#注释风格" class="headerlink" title="注释风格"></a>注释风格</h4><ol><li><p>单行注释<code>//</code>,<code>//这里是单行注释!</code></p></li><li><p>多行注释<code>/* 这是注释内容! */</code></p></li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里是注释!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:不要和python,html中的注释混淆.</p></blockquote><h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><p>ECMAScript 中的语句以一个分号结尾;如果省略分号,则由解析器确定语句的结尾,比如:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value1 = a - b  <span class="comment">//不推荐</span></span><br><span class="line"><span class="keyword">var</span> value2 = a + b; <span class="comment">//推荐</span></span><br></pre></td></tr></table></figure><p>使用代码块,让代码看起来更加清晰,比如:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不推荐</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">value</span>)</span><br><span class="line">  alert(<span class="string">"value is ..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">value</span>)&#123;</span><br><span class="line">  alert(<span class="string">"value is ..."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p><img src="http://oujvmc3la.bkt.clouddn.com/keywords.png" alt></p><blockquote><p>注意:定义标识符时不要使用关键字和保留字.</p></blockquote><h3 id="JAVAScript-变量"><a href="#JAVAScript-变量" class="headerlink" title="JAVAScript 变量"></a>JAVAScript 变量</h3><p>ECMAScript 的变量是松散类型的,所谓松散类型就是可以用来保存任何类型的数据.换句话说,每个变量仅仅是一个用于保存值的占位符而已.定义变量时要使用<code>var</code>操作符.再次定义变量就不需要<code>var</code>操作符了.<br>比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义变量！！！！</span></span><br><span class="line">    <span class="comment">// var是个关键字，a是变量名(标识符)</span></span><br><span class="line">    <span class="comment">//注意标识符的命名规则</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">//分号表示一条语句的结尾</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于控制台输出</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h3 id="JAVAScript-数据类型"><a href="#JAVAScript-数据类型" class="headerlink" title="JAVAScript 数据类型"></a>JAVAScript 数据类型</h3><p>ECMAScript 中有 5 种简单数据类型(也称为基本数据类型): <code>Undefined</code>, <code>Null</code>, <code>Boolean</code>, <code>Number</code>和 <code>String</code> 。<br>对一个值使用 <code>typeof</code> 操作符可能返回下列某个字符串:</p><ul><li>“undefined” ——如果这个值未定义;</li><li>“boolean” ——如果这个值是布尔值;</li><li>“string” ——如果这个值是字符串;</li><li>“number” ——如果这个值是数值;</li><li>“object” ——如果这个值是对象或 null ;</li><li>“function” ——如果这个值是函数。</li></ul><p>例如:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"string"</span>;</span><br><span class="line"> alert(<span class="keyword">typeof</span> a); <span class="comment">//string</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> b = <span class="number">123</span>;</span><br><span class="line"> alert(<span class="keyword">typeof</span> b); <span class="comment">//number</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> c = <span class="literal">true</span>;</span><br><span class="line"> alert(<span class="keyword">typeof</span> c);<span class="comment">//boolean</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> d;</span><br><span class="line"> alert(<span class="keyword">typeof</span> d);<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">"hello"</span>);&#125;;</span><br><span class="line"> alert(<span class="keyword">typeof</span> f);<span class="comment">//function</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> e = <span class="literal">null</span>;</span><br><span class="line"> alert(<span class="keyword">typeof</span> e);<span class="comment">//object</span></span><br></pre></td></tr></table></figure><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p>String 类型用于表示由零或多个 16 位 Unicode 字符组成的字符序列,即字符串。字符串可以由双引号(“)或单引号(’)表示,因此下面两种字符串的写法都是有效的:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var a</span> = <span class="string">"string1"</span>;</span><br><span class="line"><span class="attribute">var b</span> = <span class="string">'string2'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意:不要混合使用单引号或者双引号,要统一,否则会报错.</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"hello"</span>;</span><br><span class="line">     <span class="keyword">var</span> str2 = <span class="string">"world"</span>;</span><br><span class="line">     <span class="keyword">var</span> str3 = 'hehe';</span><br><span class="line">     console.<span class="built_in">log</span>(str1,str2,str3);</span><br><span class="line">     console.<span class="built_in">log</span>(<span class="string">"10"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//typeof 测试数据类型</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">typeof</span> str1);<span class="comment">//string</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//再次使用变量时，不需要var</span></span><br><span class="line">    str1 = <span class="string">"HELLO"</span>;</span><br><span class="line">    console.<span class="built_in">log</span>(str1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串拼接 "+"</span></span><br><span class="line">    <span class="keyword">var</span>  newStr = str1 + str2;</span><br><span class="line">    console.<span class="built_in">log</span>(newStr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他类型如何转换为字符串, toString()!!!!</span></span><br><span class="line">    a = 20;</span><br><span class="line">    console.<span class="built_in">log</span>(a.<span class="keyword">toString</span>());<span class="comment">//直接变为字符串</span></span><br><span class="line">    console.<span class="built_in">log</span>(a.<span class="keyword">toString</span>(2));<span class="comment">//将数字按照2进制转换为字符串， 10100</span></span><br></pre></td></tr></table></figure><p>其他类型装换为字符串的方法<code>toString()</code>,比如:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = 10;</span><br><span class="line">console.<span class="built_in">log</span>(a.<span class="keyword">toString</span>());</span><br><span class="line">console.<span class="built_in">log</span>(a.<span class="keyword">toString</span>(2));<span class="comment">//转换为２进制，“1010”</span></span><br><span class="line">console.<span class="built_in">log</span>(a.<span class="keyword">toString</span>(8));<span class="comment">//转化为8进制 “12”</span></span><br><span class="line">console.<span class="built_in">log</span>(a.<span class="keyword">toString</span>(10));<span class="comment">//转化为10进制 “10”</span></span><br><span class="line">console.<span class="built_in">log</span>(a.<span class="keyword">toString</span>(16));<span class="comment">//转化为16进制 “a”</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = false;</span><br><span class="line">console.<span class="built_in">log</span>(b.<span class="keyword">toString</span>());<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>在不知道要转换的值是不是<code>null</code>或<code>undefined</code>的情况下,还可以使用转型函数<code>String()</code>,这个函数能够将任何类型的值转换为字符串.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(d));<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(c));<span class="comment">//null</span></span><br></pre></td></tr></table></figure><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>boolean类型是<code>ECMAScript</code>中使用最多的一种类型,该类型只有两个字面值:<code>true</code>和<code>false</code>.<br>将一个值转换为其对应的<code>Boolean</code>值,可以调用转型函数<code>Boolean()</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"hellowitwghjjhi"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">""</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">10</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">-10</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">10.123</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/bool1.png" alt><br><img src="http://oujvmc3la.bkt.clouddn.com/bool2.png" alt></p><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>最基本的数值格式是10进制整数,除了以10进制表示外,整数还可以通过8进制或16进制的字面值来表示.比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="number">016</span>;<span class="comment">//8进制使用'0'开头</span></span><br><span class="line"><span class="built_in">console</span>.log(g);<span class="comment">//14   控制台是以10进制输出的</span></span><br><span class="line"><span class="keyword">var</span> k = <span class="number">0x16</span>;<span class="comment">//16进制,使用'0x'开头</span></span><br><span class="line"><span class="built_in">console</span>.log(k);<span class="comment">//22</span></span><br></pre></td></tr></table></figure><h5 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h5><p>所谓浮点数值,就是该数值中必须包含一个小数点,并且小数点后面必须至少有一位数字.</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.123</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">.123</span>; <span class="comment">//不推荐</span></span><br></pre></td></tr></table></figure><p>对于那些极大或极小的数值,可以用<code>e</code>表示法(即科学计数法)表示的浮点数值表示,比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="number">12e2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o);<span class="comment">//1200</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="number">12e-2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p);<span class="comment">//0.12</span></span><br></pre></td></tr></table></figure><p>浮点数的最高精度是17位小数,但是在进行算数计算时其精度远远不如整数.例如:<br><code>0.1</code>+<code>0.2</code>的结果不是<code>0.3</code>,而是<code>0.30000000000000004</code>.这个小小的舍入误差会导致无法测量特定的浮点数值.</p><h5 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h5><p>NaN,即非数值(Not a Number)是一个特殊的数值,这个数值用于表示一个本来要返回数值的操作数,未返回数值的情况(这样就不会抛出错误了).<br>ECMAScript定义了<code>isNaN()</code>函数.这个函数接受一个参数,该参数可以是任何类型,而函数会帮我们确定这个参数是否<code>不是数值</code>.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="name">isNaN</span>(<span class="name">NaN</span>))<span class="comment">;//true  arert这个函数会让浏览器弹出一个提示窗口</span></span><br><span class="line">alert(<span class="name">isNaN</span>(<span class="number">10</span>))<span class="comment">;//false</span></span><br><span class="line">alert(<span class="name">isNaN</span>(<span class="string">"blue"</span>))<span class="comment">;//true</span></span><br><span class="line">alert(<span class="name">isNaN</span>(<span class="string">"10"</span>))<span class="comment">;//false</span></span><br><span class="line">alert(<span class="name">isNaN</span>(<span class="name">true</span>))<span class="comment">;//false</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:可以看出当<code>isNaN()</code>不是数值才会是true.因为有隐式转换的存在才会把<code>&quot;10&quot;</code>或者<code>&quot;&quot;</code>看成数字.</p></blockquote><h4 id="未定义类型-undefined"><a href="#未定义类型-undefined" class="headerlink" title="未定义类型(undefined)"></a>未定义类型(undefined)</h4><p>Undefined 类型只有一个值,即<code>undefined</code>.在使用var声明变量但并未对其加以初始化时,这个变量就是<code>undefined</code>,或者显式的进行<code>undefined</code>赋值操作,比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> t);<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> u = <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> u);<span class="comment">//underfined</span></span><br></pre></td></tr></table></figure><p>对于尚未声明过得变量,只能执行一项操作,即使用<code>typeof</code>操作符检测其数据类型.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//出现错误，因为没有定义变量c</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h4 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h4><p>Null类型是第二个只有一个值的数据类型,这个特殊的值是<code>null</code>.从逻辑角度来看.<code>null</code>值表示一个空对对象指针,而这也是使用<code>typeof</code>操作符检测<code>null</code>值时会返回<code>object</code>的原因,比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>  a);<span class="comment">//object</span></span><br></pre></td></tr></table></figure><h4 id="JAVAScript-函数"><a href="#JAVAScript-函数" class="headerlink" title="JAVAScript 函数"></a>JAVAScript 函数</h4><p>函数对于任何语言来说都是一个核心的概念.通过函数可以封装任意多条语句,而且可以在任何地方.任何时候调用执行.</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kai</span><span class="params">(arg1,arg2)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  return arg1 + arg2;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">k</span> = <span class="title">kai</span><span class="params">(2,3)</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span><span class="params">(k)</span>;</span><span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>js中的函数有个特点:声明提升.<br>函数可以定义在可调用的任何位置,在javascript引擎中解释运行该代码时,会自动将函数提升到该作用域的顶部.例如:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span>();</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">function</span></span> <span class="function"><span class="keyword">fun</span>()&#123;</span></span><br><span class="line"><span class="function">  <span class="title">console</span></span>.log(<span class="string">"fun......"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><p>按作用域分有两种变量:全局变量,局部变量.在JAVAScript中只有函数是用于区分作用域的.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">//局部变量</span></span><br><span class="line">  <span class="comment">//局部变量只能在指定的作用内访问</span></span><br><span class="line">  console.log(<span class="string">"b = "</span>, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量在任意位置都可以访问</span></span><br><span class="line">console.log(<span class="string">"a = "</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JAVAScript一种直译式脚本语言,是一种动态类型.弱类型.基于原型的语言,内置支持类型.&lt;br&gt;它的解释器被称为JAVAScript引擎,为浏览器的一部分,广泛用于客户端的脚本语言,最早是在HTML网页上使用,用来给HTML网页增加动态功能.&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery</title>
    <link href="https://blog.loong.io/2017/08/21/jQuery/"/>
    <id>https://blog.loong.io/2017/08/21/jQuery/</id>
    <published>2017-08-21T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.129Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery是JAVAScript的一个库.<br>jQuery封装了JavaScript常用的功能代码, 提供一种简洁, 快捷的JavaScript设计模式, 优化了HTML文档操作, 事件处理, 动画设计和Ajax交互. 可以说jQuery改变了用户编写JavaScript代码的方式. jQuery设计的宗旨是”Write Less, Do More”, 写更少的代码, 做更多的事情.</p><p>jQuery项目主要包括jQuery Core(核心库), jQuery UI(界面库), Sizzle(CSS选择器)和Qunit(测试套件)四部分, 现在又增加了一个新的部分就是 jQuery Mobile(手机端).</p><h3 id="引入jQuery文件库"><a href="#引入jQuery文件库" class="headerlink" title="引入jQuery文件库"></a>引入jQuery文件库</h3><h4 id="引入本地文件"><a href="#引入本地文件" class="headerlink" title="引入本地文件"></a>引入本地文件</h4><p>下载<code>jQuery</code>框架文件.<a href="http://www.bootcdn.cn/jquery/" target="_blank" rel="noopener">下载</a><br>并不需要任何安装,仅需要使用<code>&lt;script&gt;</code>文件导入标记.如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用CDN-引入jQuery-必须有网络"><a href="#使用CDN-引入jQuery-必须有网络" class="headerlink" title="使用CDN 引入jQuery(必须有网络)"></a>使用CDN 引入jQuery(必须有网络)</h4><p>同样这里可以导入<a href="http://www.bootcdn.cn/jquery/" target="_blank" rel="noopener">导入</a>,只是将<code>src</code>换成网络地址.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.0.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:引入文件,该<code>script</code>中不要填写任何代码.</p></blockquote><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p><a href="http://www.css88.com/jqapi-1.9/" target="_blank" rel="noopener">这里</a>有关于jQuery的中文文档.</p><p>根据所获页面中的元素的不同,可能将jQuery选择器分为:基本选择器,层次选择器,过滤选择器,表单选择器四大类.其中,在过滤选择器中又可以分为:简单过滤器,内容选择器,可见性过滤选择器,属性过滤性选择器,子元素过滤性选择器,表单对象属性过滤选择器.</p><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><p>基本选择器是jQuery中使用最频繁的选择器, 它由元素Id, Class, 元素名, 多个选择符组成, 通过基本选择器可以实现大多数页面元素的查找, 其详细说明如表:</p><p>|———|——-|——–|<br>|选择器|功能|返回值|<br>|#id|根据给定ID匹配一个元素|单个元素|<br>|element|根据给定的元素名匹配所有元素|元素集合|<br>|.class|根据给定的类匹配对象|元素集合|<br>|*|匹配所有元素|元素集合|<br>|selector1, selectorN|每一个选择器匹配到的元素合并后一起返回|元素集合|</p><h4 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h4><p>层次选择器通过DOM元素间的关系获取元素,其主要的层次关系包括后代,父子,相邻,兄弟关系,通过其中某类关系可以方便快捷地定位元素.</p><p>|——|——|——|——|——|——-|<br>|选择器|    CSS 模式|    jQuery模式|    描述|    功能|<br>|后代选择器|    ul li a {}    |\$(‘ul li a’)|    获取追溯到的多个 DOM 对象|    根据祖先元素匹配所有的后代元素|<br>|子选择器|    div &gt; p {}    |\$(‘div p’)|    只获取子类节点的多个 DOM 对象|    根据父元素匹配所有的子元素|<br>|next 选择器（相连）|    div + p {}    |\$(‘div + p’)|    只获取某节点后一个同级DOM对象|    匹配所有紧接在prev元素后的相邻元素|<br>|nextAll 选择器(之后所有)|    div ~ p {}|    \$(‘div ~ p’)|    获取某节点后面所有同级DOM对象|    匹配prev元素之后的所有兄弟元素|</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    jQuery 等价于 $ 符号</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log($("div"));</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"div"</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"div.one"</span>).css(<span class="string">"color"</span>, <span class="string">"green"</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#lists"</span>).css(<span class="string">"font-size"</span>, <span class="string">"50px"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    层级选择器和css中是一样的</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 子选择器 &gt;</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".three &gt; div"</span>).css(<span class="string">"border"</span>, <span class="string">"1px solid red"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 相邻下一个兄弟选择器 +</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".four + div "</span>).css(<span class="string">"font-size"</span>, <span class="string">"50px"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//后边的所有符合条件的兄弟</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".four ~ div"</span>).css(<span class="string">"color"</span>, <span class="string">"green"</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:层次选择器对于节点的层次都是有要求的,比如子选择器,有子节点才可以被选择到,孙子节点和重孙子节点都无法访问到.next选择器必须是同一层次的后一个,nextAll选择器必须是同一层次的后N个,不在同一层次就无法访问到.</p></blockquote><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>|——-|——-|<br>|选择器|描述|<br>|<code>[name=one]</code>|选择指定属性是给定值的元素|<br>|<code>[name|=one]</code>|选择指定属性值等于给定字符串或以该字符串为前缀（该字符串后跟一个连字符“-” ）的元素。|<br>|<code>[name$=one]</code>|选择指定属性是以给定值结尾的元素。这个比较是区分大小写的。|<br>|<code>[name^=one]</code>|选择指定属性是以给定字符串开始的元素|</p><h4 id="子元素筛选"><a href="#子元素筛选" class="headerlink" title="子元素筛选"></a>子元素筛选</h4><p>|——–|———|<br>|选择器|描述|<br>|<code>:first-child</code>|选择所有父级元素下的第一个子元素。|<br>|<code>:nth-child()</code>|选择的他们所有父元素的第n个子元素。|<br>|<code>:nth-of-type()</code>|选择同属于一个父元素之下，并且标签名相同的子元素中的第n个。|</p><p><code>:first-child</code>没有参数.<br><code>:nth-child()</code>每个相匹配子元素的索引值，从1开始，也可以是字符串 even 或 odd，或一个方程式( 例如 :nth-child(even), :nth-child(4n) )。<br><code>:nth-type-child()</code>每个相匹配子元素的索引值，从1开始，也可以是字符串 even 或 odd，或一个方程式( 例如 :nth-of-type(even), :nth-of-type(4n))。</p><h3 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h3><p><code>.addClass()</code>,<code>.css()</code>,<code>.removeClass()</code>,<code>.toggle()</code></p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.back</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        height: 500px;</span></span><br><span class="line"><span class="undefined">        background: pink;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.color_red</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>hjjhdjhkjhk<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>hjjhdjhkjhk<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>hjjhdjhkjhk<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>hjjhdjhkjhk<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $(".one").css("width", "500px");</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $(".one").css("height", "500px");</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $(".one").css("background", "pink");</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//一次性设置多个</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one"</span>).css(&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="string">"width"</span>: <span class="string">"500px"</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="string">"height"</span>: <span class="string">"500px"</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="string">"background"</span>: <span class="string">"pink"</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//使用addClass来添加样式最方便</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one"</span>).addClass(<span class="string">"back color_red"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//使用removeClass来移除样式</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one"</span>).removeClass(<span class="string">"color_red back"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//有类就删除，没有就添加</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one"</span>).toggleClass(<span class="string">"back"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//获取样式</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">".one"</span>).css(<span class="string">"width"</span>));<span class="comment">//获取width</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">".one"</span>).css(<span class="string">"height"</span>));<span class="comment">//获取height</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">".one"</span>).css(<span class="string">"background-color"</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//返回一个包含指定属性的对象</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">".one"</span>).css([<span class="string">"width"</span>, <span class="string">"height"</span>, <span class="string">"background-color"</span>]));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>链式调用<br>实现：jQuery中的方法每次都返回选择的符合条件的jQuery对象本身</p></blockquote><p>实例:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built-in">log</span>(<span class="symbol">$</span>(<span class="string">".one"</span>).addClass(<span class="string">"back"</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>).css([<span class="string">"width"</span>, <span class="string">"height"</span>, <span class="string">"background-color"</span>]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于以上代码</span></span><br><span class="line">console.<span class="built-in">log</span>(<span class="symbol">$</span>(<span class="string">".one"</span>));</span><br><span class="line">console.<span class="built-in">log</span>(<span class="symbol">$</span>(<span class="string">".one"</span>).addClass(<span class="string">"back"</span>));</span><br><span class="line">console.<span class="built-in">log</span>(<span class="symbol">$</span>(<span class="string">".one"</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>));</span><br><span class="line">console.<span class="built-in">log</span>(<span class="symbol">$</span>(<span class="string">".one"</span>).css([<span class="string">"width"</span>, <span class="string">"height"</span>, <span class="string">"background-color"</span>]));</span><br></pre></td></tr></table></figure><h3 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h3><p>DOM操作又被称为节点操作,标签操作,元素操作.利用这个我们可以很容易的操作HTMl文档本身的结构.DOM操作将学习改变页面的结构的种种方法.</p><h4 id="DOM插入-内部"><a href="#DOM插入-内部" class="headerlink" title="DOM插入(内部)"></a>DOM插入(内部)</h4><ul><li><code>.append()</code>描述: 在每个匹配元素里面的末尾处插入参数内容</li><li><code>.prepend()</code>描述: 将参数内容插入到每个匹配元素的前面（元素内部）</li><li><code>.appendTo()</code>描述:<code>.append()</code>和<code>.appendTo()</code>两种方法功能相同，主要的不同是语法——内容和目标的位置不同。对于<code>.append()</code>, 选择表达式在函数的前面，参数是将要插入的内容。对于<code>.appendTo()</code>刚好相反，内容在方法前面，无论是一个选择器表达式 或创建作为标记上的标记，它都将被插入到目标容器的末尾。</li><li><code>.prependTo()</code>描述:<code>.prepend()</code>和<code>.prependTo()</code>实现同样的功能，主要的不同是语法，插入的内容和目标的位置不同。 对于 <code>.prepend()</code> 而言，选择器表达式写在方法的前面，作为待插入内容的容器，将要被插入的内容作为方法的参数。而 <code>.prependTo()</code> 正好相反，将要被插入的内容写在方法的前面，可以是选择器表达式或动态创建的标记，待插入内容的容器作为参数。</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内部插入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第二个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="string">".one"</span>).append(<span class="string">"&lt;span&gt;这是一个span标签&lt;/span&gt;"</span>);</span></span><br><span class="line"><span class="javascript">      $(<span class="string">".one"</span>).prepend(<span class="string">"&lt;h1&gt;这是一个h1标签&lt;/h1&gt;"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="string">"&lt;h2&gt;这是一个h2标签&lt;/h2&gt;"</span>).appendTo(<span class="string">".two"</span>);</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"&lt;h3&gt;这是一个h3标签&lt;/h3&gt;"</span>).prependTo(<span class="string">".two"</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">      // $("<span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>") 可以理解为创建一个元素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> newElement = $(<span class="string">"&lt;a href='https://baidu.com'&gt;百度&lt;/a&gt;"</span>);</span></span><br><span class="line"><span class="actionscript">      newElement.appendTo(<span class="string">".two"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 当然先创建一个对象,用对象插入也是支持的.其他的类似!</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页显示如下:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/2017-08-23%2018-03-03%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt></p><h4 id="DOM插入-外部"><a href="#DOM插入-外部" class="headerlink" title="DOM插入(外部)"></a>DOM插入(外部)</h4><ul><li><code>.after()</code>:在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点。</li><li><code>.before()</code>:根据参数设定，在匹配元素的前面插入内容（译者注：外部插入）</li><li><code>.insertAfter()</code>: <code>.after()</code>和<code>.insertAfter()</code> 实现同样的功能。主要的不同是语法——特别是（插入）内容和目标的位置。 对于 <code>.after()</code>, 选择表达式在函数的前面，参数是将要插入的内容。对于 <code>.insertAfter()</code>, 刚好相反，内容在方法前面，它将被放在参数里元素的后面。</li><li><code>.insertBefore()</code>: <code>.before()</code>和<code>.insertBefore()</code>实现同样的功能。主要的区别是语法——内容和目标的位置。 对于 <code>.before()</code>，选择表达式在函数前面，内容作为参数，而<code>.insertBefore()</code>刚好相反，内容在方法前面，它将被放在参数里元素的前面。</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>外部插入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是two里面的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one"</span>).after(<span class="string">"&lt;h1&gt;这是h1&lt;/h1&gt;"</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one"</span>).before(<span class="string">"&lt;h2&gt;这是h2&lt;/h2&gt;"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"&lt;h3&gt;这是h3&lt;/h3&gt;"</span>).insertAfter(<span class="string">".two"</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"&lt;h4&gt;这是h4&lt;/h4&gt;"</span>).insertBefore(<span class="string">".two"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页显示如下:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/2017-08-23%2018-23-03%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt></p><blockquote><p>这些添加的元素是和div是同一级元素,而不是包含在div里面.</p></blockquote><p><code>.html()</code>属性演示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one"</span>).html(<span class="string">"&lt;span&gt;这是p&lt;/span&gt;"</span>);<span class="comment">//在div中添加一个span标签.</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one &gt; span"</span>).html(<span class="string">"xxx"</span>);<span class="comment">//将span标签中的内容改为xxx.</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DOM移除"><a href="#DOM移除" class="headerlink" title="DOM移除"></a>DOM移除</h4><ul><li><code>.detach()</code>描述: 从DOM中去掉所有匹配的元素。</li><li><code>.remove()</code>描述:将匹配元素集合从DOM中删除。（注：同时移除元素上的事件及 jQuery 数据。）</li><li><code>.empty()</code>描述: 从DOM中移除集合中匹配元素的所有子节点</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM移除<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one1"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one1"</span>&gt;</span>yyy<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one1 one2"</span>&gt;</span>kkk<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one2"</span>&gt;</span>ooo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// $('.one1.one2').remove();//将kkk移除</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// $('.one2').remove(".one1");//将kkk移除</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// $('.one').empty();//全部删除,但是div还存在.删除所有子节点.</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//保存一下已经删除的元素,便于将来使用!!!</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> temp = $(<span class="string">".one &gt; div"</span>).detach();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(temp);<span class="comment">//已经删除的元素</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DOM插入-包裹"><a href="#DOM插入-包裹" class="headerlink" title="DOM插入,包裹"></a>DOM插入,包裹</h4><ul><li><code>.wrap()</code>描述: 在集合中匹配的每个元素周围包裹一个HTML结构。</li><li><code>.wrapAll()</code>描述: 在集合中所有匹配元素的外面包裹一个HTML结构。</li><li><code>.warpInner()</code>描述: 在匹配元素里的内容外包一层结构。</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>包裹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Good bye<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>two<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>two<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="string">".one &gt; p"</span>).wrapInner(<span class="string">"&lt;h1&gt;&lt;/h1&gt;"</span>);<span class="comment">//给符合条件的元素都包裹,在元素的内部包裹</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">".two &gt; p"</span>).wrap(<span class="string">"&lt;h3&gt;&lt;/h3&gt;"</span>);<span class="comment">//给符合条件的元素都包裹,在元素的外部包裹</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">".three &gt; li"</span>).wrapAll(<span class="string">"&lt;ul&gt;&lt;/ul&gt;"</span>);<span class="comment">//整体包裹</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><ul><li><code>.replaceAll()</code>描述: 用集合的匹配元素替换每个目标元素。</li><li><code>.replaceWith()</code>:<code>.replaceAll()</code>和<code>.replaceWith()</code>功能类似，但是目标和源相反</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>替换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>china<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="handlebars"><span class="xml">      // $(".one &gt; p").replaceWith('<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>');</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">'&lt;h2&gt;hello&lt;/h2&gt;'</span>).replaceAll(<span class="string">'.one &gt; p'</span>);</span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="undefined">      这两个替换效果是一样的,就是把所有one下的p全部替换掉.</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><ul><li><code>.click()</code>鼠标左击</li><li><code>.dblclick()</code>鼠标左双击</li><li><code>.contextmenu()</code>鼠标右击</li><li><code>.mouseover()</code>鼠标放上去</li><li><code>.mouseout()</code>鼠标离开</li><li><code>.hover(1,2)</code>可以定义两个函数,1为鼠标放上去,2为鼠标离开.2为可选,如果没有1,要用null代替占位.</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>鼠标事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"单击......"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//函数作为参数时，通常称该函数为回调函数(在将来的某个时刻会被执行)</span></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    click内部的函数作为回调函数使用，又称为事件处理函数</span></span><br><span class="line"><span class="undefined">    此处只是注册了一个事件处理函数，并没有执行该函数。</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    事件可以添加多个处理函数。</span></span><br><span class="line"><span class="undefined">    当触发事件的时候，处理函数的执行顺序是按照注册顺序来的</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one"</span>).dblclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"双击......."</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//双击事件触发,就会触发单击事件两次.</span></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).contextmenu(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"鼠标右击......"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//document代表整个页面,也就是说你在这个页面的任意位置右击就会触发函数.</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $(".one").mouseover(function()&#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   $(".one").css("background-color","blue");</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;);//鼠标悬停事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $(".one").mouseout(function()&#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   $(".one").css("background-color","green");</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;);//鼠标离开事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//如果觉得上面太麻烦,可以使用hover</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".one"</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">".one"</span>).css(<span class="string">"background-color"</span>,<span class="string">"blue"</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">".one"</span>).css(<span class="string">"background-color"</span>,<span class="string">"green"</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;);<span class="comment">//这个hover实现了mouseover和mouseout的双重效果.</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul><li><code>.keydown()</code>键盘按键被按下,能识别所有键</li><li><code>.keypress()</code>键盘按键被按下,不能识别功能键</li><li><code>.keyup()</code> 键盘按键弹起</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>键盘按键事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'按键按下.....'</span>+ e.which);</span></span><br><span class="line"><span class="actionscript">      &#125;);<span class="comment">//document是整个页面</span></span></span><br><span class="line"><span class="javascript">      $(<span class="built_in">document</span>).keypress(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"按键按下------"</span>+ e.which);</span></span><br><span class="line"><span class="actionscript">      &#125;);<span class="comment">//功能键不能识别</span></span></span><br><span class="line"><span class="javascript">      $(<span class="built_in">document</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"按键弹起......"</span>+ e.which);</span></span><br><span class="line"><span class="actionscript">      &#125;);<span class="comment">//e.which会显示按键的编码</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><ul><li><code>.on()</code>描述: 在选定的元素上绑定一个或多个事件处理函数。</li><li><code>.off()</code>描述: 移除一个事件处理函数。</li><li><code>.trigger()</code>描述: 根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为。</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>通用事件绑定方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#divId</span> &#123;</span></span><br><span class="line"><span class="undefined">      width: 200px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">      background: blue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span>&gt;</span>按键<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span> 注销<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="built_in">document</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"单击....."</span>);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//注册自定义事件</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">"#divId"</span>).on(<span class="string">"changeColor"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#divId"</span>).css(<span class="string">"background-color"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//btn2单击时，触发changeColor事件</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">"#btn2"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//trigger触发自定义的事件</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#divId"</span>).trigger(<span class="string">"changeColor"</span>);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="string">"#btn"</span>).off(<span class="string">'click'</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//使用off解除绑定的事件处理函数</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//只填写 事件名称，会将该事件上的所有处理函数全都解除绑定了</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// $("#btn").off('click');</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//移除指定处理函数</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h3><ul><li>页面鼠标右键菜单.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      ul li &#123;</span></span><br><span class="line"><span class="undefined">        list-style: none;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-id">#menu</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 250px;</span></span><br><span class="line"><span class="undefined">        border: 1px solid red;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-id">#menu</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 30px;</span></span><br><span class="line"><span class="undefined">        line-height: 30px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>skjgkdjhkj<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>skjgkdjhkj<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>skjgkdjhkj<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>skjgkdjhkj<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>skjgkdjhkj<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>skjgkdjhkj<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).contextmenu(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//获得鼠标坐标</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> x = e.pageX;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> y = e.pageY;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//去掉浏览器的默认右键</span></span></span><br><span class="line"><span class="undefined">      e.preventDefault();</span></span><br><span class="line"><span class="undefined">      e.stopPropagation();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">     <span class="comment">//显示菜单</span></span></span><br><span class="line"><span class="undefined">     /*</span></span><br><span class="line"><span class="undefined">     菜单的边界问题，需要解决？？？？？</span></span><br><span class="line"><span class="undefined">     */</span></span><br><span class="line"><span class="javascript">     $(<span class="string">"#menu"</span>).css(&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="string">"display"</span>:<span class="string">"block"</span>,</span></span><br><span class="line"><span class="actionscript">       <span class="string">"top"</span>: y + <span class="string">"px"</span>,</span></span><br><span class="line"><span class="actionscript">       <span class="string">"left"</span>: x + <span class="string">"px"</span></span></span><br><span class="line"><span class="undefined">     &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>做一个表格,做到一个按键添加一行,每一行后面有一个删除按键,按下删除按键会让本行表格删除.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#add</span> &#123;</span></span><br><span class="line"><span class="undefined">      width: 100px;</span></span><br><span class="line"><span class="undefined">      height: 30px;</span></span><br><span class="line"><span class="undefined">      line-height: 30px;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      border: none;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#00a6ac</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.stu</span> &#123;</span></span><br><span class="line"><span class="undefined">      width: 400px;</span></span><br><span class="line"><span class="undefined">      margin: 20px auto;</span></span><br><span class="line"><span class="undefined">      border: 1px solid gray;</span></span><br><span class="line"><span class="undefined">      border-collapse: collapse;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.stu</span> <span class="selector-tag">td</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.stu</span> <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="undefined">      border: 1px solid gray;</span></span><br><span class="line"><span class="undefined">      height: 30px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.stu</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="undefined">      text-decoration: underline;</span></span><br><span class="line"><span class="undefined">      color: red;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="comment">/*鼠标为小手样式*/</span></span></span><br><span class="line"><span class="undefined">      cursor: pointer;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"add"</span>&gt;</span>添加一行<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"stu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学员信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> start = <span class="number">18</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#add"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      $(".stu tbody").append("<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>" + start + "<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>");</span></span></span><br><span class="line"><span class="undefined">      start = start + 1;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//  添加删除事件</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//last是获得所有td中的最后一个！！！！！</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log($(<span class="string">".stu tr td:last"</span>).length);<span class="comment">//得到选中的个数 1</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="string">".stu tr td:last"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// $(this)就是当前注册事件的元素</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//找到父元素</span></span></span><br><span class="line"><span class="javascript">        $(<span class="keyword">this</span>).parent().remove();</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jQuery是JAVAScript的一个库.&lt;br&gt;jQuery封装了JavaScript常用的功能代码, 提供一种简洁, 快捷的JavaScript设计模式, 优化了HTML文档操作, 事件处理, 动画设计和Ajax交互. 可以说jQuery改变了用户编写JavaScri
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://blog.loong.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>CSS入门</title>
    <link href="https://blog.loong.io/2017/08/15/CSS/"/>
    <id>https://blog.loong.io/2017/08/15/CSS/</id>
    <published>2017-08-15T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.112Z</updated>
    
    <content type="html"><![CDATA[<p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。<br>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><ol><li>没有样式的情况下，网页结构组织有序，并且有良好的可读性。</li><li>便于搜索引擎优化SEO,（提高网站流量，提高搜索引擎的排名）</li><li>尽量使用语义化的标签</li></ol><h3 id="语义化原则"><a href="#语义化原则" class="headerlink" title="语义化原则"></a>语义化原则</h3><ol><li>重语义的地方多用有语义的标签,比如<code>h</code>和<code>p</code>等等,少用没有语义的标签比如<code>div</code>.<code>span</code>等等.</li><li>如果有的地方可以用<code>p</code>又可以用<code>div</code>,优先选用<code>p</code>标签(结构更清晰,特别是文字段落).</li><li>少用纯样式标签,可以用CSS样式.如果有强调的地方,可以考虑<code>strong</code>.<code>em</code>等有强调语义的标签.</li></ol><h3 id="CSS的作用"><a href="#CSS的作用" class="headerlink" title="CSS的作用"></a>CSS的作用</h3><ul><li>CSS的主要目的:控制网页中元素的样式</li><li>CSS可以让我们从HTML结构和样式分离出来.</li><li>CSS可以让我们专注代码.代码更少,语义更好,搜索更容易.</li></ul><h3 id="CSS规则"><a href="#CSS规则" class="headerlink" title="CSS规则"></a>CSS规则</h3><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下:<br>选择器{属性1:属性值1; 属性2:属性值2; 属性3:属性值3;}</p><p>在上面的样式规则中，选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。其中，属性和属性值以“键值对”的形式出现，属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。属性和属性值之间用英文“:”连接，多个“键值对”之间用英文“;”进行区分。</p><p>比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标签类型"><a href="#标签类型" class="headerlink" title="标签类型"></a>标签类型</h3><p>HTML标记一般分为块标记和行内标记两种类型，它们也称块元素和行内元素。</p><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>行内元素不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。<br>常见的行内元素有<code>&lt;strong&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code>标记最典型的行内元素。<code>&lt;span&gt;</code>就是一个容器,没有任何含义.</p><h4 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h4><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。<br>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>标记是最典型的块元素.<br><code>&lt;div&gt;</code>也是一个容器,没有任何含义.</p><blockquote><p> 块级元素默认的宽度和父元素一样,width,height都可以使用百分比设置，但是百分比都是相对于父元素</p></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在行内元素中有几个特殊的标签<code>&lt;img&gt;</code>.<code>&lt;input&gt;</code>.<code>&lt;td&gt;</code>,可以对他们设置宽高和对齐属性,有些资料可能会称他们为行内块元素.</p><blockquote><p> 标签分类:<br>   块元素,占据整行<br>   行元素，根据内容填充<br>   块，行是可以相互转换的！！<br> 元素嵌套:<br>     块级元素可以嵌套行元素，也可以嵌套块元素<br>     行元素，只能嵌套行元素，不能嵌套块元素</p></blockquote><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器，CSS基础(还有很多)选择器有四种。<br>如下:</p><ul><li>标签选择器</li><li>类选择器</li><li>id选择器</li><li>通配选择器</li></ul><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>标记选择器是指用HTML标记名称作为选择器，按标记名称分类，为页面中某一类标记指定统一的CSS样式。其基本语法格式如下：<br><code>标签名 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></p><p>标记选择器最大的优点是能快速为页面中同类型的标记统一样式，同时这也是他的缺点，不能设计差异化样式<br>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标签选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      p&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：<br><code>.className {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code><br>类选择器最大的优势是可以为元素对象定义单独或相同的样式。<br>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.kai</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"kai"</span>&gt;</span>王凯<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>id选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：<br><code>idName {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code><br>该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。<br>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#t</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"t"</span>&gt;</span>我是中国人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h4><p>通配符选择器用“<em>”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下:<br>`</em> {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }`</p><p>比如：清除当前文档中所有元素的外边距和内边距<br>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>通配选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">*&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>打招呼<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello,大家好!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>后代选择器是以空格作为分隔符的.</p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>后代选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">div p&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的实例中,其中前面3个hello是黄色的,由此可以看出,后代选择器,不管后面的是前面的儿子辈还是孙子辈,只要是后代就会选择.当然后代选择器还能与其他类型的选择器连用.</p><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><p>选择两个集合中的共同的部分,交集选择器中间是连续写，没有空格.<br>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>交集选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-class">.cla</span><span class="selector-id">#py</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">      font: 40px "宋体";</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"cla"</span> <span class="attr">id</span>=<span class="string">"py"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>对多个集合中的所有的内容合并在一起进行设置。并集以“,”作为分隔符<br>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>并集选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    p , h1 &#123;</span></span><br><span class="line"><span class="undefined">      color: blue;</span></span><br><span class="line"><span class="undefined">      font-size: 30px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>大哥,我错了我<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>伪类选择器有很多种,现在列出关于鼠标的几个伪类:</p><ul><li>Link:标签原本样式（如果在这个属性中设置样式优先级要高于标签选择器）</li><li>Visited:标签被访问以后的样式。</li><li>Hover:鼠标悬停在标签上会触发的样式。</li><li>Active:当点击（激活）标签时的样式。</li></ul><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪类<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      a &#123;</span></span><br><span class="line"><span class="undefined">        font-size: 50px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="comment">/*伪类，link初始样式*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line"><span class="undefined">        color: black;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="comment">/* 鼠标悬停的效果*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: yellow;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="comment">/*激活状态，鼠标按下*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: green;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="comment">/*访问过的链接*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: pink;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: purple;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: black;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="undefined">      所有的元素都有link,visited,,hover,active伪类.</span></span><br><span class="line"><span class="undefined">      但是只有a,才都可以设置。其他元素hover,active有效。</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      考虑到浏览器的兼容性问题：</span></span><br><span class="line"><span class="undefined">      这四个伪类在a元素要想都有效果，需要按照顺序：link  visited hover  active</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https:/www.tmall.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>div的颜色变化<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS三种样式类型"><a href="#CSS三种样式类型" class="headerlink" title="CSS三种样式类型"></a>CSS三种样式类型</h3><h4 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h4><p>所有的样式都是在写标签的内部，只能作用在这个标签上面。（一般情况下不建议使用，我们单独学习css的目的就是页面的结构和样式的分离,我们不能反其道而行之。<br><code>&lt;p style=&quot;color:red;&quot;&gt;这是CSS行内样式&lt;/p&gt;</code></p><h4 id="嵌套样式"><a href="#嵌套样式" class="headerlink" title="嵌套样式"></a>嵌套样式</h4><p>写在head中，并且用style标签包含。这也是我们比较常用的一种。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">p, a &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/resource/k111/前端基础知识/class-003/#"</span>&gt;</span>a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h4><p>将CSS编写为单独的文件,需要在head中引入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./test.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>06.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS文件:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"><span class="comment">/* 指定编码格式*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><ol><li>如果通过开发人员工具来看拥有外部样式的页面的时候，那么我们会发现请求至少有两条：其中一条页面主体内容的请求，另一条应该就是外部样式的请求。</li><li>如果页面上有外部样式的请求，会跟主页面的解析同时进行。</li></ol><h4 id="三种样式类型对比"><a href="#三种样式类型对比" class="headerlink" title="三种样式类型对比"></a>三种样式类型对比</h4><p><img src="http://oujvmc3la.bkt.clouddn.com/css.jpg" alt></p><h3 id="CSS的三大特性"><a href="#CSS的三大特性" class="headerlink" title="CSS的三大特性"></a>CSS的三大特性</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>就是页面中的一些标签的属性可以继承给子标签,但是继承还是限制的,比如a的颜色，块级元素的高度等等。<br>一般情况下，所有的与文字图片的大小样式相当的属性都可以继承:font-x,line-x,一些标签的宽高也可以继承。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"> div &#123;</span></span><br><span class="line"><span class="undefined">    font-size: 10px;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>继承div的字体设置<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h4><p>页面的样式是多项属性设置进行叠加的结果。对一个元素不同样式的多次设置会进行效果叠加，同一样式会覆盖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"> div p &#123;</span></span><br><span class="line"><span class="undefined">    color: red;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="css"> <span class="selector-class">.p1</span> &#123;</span></span><br><span class="line"><span class="undefined">    font-size: 20px;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span>层叠效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css的优先级问题，重点!!!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">     <span class="selector-id">#oneId</span> &#123;</span></span><br><span class="line"><span class="undefined">       color: green;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">     <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">     p &#123;</span></span><br><span class="line"><span class="undefined">       /*</span></span><br><span class="line"><span class="undefined">       !important 用于确定最高优先级</span></span><br><span class="line"><span class="undefined">       */</span></span><br><span class="line"><span class="undefined">       color: yellow !important;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">     <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="undefined">       color: purple;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">     <span class="selector-id">#twoId</span> &#123;</span></span><br><span class="line"><span class="undefined">       color: pink;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">     <span class="selector-class">.three-1</span> &#123;</span></span><br><span class="line"><span class="undefined">       color: red;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">     <span class="selector-tag">div</span><span class="selector-class">.three-1</span> &#123;</span></span><br><span class="line"><span class="undefined">       color: yellow;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">     <span class="selector-tag">div</span> <span class="selector-class">.three-2</span> &#123;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">color</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    css的选择器规则，是按照从右到左寻找的！！！！！</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    优先级的计算公式(在元素本身上)：</span></span><br><span class="line"><span class="comment">    !important &gt; 行内style &gt; id &gt; class &gt; 标签 &gt; 继承 &gt; 浏览器的默认</span></span><br><span class="line"><span class="comment">    计算公式：在同一个css的规则中,默认优先级为0</span></span><br><span class="line"><span class="comment">     出现一次 标签，优先级加 1</span></span><br><span class="line"><span class="comment">     出现一次 class，优先级加 10</span></span><br><span class="line"><span class="comment">     出现一次 id ,优先级加 100</span></span><br><span class="line"><span class="comment">    优先级相同，最后的设置有效</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"oneId"</span>&gt;</span></span><br><span class="line">      div元素</span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"two"</span> <span class="attr">id</span>=<span class="string">"twoId"</span>  <span class="attr">style</span>=<span class="string">"color:brown;"</span>&gt;</span>请问p元素是什么颜色？？？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three-1 three-2"</span>&gt;</span>div的颜色？？？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS样式属性"><a href="#CSS样式属性" class="headerlink" title="CSS样式属性"></a>CSS样式属性</h3><h4 id="font字体属性"><a href="#font字体属性" class="headerlink" title="font字体属性"></a>font字体属性</h4><p>font-size</p><p>font-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。</p><p><img src="http://oujvmc3la.bkt.clouddn.com/font-size.jpg" alt></p><p>font-family:字体</p><p>font-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：<br>p {font-family: “宋体”,“微软雅黑”;}<br>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p><p>注意以下几点：</p><ul><li>各种字体之间必须使用英文状态下的逗号隔开。</li><li>中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</li><li>如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: “Times New Roman”;。</li><li>尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</li><li>使用unicode对中文字体进行编码。<br>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。为此，在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。</li></ul><p><img src="http://oujvmc3la.bkt.clouddn.com/unicode.jpg" alt></p><p>font-weight</p><p>font-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。</p><p>font-style</p><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：<br>normal：默认值，浏览器会显示标准的字体样式。<br>italic：浏览器会显示斜体的字体样式。<br>oblique：浏览器会显示倾斜的字体样式。</p><h4 id="font综合设置"><a href="#font综合设置" class="headerlink" title="font综合设置"></a>font综合设置</h4><p>font属性用于对字体样式进行综合设置，其基本语法格式如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  <span class="built_in">font</span>: <span class="built_in">font</span>-<span class="built_in">style</span> <span class="built_in">font</span>-weight <span class="built_in">font</span>-size/line-<span class="built_in">height</span> <span class="built_in">font</span>-family;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用font属性时，必须按上面语法格式中的顺序书写，各个属性以空格隔开。<br>其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</p><h3 id="文本外观属性"><a href="#文本外观属性" class="headerlink" title="文本外观属性"></a>文本外观属性</h3><h4 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h4><p>color属性用于定义文本的颜色，其取值方式有如下3种：<br>预定义的颜色值，如red，green，blue等。<br>十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。<br>RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。<br>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p><blockquote><p>注意: Atom有个插件<code>color-picker</code>插件,可以轻松实现颜色的选择.</p></blockquote><h4 id="字间距-letter-spacing"><a href="#字间距-letter-spacing" class="headerlink" title="字间距 letter-spacing"></a>字间距 letter-spacing</h4><p><code>letter-sapcing</code>属性用于定义字符字间距,所谓字符间距就是字符与字符之间的空白.其属性值为不同单位的数值,允许使用负值,默认为normal.</p><h4 id="单词间距-word-spacing"><a href="#单词间距-word-spacing" class="headerlink" title="单词间距 word-spacing"></a>单词间距 word-spacing</h4><p><code>word-spacing</code>属性用于定义英文单词之间的间距,对中文字符无效.和<code>letter-spacing</code>一样,其属性值可为不同单位的数值,允许使用负值,默认为normal.<br><code>word-spacing</code>和<code>letter-spacing</code>均可对英文进行设置,不同的是<code>letter-spacing</code>定义的是字母之间的间距,而<code>word-spacing</code>定义的为英文单词之间的间距.</p><h4 id="行间距line-height"><a href="#行间距line-height" class="headerlink" title="行间距line-height"></a>行间距line-height</h4><p><code>line-height</code>属性用于设置行间距,就是行与行之间的距离,即字符的垂直距离,一般称之为行高.<code>line-height</code>常用的属性值单位有三种,分别为像素px,相对值em和百分比%,实际工作中使用最多的就是像素px.</p><p><img src="http://oujvmc3la.bkt.clouddn.com/line-height.jpg" alt></p><p>行高就是基线与基线之间的距离.<br>设置方式:</p><ol><li>使用百分比,那么这个行高的基数为当前标签字体的大小.<br><code>line-height: 120%;</code>表示行高为当前字体的1.2倍,子元素会继承父元素计算出的行高.</li><li>直接使用px进行绝对设置<br> <code>line-height: 30px;</code>直接设置当前行高为30px.</li><li>使用em进行相对设置<br> <code>line-height: 1.5em;</code>设置行高为当前字体的1.5倍,子元素会继承父元素计算出来的行高.</li><li>使用不带单位的数值<br> <code>line-height: 1.5;</code>设置行高因子为1.5,子元素会继承因子,而不是父元素的行高.</li></ol><blockquote><p>其行内元素设置垂直对齐一般将行高设置为高度.</p></blockquote><h4 id="文本装饰-text-decoration"><a href="#文本装饰-text-decoration" class="headerlink" title="文本装饰 text-decoration"></a>文本装饰 text-decoration</h4><p><code>text-decoration</code>属性用于设置文本的下划线,上划线,删除线等装饰效果,其可用属性值如下:</p><ul><li><code>none</code>:没用装饰(正常文本默认值),一般用于去除<code>a</code>标签的下划线.</li><li><code>underline</code>:下划线.</li><li><code>overline</code>:上划线.</li><li><code>line-through</code>:删除线.</li></ul><p>另外,<code>text-decoration</code>后可以赋多个值,用于给文本添加多种显示效果,例如希望文字同时有删除线和下划线效果,就可以将<code>underline</code>和<code>line-through</code>同时赋给<code>text-decoration</code>.</p><h4 id="水平对齐方式text-align"><a href="#水平对齐方式text-align" class="headerlink" title="水平对齐方式text-align"></a>水平对齐方式text-align</h4><p><code>text-align</code>属性用于设置文本内容的水平对齐,相当于html中的align对齐属性.其可用属性值如下:</p><ul><li><code>left</code>:左对齐(默认值)</li><li><code>right</code>:右对齐</li><li><code>center</code>:居中对齐</li></ul><blockquote><p>其行内元素设置水平对齐一般使用这种方法.</p></blockquote><h4 id="垂直对齐方式vertical-align-适用于行内元素"><a href="#垂直对齐方式vertical-align-适用于行内元素" class="headerlink" title="垂直对齐方式vertical-align(适用于行内元素)"></a>垂直对齐方式vertical-align(适用于行内元素)</h4><p><code>vertical-align</code>常用属性值:</p><ul><li><code>baseline</code>:将对象的内容与基线对齐</li><li><code>sub</code>:垂直对齐文本的下标</li><li><code>super</code>:垂直对齐文本的上标</li><li><code>top</code>:将对象的内容与对象顶端对齐</li><li><code>text-to</code>p:将对象的文本与对象的顶端对齐</li><li><code>middle</code>:将对象内容与对象的中部对齐</li><li><code>bottom</code>:将对象的文本与对象的底端对齐</li><li><code>text-bottom</code>:将对象的文本与对象的顶端对齐</li></ul><h4 id="首行缩进text-indent"><a href="#首行缩进text-indent" class="headerlink" title="首行缩进text-indent"></a>首行缩进text-indent</h4><p><code>text-indent</code>属性用于设置首行文本的缩进,其属性值可为不同单位的数值.em字符宽度的倍数.或相当于浏览器窗口宽度的百分比%,允许使用负值,建议用em作为设置单位.</p><h4 id="空白符处理-white-space"><a href="#空白符处理-white-space" class="headerlink" title="空白符处理 white-space"></a>空白符处理 white-space</h4><p>使用HTML制作网页时,不论源代码中有多少空格,在浏览器中只会显示一个字符的空白.在CSS中,使用<code>white-space</code>属性可设置空白符的处理方式,其属性值如下:</p><ul><li><code>normal</code>:常规(默认值),文本中的空格.空行无效,满行(到达区域边界)后自动换行.</li><li><code>pre</code>:预格式化,按文档的书写格式保留空格.空行原样显示.</li><li><code>nowrap</code>:空行空格无效,强制文本不能换行,除非遇到换行标记.内容超出元素边界也不换行,若超出浏览器页面则会自动增加滚动条.</li></ul><h3 id="背景background"><a href="#背景background" class="headerlink" title="背景background"></a>背景background</h3><h4 id="背景的具体属性"><a href="#背景的具体属性" class="headerlink" title="背景的具体属性:"></a>背景的具体属性:</h4><ul><li><code>background-color</code>:设置背景颜色,按照颜色的格式填写,比如:<code>red</code>,<code>#F00</code>,<code>rgb(255,0,0)</code>.</li><li><code>background-image</code>:设置背景图片,url(图片路径),如:<code>background-image:url(./xxx.jpg);</code>.</li><li><code>background-repeat</code>:设置背景图片是否平铺,<code>repeat</code>,<code>no-repeat</code>,<code>repeat-x</code>,<code>repeat-y</code>.如:<code>background-repeat:no-repeat;</code>.</li><li><code>background-position</code>:设置背景图片显示位置,可以使用<code>top</code>,<code>left</code>,<code>bottom</code>,<code>right</code>设置,也可以直接设置数值(x轴,y轴),如:<code>background-position:top-left;</code>.</li><li><code>background-attachement</code>:设置背景是否固定,fixed表示固定.如:<code>background-attachement:fixed</code>.</li></ul><h4 id="背景的综合写法"><a href="#背景的综合写法" class="headerlink" title="背景的综合写法"></a>背景的综合写法</h4><p>background: color image repeat position attachement;如:<code>background:red url(./xxx.jpg) no-repeat 12px 12px fixed;</code>.<br>这个和字体的综合设置是不同的,字体的综合设置需要必须设置其中几项,而背景不同,也没有顺序而言,即使你想设置图片的显示位置,可是position太难写,你可以直接<code>background:12px 12px;</code></p><blockquote><p>其他CSS属性可查询<a href="http://www.css88.com/book/css/" target="_blank" rel="noopener">CSS参考手册</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。&lt;br&gt;CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而
      
    
    </summary>
    
      <category term="CSS" scheme="https://blog.loong.io/categories/CSS/"/>
    
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://blog.loong.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS盒子模型</title>
    <link href="https://blog.loong.io/2017/08/15/box/"/>
    <id>https://blog.loong.io/2017/08/15/box/</id>
    <published>2017-08-15T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.124Z</updated>
    
    <content type="html"><![CDATA[<p>所有HTMl元素可以看做盒子,在CSS中,’box-model’这一术语是用来设计和布局时使用的.CSS盒模型本质上是一个盒子,封装周围的HTML元素,它包括:边距,边框,填充和实际内容.</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>所谓盒子模型就是把HTML页面中的元素看做是一个矩形的盒子,也就是一个盛装内容的容器.每个矩形都是由元素的内容,内边距(padding),边框(border)和外边框(margin)组成.</p><p><img src="http://oujvmc3la.bkt.clouddn.com/box.jpg" alt></p><p>如果把手机想象成HTML元素,那么手机盒子就是一个CSS盒子模型,其中手机为CSS盒子模型的内容,填充泡沫的厚度为CSS盒子模型的内边距,纸盒的厚度为CSS盒子模型的边框.<br>多个手机放一起时</p><p><img src="http://oujvmc3la.bkt.clouddn.com/box1.jpg" alt></p><p>最终的网页就是由多个盒子组成.</p><h4 id="盒子宽度和高度的计算"><a href="#盒子宽度和高度的计算" class="headerlink" title="盒子宽度和高度的计算"></a>盒子宽度和高度的计算</h4><p>Width = <code>border-left</code> +<code>padding-left</code> + <code>width</code> +<code>padding-right</code> +<code>border-right</code></p><p>Height =<code>border-top</code> +<code>padding-top</code>+<code>height</code>+<code>padding-bottom</code>+<code>border-bottom</code></p><h4 id="边框属性border"><a href="#边框属性border" class="headerlink" title="边框属性border"></a>边框属性border</h4><p>边框宽度:</p><ul><li><code>border-top-width</code>:上边框宽度</li><li><code>border-right-width</code>：右边框宽度</li><li><code>border-bottom-width</code>：下边框宽度</li><li><code>border-left-width</code>：左边框宽度</li><li><code>border-width</code>：上边框宽度[右边框宽度 下边框宽度 左边框宽度]</li></ul><p>边框颜色:</p><ul><li><code>border-top-color</code>:上边框颜色</li><li><code>border-right-color</code>:右边框颜色</li><li><code>border-bottom-color</code>:下边框颜色</li><li><code>border-left-color</code>:左边框颜色</li><li><code>border-color</code>:上边框颜色 [右边框颜色 下边框颜色 左边框颜色]</li></ul><p>边框样式:</p><ul><li><code>border-top-style</code>:上边框样式</li><li><code>border-right-style</code>:右边框样式</li><li><code>border-bottom-style</code>:下边框样式</li><li><code>border-left-style</code>:左边框样式</li><li><code>border-style</code>:上边框样式 [右边框样式 下边框样式 左边框样式]</li></ul><p>常用样式: 实线:<code>solid</code>,虚线: <code>dashed</code>,点状线: <code>dotted</code>,双线: <code>double</code></p><blockquote><p>设置边框颜色时同时必须设置边框样式,如果未设置样式或设置为none,则其他的边框属性无效.</p></blockquote><p>边框的综合设置方法:<br>border-top:宽度 样式 颜色 ,如:<code>border-top: 1px solid red;</code><br>border:宽度 样式 颜色 ,如:<code>border: 1px solid red;</code></p><h4 id="内边距padding属性"><a href="#内边距padding属性" class="headerlink" title="内边距padding属性"></a>内边距padding属性</h4><p><code>padding-top</code>:上内边距<br><code>padding-left</code>:左内边距<br><code>padding-bottom</code>:下内边距<br><code>padding-right</code>:右内边距</p><p>综合设置:<br><code>padding:10px;</code>:这样设置上下左右内边距都为10px;<br><code>padding:10px 20px;</code>:这样设置上下内边距为10px,左右内边距为20px;</p><h4 id="外边距margin属性"><a href="#外边距margin属性" class="headerlink" title="外边距margin属性"></a>外边距margin属性</h4><p><code>margin-top</code>:上外边距<br><code>margin-right</code>:右外边距<br><code>margin-left</code>:左外边距<br><code>margin-bottom</code>:下外边距</p><p>综合设置:<br><code>margin:10px;</code>:这样设置上下左右外边距都为10px;<br><code>margin:10px 20px;</code>:这样设置上下外边距为10px,左右外边距为20px;</p><blockquote><p>注意:</p><ol><li>外边距可以使用负值,使相邻元素重叠.</li><li>可能会出现外边距合并的情况</li><li>为了操作方便,可以使用<code>*{margin:0;padding:0;}</code>取消浏览器的默认属性.</li></ol></blockquote><h5 id="外边距合并情况"><a href="#外边距合并情况" class="headerlink" title="外边距合并情况"></a>外边距合并情况</h5><p>外边距合并(叠加)是一个相当简单的概念.但是,在实践中对网页进行布局时,他会造成很多混淆.<br>简单的说,外边距合并指的是,当两个垂直外边距相遇时,他们将会形成一个外边距.合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者.</p><p>当一个元素出现在另一个元素上面时,第一个元素的下外边距与第二个元素的上外边距会发生合并.请看下图:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/margin1.gif" alt></p><p>当一个元素包含在另一个元素中时(假设没有内边距或边框把外边距分隔开),他们的上或/和下外边距也会发生合并.请看下图:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/margin2.gif" alt></p><p>尽管看上去有些奇怪,但是外边距甚至可以与自身发生合并.<br>假设有个空元素,他有外边距,但是没有边框或填充.在这种情况下,上外边距与下外边距就会碰到一起,他们就会发生合并:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/margin3.gif" alt></p><p>如果这个外边距遇到另一个元素的外边框,他还会发生合并:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/margin4.gif" alt></p><p>这就是一系列的段落元素占用空间非常小的原因,因为他们的所有外边距都合并到一起了,形成了一个小的外边距.</p><h5 id="解决嵌套元素的外边距合并"><a href="#解决嵌套元素的外边距合并" class="headerlink" title="解决嵌套元素的外边距合并"></a>解决嵌套元素的外边距合并</h5><p>对于两个嵌套关系的块元素,如果父元素没有上内边距及边框,则父元素的上外边距会和子元素的上外边距发生合并,合并后的外边距为两者中的较大者,即使父元素的上外边距为0,也会发生合并.<br>如果希望外边距不合并,可以为父元素定义1像素的上边框或者上内边框.这里以定义父元素的上边框为例,在父元素的CSS样式中增加如下代码:<br><code>border:1px solid red;</code>或者<code>padding-top:1px;</code></p><h3 id="浮动概念"><a href="#浮动概念" class="headerlink" title="浮动概念"></a>浮动概念</h3><p>元素的浮动是指设置了浮动属性的元素会脱离标准文档流的控制,移动到其父元素中指定位置的过程.比喻:游泳池的池底以及水面游泳池的池底相当于标准流(文档流),水面相当于浮动的元素的所有层.水面的元素会遮挡水中的元素.</p><h4 id="浮动的CSS定义格式"><a href="#浮动的CSS定义格式" class="headerlink" title="浮动的CSS定义格式"></a>浮动的CSS定义格式</h4><p>选择器{<br>  float:属性值;<br>}<br>float的属性值如下:</p><ul><li>left:元素向左浮动</li><li>right:元素向右浮动</li><li>none:元素不浮动(默认值)</li></ul><h4 id="浮动的特点"><a href="#浮动的特点" class="headerlink" title="浮动的特点"></a>浮动的特点</h4><ol><li>浮动脱离标准流,不占位置,会影响标准流.浮动只有左右浮动.</li><li>浮动的元素A排列位置,跟上一个元素(块级)有关系.如果上一个元素有浮动,则A元素顶部会和上一个元素的顶部对齐;如果上一个元素是标准流,则A元素的顶部会和上一个元素的底部对齐.</li><li>一个父盒子里面的子盒子,如果其中一个子级有浮动,则其他子级都需要浮动.这样才能一行对齐显示.</li><li>浮动根据元素书写的位置来显示相应的浮动.</li><li>元素添加浮动后,元素会具有行内元素块元素的特性.元素的大小完全取决于定义的大小或者默认的内容有多少.</li><li>如果一个div没有设置高,这个div中的所有元素都浮动了,那么这个div的高为0.</li></ol><h3 id="浮动的影响以及清除"><a href="#浮动的影响以及清除" class="headerlink" title="浮动的影响以及清除"></a>浮动的影响以及清除</h3><h4 id="浮动的影响"><a href="#浮动的影响" class="headerlink" title="浮动的影响"></a>浮动的影响</h4><p>如果在一个大的没有设置高的div中有两个小的子div,那么这个大的div的高就是这两个小的div之和,但是一旦这两个小的div都浮动了,那么大的div高度就变为0,因为浮动之后div不会撑开父容器.这种情况会导致父盒子div后面的同级元素会和当前盒子中的浮动的子盒子重叠显示,导致页面混乱.</p><h4 id="浮动的清除方式"><a href="#浮动的清除方式" class="headerlink" title="浮动的清除方式"></a>浮动的清除方式</h4><ol><li>直接给父盒子设置一个高度(严格来说不算清除浮动).这种方式简单方便,但是当父盒子没有办法直接设置高度就必须用其他方法清除浮动.</li><li><p>在发生浮动的父盒子中的最后添加一个空元素,直接给该空元素设置clear属性值.</p><p>|——–|——–|<br>|clear属性值|含义|<br>|left|清除左浮动|<br>|right|清除右浮动|<br>|both|清除所有浮动|</p><p>但是当页面中发生浮动的元素很多时就需要添加很多空元素,不推荐使用.</p></li><li><p>直接给父盒子设置overflow属性<code>overflow:hidden;</code>这种方式简单方便,但是如果页面一旦出现定位,那么定位可能会受到影响.</p><p> |——-|——-|<br> |overflow值|含义|<br> |hidden|超出部分隐藏|<br> |scroll|超出部分显示滚动条|<br> |auto|超出部分显示滚动条,否则不显示|</p></li><li><p>使用伪元素清除浮动</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.charfix</span><span class="selector-pseudo">::after</span>,<span class="selector-class">.charfix</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>调用时直接在class加上一个charfix即可.</p><h3 id="定位position"><a href="#定位position" class="headerlink" title="定位position"></a>定位position</h3><p>定位的基本思路很简单,它允许你定义的元素框相对于其正常位置应该出现的位置,或者相对于父元素.另一个元素甚至浏览器窗口本身的位置.可以迅速的完成其他方式难以实现的效果.</p><p>常用定位的属性值:</p><ol><li>static,默认情况下浏览器中所有的盒子都是静态的.</li><li>relative,相对定位,元素相对于自身位置的移动.</li><li>absolute,绝对定位,有三种情况.<br>(1)如果盒子中没有body之外的其他的祖先元素,那么在绝对定位的时候这个文职是相对于body的.<br>(2)如果盒子中有祖先元素,但是祖先元素并没有设置定位,那么在绝对定位的时候这个位置还是相对于body的.<br>(3)如果盒子中有祖先元素并且祖先元素有定位(absolute,relative都可以),那么这个时候我们的盒子定位是相对于最近的一个设置过定位的祖先元素的.</li><li>fixed,固定,以窗口页面进行设置,不会随着滚动条移动.</li></ol><h4 id="position不同属性的特点"><a href="#position不同属性的特点" class="headerlink" title="position不同属性的特点"></a>position不同属性的特点</h4><p>|——|——-|<br>|属性值|是否脱离标准流|<br>|static|否|<br>|relative|否|<br>|absloute|是|<br>|fixed|是|</p><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><p>display属性用于规定元素生成的框类型,影响显示方式.<br>属性值:</p><ul><li><code>none</code>:此元素不会被显示</li><li><code>block</code>:此元素将被显示为块级元素,此元素前后会带有换行符.</li><li><code>inline</code>:此元素会被显示为内联元素,元素前后没有换行符.</li><li><code>inline-block</code>:行内块元素.</li></ul><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>伪元素语法<code>::before/:before</code>,不过为了和伪类有所区别.一般使用<code>::before</code>.<br>这里先介绍两个伪元素<code>::before</code>,<code>::after</code>.<br><code>::before</code>:设置在对象前的内容.用来和<code>content</code>属性一起用,并且必须定义<code>content</code>属性.<br><code>::after</code>:设置在对象后的内容.用来和<code>content</code>属性一起用,必须定义<code>content</code>属性.</p><blockquote><p>content没有值无所谓,但必须要有这个函数.</p></blockquote><p>演示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">      伪元素演示</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">content</span><span class="selector-pseudo">:"</span>这是前面";</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">content</span><span class="selector-pseudo">:"</span>这是后面";</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>伪元素演示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的html,会在伪元素演示前面加上这是前面,后面会加上这是后面.这就是伪元素的用法.</p><p>不过一般是用来清除浮动:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">  <span class="attribute">display</span>:blank;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是清除浮动的实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>清除浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.charfix</span><span class="selector-pseudo">::before</span>,<span class="selector-class">.charfix</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">content</span><span class="selector-pseudo">:""</span>;</span></span><br><span class="line"><span class="undefined">        clear: both;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.two</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:solid</span> <span class="selector-tag">red</span> 1<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 清除浮动只需要父元素在这里写上charfix这个类 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class="one charfix"&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>清除浮动演示<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>清除浮动之前:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/before.png" alt></p><p>清除浮动后:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/after.png" alt></p><p>明显可以看出子类浮动导致父类没有高度的影响消除了.</p><h3 id="visbility"><a href="#visbility" class="headerlink" title="visbility"></a>visbility</h3><p>这个元素和<code>display</code>有点像,但他们是两种截然不同的东西.<br>visibility属性值有两个:<code>hidden</code>,<code>visble</code>.<br>其中<code>visibility:hidden</code>是元素隐藏,仍然占据页面位置.<code>visibility:visble</code>是元素显示.<br>而<code>display:none;</code>也是元素隐藏,但是并不会占据页面位置.要想显示设置<code>block</code>…即可.</p><h3 id="层级-z-index"><a href="#层级-z-index" class="headerlink" title="层级 z-index"></a>层级 z-index</h3><p>z-index:<code>auto</code>|<code>&lt;integer&gt;</code><br>默认值:<code>auto</code><br>适用于:定位元素.即定义了<code>position</code>为非<code>static</code>的元素.<br><code>auto</code>:元素在当前层叠上下文中的层叠级别是0.元素不会创建新的局部层叠上下文,除非它是根元素.<br><code>&lt;integer&gt;</code>:用整数值来定义层叠级别.可以为负值.<br>演示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>z-index演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      ul&#123;</span></span><br><span class="line"><span class="undefined">        list-style: none;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      li&#123;</span></span><br><span class="line"><span class="undefined">        border: solid 2px red;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 向左移动让边框重叠 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin-left</span><span class="selector-pseudo">:-2px</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="undefined">        border: solid 2px green;</span></span><br><span class="line"><span class="css">        <span class="comment">/* z-index必须和static以外的其他定位一起使用,否则无效 */</span></span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 一行排列,从左到右,层级从0开始递增,最大值无限接近于1,所以这里只要为1,后面的层级就不会超过他*/</span></span></span><br><span class="line"><span class="undefined">        z-index: 1;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>z-index基于static之外的其他定位才有效<br>一行排列,从左到右,层次从零开始递增,最大无限接近于1<br>在同一个位置都有定位,那么按照顺序,后边的层次高于前面的.<br>默认和父元素的层次是一样的.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所有HTMl元素可以看做盒子,在CSS中,’box-model’这一术语是用来设计和布局时使用的.CSS盒模型本质上是一个盒子,封装周围的HTML元素,它包括:边距,边框,填充和实际内容.&lt;/p&gt;
&lt;h3 id=&quot;盒子模型&quot;&gt;&lt;a href=&quot;#盒子模型&quot; class=&quot;h
      
    
    </summary>
    
      <category term="CSS" scheme="https://blog.loong.io/categories/CSS/"/>
    
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://blog.loong.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础</title>
    <link href="https://blog.loong.io/2017/08/14/HTML_base/"/>
    <id>https://blog.loong.io/2017/08/14/HTML_base/</id>
    <published>2017-08-14T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.099Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器和服务器相关概念<br>HTML文档结构<br>HTML基础标签</p><h3 id="关于浏览器和服务器"><a href="#关于浏览器和服务器" class="headerlink" title="关于浏览器和服务器"></a>关于浏览器和服务器</h3><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><p>浏览器是指可以显示网页服务器或者文件系统的HTML文件(标准通用标记语言的一个应用)内容,并让用户与这些文件交互的一种软件.国内网民常用的网页浏览器有:QQ浏览器.Internet Explorer.Firefox.safari.Opera.Google Chorme.百度浏览器.搜狗浏览器.猎豹浏览器.360浏览器.UC浏览器.遨游浏览器.世界之窗浏览器等,浏览器是最常使用的客户端程序.</p><p><a href="https://juejin.im/entry/57ff3cea0e3dd90057e5f25e" target="_blank" rel="noopener">浏览器内核介绍</a></p><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><p>服务器,也称伺服器,是提供计算服务的设备.由于服务器需要响应服务请求,并进行处理,因此一般来说服务器应具备承担服务并且保障服务的能力.服务器的构成包括处理器.硬盘.内存.系统总线等,和通用的计算机架构类似,但是由于需要提供高可靠性的服务,因此在处理能力.稳定性.可靠性.安全性.可扩展性.可管理性等方面要求比较高.在网络环境下,根据服务器提供的服务类型不同,分为文件服务器,数据库服务器,WEB服务器等</p><p><img src="http://oujvmc3la.bkt.clouddn.com/timg%20%281%29.jpg" alt></p><h4 id="浏览器与服务器之间的关系"><a href="#浏览器与服务器之间的关系" class="headerlink" title="浏览器与服务器之间的关系"></a>浏览器与服务器之间的关系</h4><p><img src="http://oujvmc3la.bkt.clouddn.com/server2.jpg" alt></p><h3 id="了解http协议"><a href="#了解http协议" class="headerlink" title="了解http协议"></a>了解http协议</h3><p>超文本传输协议(HTTP, HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议.所有WWW文件必须遵守这个标准.设计HTTP最初的目的是为了提供一种发布和接受HTML页面的方法.<br>HTTP是一个客户端和服务器端请求和应答的标准(TCP).客户端是终端用户,服务端是网站.通过使用Web浏览器.网络爬虫或者其他的工具,客户端发起一个到服务器上指定端口的(默认端口为80)的HTTP请求.<br>通过HTTP或者HTTPS协议请求到的资源由统一资源标示符(Uniform Resource ldentifiers)(或者,更准确一些,URLs)来标识.</p><h3 id="初步认识HTML"><a href="#初步认识HTML" class="headerlink" title="初步认识HTML"></a>初步认识HTML</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><p>超文本标记语言,标准通用标记语言下的一个应用.’超文本’是指页面内可以包含图片.链接,甚至音乐.程序等非文字元素.主要用于描述文档的内容,无法描述文档的样式(类似与txt文本和word).</p><h4 id="后缀名"><a href="#后缀名" class="headerlink" title="后缀名"></a>后缀名</h4><p>HTML是一个网页文件的拓展名,和txt.jpg.mp3一样,是一个文件格式.<code>.html</code>文件就是网页文件.后缀名与文件之间是没有直接关系的.</p><ul><li>后缀名仅仅决定了文件的打开方式</li><li>真正决定文本类型的是文件的内容</li></ul><h3 id="HTML的发展"><a href="#HTML的发展" class="headerlink" title="HTML的发展"></a>HTML的发展</h3><ul><li>超文本标记语言（第一版）——在1993年6月作为互联网工程工作小组（IETF）工作草案发布（并非标准）：</li><li>HTML 2.0——1995年11月作为RFC 1866发布，在RFC 2854于2000年6月发布之后被宣布已经过时</li><li>HTML 3.2——1997年1月14日，W3C推荐标准</li><li>HTML 4.0——1997年12月18日，W3C推荐标准</li><li>HTML 4.01（微小改进）——1999年12月24日，W3C推荐标准</li><li>HTML 5——2014年10月28日，<a href="https://www.w3.org" target="_blank" rel="noopener">W3C</a>推荐标准</li></ul><p><img src="http://oujvmc3la.bkt.clouddn.com/html5.jpg" alt></p><h3 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DOCTYPE用于声明文档类型,告诉浏览器用什么标准去解析该页面!! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- head用于对页面进行设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- title设置浏览器标题栏显示的内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这是注释!!</span></span><br><span class="line"><span class="comment">    body显示页面的内容</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="了解格式中每个标签的含义"><a href="#了解格式中每个标签的含义" class="headerlink" title="了解格式中每个标签的含义"></a>了解格式中每个标签的含义</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span>  文档类型说明</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span> 整个文档页面</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span>&gt;</span> 设置页面的编码格式,关键字,以及页面的描述</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> 标题部分</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> 页面的头部分</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span> 页面的主体部分</span><br></pre></td></tr></table></figure><h3 id="HTML基础标签"><a href="#HTML基础标签" class="headerlink" title="HTML基础标签"></a>HTML基础标签</h3><h4 id="HTML中的注释方式"><a href="#HTML中的注释方式" class="headerlink" title="HTML中的注释方式"></a>HTML中的注释方式</h4><p>在HTML中还有一种特殊的标记—注释标记.如果需要在HTML中添加一些便于阅读和理解但又不需要显示在页面中的注释文字,就需要使用注释标记.<br>其基本语法格式如下:<code>&lt;!-- 我是注释 --&gt;</code></p><h3 id="常见标签学习"><a href="#常见标签学习" class="headerlink" title="常见标签学习"></a>常见标签学习</h3><p>|———-|———-|<br>|标签|格式|<br>|段落|p|<br>|标题|h1-h6|<br>|水平线|hr|<br>|换行|br|<br>|加粗|b/strong|<br>|倾斜|i/em|<br>|删除线|s/del|<br>|下划线|u/ins|<br>|原样显示|pre|</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML基础标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落标签<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      你好,我是路人甲.<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      你好,我是路人乙.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6标签<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>b加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>strong加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>i倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s</span>&gt;</span>s删除<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">del</span>&gt;</span>del删除<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">u</span>&gt;</span>u下滑线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ins</span>&gt;</span>ins下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示如下:</p><p><img src="http://oujvmc3la.bkt.clouddn.com/2017-08-14%2019-41-36%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt></p><p>从上面的实例可以看出,有些只一个标签,比如加粗有两个<code>b</code>和<code>strong</code>,这里推荐使用语义化标签即:<code>strong</code>.<br>语义化标签:是HTML未来的趋势,是为了让大家直观的认识到标签和属性的用途和作用.</p><h4 id="图像标签img"><a href="#图像标签img" class="headerlink" title="图像标签img"></a>图像标签img</h4><p>HTML网页中任何元素的实现都是要依靠HTML来标记的,要想在网页中显示图像就要使用图像标记.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">'./img.jpg'</span> <span class="attribute">title</span>=<span class="string">'yyy'</span> <span class="attribute">alt</span>=<span class="string">'无法显示'</span>&gt;</span><br></pre></td></tr></table></figure><p>|——-|——–|<br>|属性|作用|<br>|title|图片的标题|<br>|src|图片的路径|<br>|alt|图片不正常显示时文本提示|</p><h4 id="创建超链接"><a href="#创建超链接" class="headerlink" title="创建超链接"></a>创建超链接</h4><p>在HTML中创建超链接非常简单,只需要用标记环绕需要被连接的对象即可,其基本语法格式如下:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"https:www.baidu.com"</span> <span class="attribute">target</span>=<span class="string">"_blank"</span>&gt;百度&lt;/a&gt;</span><br></pre></td></tr></table></figure><blockquote><p>href: 用于指定链接目标的地址,当<a>标记应用<code>href</code>属性时,它就有了超链接的功能.<br>target: 用于指定链接页面的打开方式,其取值有<code>_self</code>和<code>_blank</code>两种,其中<code>_self</code>为默认值,<code>_blank</code>为在新窗口打开.</a></p></blockquote><h5 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h5><p>通过创建锚点链接,用户能够快速定位到目标内容.例如本页面的目录点击即可直接呈现内容.<br>创建锚点链接分为两步:</p><ul><li>使用<code>id</code>属性,比如:<code>&lt;p id=&quot;k&quot;&gt;目标文本&lt;/p&gt;</code></li><li>创建超链接指向该内容,比如:<code>&lt;a href=&quot;#k&quot;&gt;点击跳转到目标文本&lt;/a&gt;</code></li></ul><blockquote><p>需要注意的是:<br>a标签中指定的 #name ,此处的name是要跳到的位置的id值.<br>id属性值不要重复,必须保证在一个页面中唯一!!!</p></blockquote><h5 id="空链接跳转"><a href="#空链接跳转" class="headerlink" title="空链接跳转"></a>空链接跳转</h5><p>如果你还没想好该链接要跳转到什么地方,可以这样写:<br><code>&lt;a href=&quot;#&quot;&gt;空链接&lt;/a&gt;</code><br>但是你如果<code>href</code>什么都不写,浏览器是不会识别这是个链接的.</p><h3 id="HTML特殊字符"><a href="#HTML特殊字符" class="headerlink" title="HTML特殊字符"></a>HTML特殊字符</h3><p>HTML为这些特殊的字符专门准备了专门的替代代码</p><p>|———–|———|————|<br>|特殊字符|描述|字符代码|<br>| |空格符|<code>&amp;nbsp;</code>|<br>|&lt;|小于号|<code>&amp;lt;</code>|<br>|&gt;|大于号|<code>&amp;gt;</code>|<br>|&amp;|和号|<code>&amp;amp;</code>|<br>|¥|人民币|<code>&amp;yen;</code>|<br>|©|版权|<code>&amp;copy;</code>|<br>|®|注册商标|<code>&amp;reg;</code>|<br>|°|摄氏度|<code>&amp;deg;</code>|<br>|±|正负号|<code>&amp;plusmn;</code>|<br>|×|乘号|<code>&amp;times;</code>|<br>|÷|除号|<code>&amp;divide;</code>|<br>|²|平方|<code>&amp;sup2;</code>|<br>|³|立方|<code>&amp;sup3;</code>|</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>任何不是描述性的文本的任何内容都可以认为是列表</p><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>无序列表的各个列表项之间没有顺序级别之分,是并列的.其基本语法格式如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的语法中,<code>&lt;ul&gt;&lt;/ul&gt;</code>标记用于定义无序列表,<code>&lt;li&gt;&lt;/li&gt;</code>标记嵌套在<code>&lt;ul&gt;&lt;/ul&gt;</code>标记中,用于描述具体的列表项,每对<code>&lt;ul&gt;&lt;/ul&gt;</code>中至少包含一对<code>&lt;li&gt;&lt;/li&gt;</code>.</p><blockquote><p>注意:<br>不赞成使用无序列表的type属性,一般通过CSS样式属性替代.</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>之间相当于一个容器，可以容纳所有元素。但是<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>中只能嵌套<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>，直接在<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>标记中输入文字的做法是不被允许的。</span><br></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表即为有排列顺序的列表,其各个列表项按照一定的顺序排列定义,其基本语法格式如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>语法结构和无序列表一样.在有序列表中,除了<code>type</code>属性之外,还可以为<code>&lt;ol&gt;</code>定义<code>value</code>属性,为<code>&lt;li&gt;</code>定义value属性,他们决定有序列表的项目符号.<br>注意:<br>各个浏览器对有序列表的<code>type</code>和<code>value</code>属性的解析不同.<br>不赞成使用<code>&lt;ol&gt;&lt;li&gt;</code>的<code>type</code>.<code>start</code>和<code>value</code>属性,可通过CSS样式替代.</p></blockquote><h4 id="定义列表dl"><a href="#定义列表dl" class="headerlink" title="定义列表dl"></a>定义列表dl</h4><p>定义列表常用于对术语或者名词进行解释和描述,定义的列表项前没有任何项目符号,其基本语法结构如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词3<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三种列表表现形式"><a href="#三种列表表现形式" class="headerlink" title="三种列表表现形式"></a>三种列表表现形式</h4><p><img src="http://oujvmc3la.bkt.clouddn.com/2017-08-14%2021-22-22%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>在HTML网页中,想要创建表格,就需要使用表格相关的标签,创建标签的语法结构如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tabel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>王某<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在上面的语法中包含三对HTML标签,分别是<code>table</code>.<code>tr</code>.<code>td</code>,他们是创建表格的基本标签,缺一不可,下面对他们进行具体的解释:<br><code>&lt;table&gt;&lt;/table&gt;</code>:用于定义一个表格.<br><code>&lt;tr&gt;&lt;/tr&gt;</code>:用于定义表格中的一行,必须嵌套在<code>&lt;table&gt;&lt;/table&gt;</code>标签中,在<code>&lt;table&gt;&lt;/table&gt;</code>中包含几对<code>&lt;tr&gt;&lt;/tr&gt;</code>,就有几行表格.<br><code>&lt;td&gt;&lt;/td&gt;</code>:用于定义表格中的单元格,必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中,一对<code>&lt;tr&gt;&lt;/tr&gt;</code>中包含几对<code>&lt;td&gt;&lt;/td&gt;</code>,就表示该行中有多少列(或多少单元格)<br>注意!!!!<br>学习表格的核心是学习<code>&lt;td&gt;&lt;/td&gt;</code>标签,他就像一个容器,可以容纳所有元素,<code>&lt;td&gt;&lt;/td&gt;</code>中甚至可以再嵌套<code>&lt;table&gt;&lt;/table&gt;</code>.但是<code>&lt;tr&gt;&lt;/tr&gt;</code>中只能嵌套<code>&lt;td&gt;&lt;/td&gt;</code>,直接在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中输入文字的做法是不被允许的.</p></blockquote><h4 id="table标签的属性"><a href="#table标签的属性" class="headerlink" title="table标签的属性"></a>table标签的属性</h4><p><img src="http://oujvmc3la.bkt.clouddn.com/table.jpg" alt></p><h4 id="caption标签"><a href="#caption标签" class="headerlink" title="caption标签"></a>caption标签</h4><p><code>caption</code>标签必须紧跟着<code>table</code>标签之后.你只能对每个表格定义一个标题.通常这个标题会被居中于表格之上.</p><h4 id="th标签"><a href="#th标签" class="headerlink" title="th标签"></a>th标签</h4><p>表头一般位于表格的第一行或第一列,其文本加粗居中,如下所示,即为设置了表头的表格.设置表头非常简单,只需用表头标记<code>&lt;th&gt;&lt;/th&gt;</code>代替相应的单元格标记<code>&lt;td&gt;&lt;/td&gt;</code>即可.</p><p><img src="http://oujvmc3la.bkt.clouddn.com/th.png" alt></p><h4 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h4><p>在使用表格进行布局时,可以将表格分为头部.主体和页脚,具体如下:</p><blockquote><p><code>&lt;thead&gt;&lt;/thead&gt;</code>:用于定义表格的头部,必须位于<code>&lt;table&gt;&lt;/table&gt;</code>标记中.<br><code>&lt;tfoot&gt;&lt;/tfoot&gt;</code>:用于定义表格的页脚.<br><code>&lt;tbody&gt;&lt;/tbody&gt;</code>:用于定义表格的主体.</p></blockquote><h4 id="跨行跨列"><a href="#跨行跨列" class="headerlink" title="跨行跨列"></a>跨行跨列</h4><p>这里用到两个属性<code>rowspan</code>.<code>colspan</code>,他们都是<code>&lt;td&gt;</code>或<code>&lt;th&gt;</code>标签中的属性</p><blockquote><p><code>rowspan</code>此属性包含非负整数值，指示单元格扩展多少行。它的默认值是1.<br><code>colspan</code>此属性包含非负整数值，指示单元格扩展多少列。其默认值为1。高于1000的值将被视为不正确，并将被设置为默认值（1）</p></blockquote><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>王凯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>玉兔<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>fjdij<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>复旦复华<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>jdfij<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>发动机死回<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>房价地价<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>低价覅设计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/2017-08-15%2019-13-36%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt></p><h3 id="当你在浏览器地址栏输入一个URL后回车，将会发生的事情？"><a href="#当你在浏览器地址栏输入一个URL后回车，将会发生的事情？" class="headerlink" title="当你在浏览器地址栏输入一个URL后回车，将会发生的事情？"></a>当你在浏览器地址栏输入一个URL后回车，将会发生的事情？</h3><ul><li>进行DNS解析，得到IP</li><li>三次握手，建立TCP连接</li><li>发送http请求（可能是一堆请求）</li><li>服务器响应（根据客户端的缓存情况，返回内容）</li><li>浏览器接收响应，根据接收内容进行渲染，显示</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浏览器和服务器相关概念&lt;br&gt;HTML文档结构&lt;br&gt;HTML基础标签&lt;/p&gt;
&lt;h3 id=&quot;关于浏览器和服务器&quot;&gt;&lt;a href=&quot;#关于浏览器和服务器&quot; class=&quot;headerlink&quot; title=&quot;关于浏览器和服务器&quot;&gt;&lt;/a&gt;关于浏览器和服务器&lt;/h3&gt;&lt;h
      
    
    </summary>
    
      <category term="HTML" scheme="https://blog.loong.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://blog.loong.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>GIT 源码管理(3)</title>
    <link href="https://blog.loong.io/2017/08/11/git-3/"/>
    <id>https://blog.loong.io/2017/08/11/git-3/</id>
    <published>2017-08-11T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.096Z</updated>
    
    <content type="html"><![CDATA[<p>GIT 是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。是目前世界上最先进的分布式版本控制系统.</p><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>现在我们就使用下面的命令去创建一个分支.这个命令只是创建并没有切换到新创建的分支上.git仓库初始化创建的时候,会为我们自动创建一个<code>master</code>的分支.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch branch_name</span></span><br></pre></td></tr></table></figure><p><code>branch_name</code>是你创建的分支的名字,可以从任何地方创建分支,并切换到新创建的分支上.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b branch_name</span></span><br></pre></td></tr></table></figure><h3 id="显示分支"><a href="#显示分支" class="headerlink" title="显示分支"></a>显示分支</h3><p>如果我们想要显示当前git仓库中有多少分支.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -av</span></span><br></pre></td></tr></table></figure><h3 id="分支切换"><a href="#分支切换" class="headerlink" title="分支切换"></a>分支切换</h3><p>如果我们想从A分支切换到B分支上使用下面的命令.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout B</span></span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>如果我们要删除一个分支,那么我们一定要站在另一个分支上去删除它,也就是我们不能删除当前所在分支.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -D branch_name</span></span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>我们将<code>develop</code>分支开发的提交,合并到<code>master</code>分支上.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge develop</span></span><br></pre></td></tr></table></figure><p>如果出现冲突的时候可以使用<code>mergetool</code>,解决冲突.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git mergetool</span></span><br></pre></td></tr></table></figure><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h4><p>现在我们决定把<code>develop</code>分支的变化也包括进来,我们可以直接把<code>develop</code>分支衍合到<code>master</code>,而不用手工切换到<code>develop</code>分支再执行衍合操作–<code>git rebase [主分支] [特性分支]</code>命令会先取出特性分支</p><h4 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h4><p>用<code>cherry-pick</code>取出提交,然后将其添加到当前分支上,你当前处在那个分支上就是放在相应的分支分支上.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick &lt;commit_id&gt;</span></span><br></pre></td></tr></table></figure><p>如果出现冲突,就正常解决冲突,然后进行重新提交.</p><h3 id="什么是标签"><a href="#什么是标签" class="headerlink" title="什么是标签"></a>什么是标签</h3><p>标签是为了更方便的参考提交而给他标上易懂的名称.Git可以使用2种标签: 轻标签和注解标签.打上的标签是固定的,不能像分支那样可以移动位置.</p><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p>使用<code>tag</code>命令来添加标签.是要创建标签的名称.</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span> <span class="title">&lt;tag_name</span>&gt;</span><br></pre></td></tr></table></figure><p>还可以根据commit ID创建标签.</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span> <span class="title">&lt;tag_name</span>&gt; <span class="tag">&lt;commit ID&gt;</span></span><br></pre></td></tr></table></figure><h3 id="显示tag标签信息"><a href="#显示tag标签信息" class="headerlink" title="显示tag标签信息"></a>显示tag标签信息</h3><p>如果没有输入要创建标签的名子, 它就会显示现在所有的标签.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br></pre></td></tr></table></figure><p>如果在<code>log</code>命令添加 <code>–decorate</code>选项执行，可以显示包含标签资料的历史记录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --decorate</span></span><br></pre></td></tr></table></figure><p>可以显示从tag开始的所有提交信息.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> tag-name</span></span><br></pre></td></tr></table></figure><p>可能显示<code>tag</code>的提交信息和提交的内容及<code>patch</code>.</p><h3 id="checkout分支"><a href="#checkout分支" class="headerlink" title="checkout分支"></a>checkout分支</h3><p>可以根据<code>tag</code>的标记来进行创建分支.</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b branch-<span class="built_in">name</span> tag-<span class="built_in">name</span></span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><p>若要删除标签，在<code>tag</code>命令指定 <code>-d</code>选项执行。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> <span class="tag">&lt;tagname&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GIT 是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。是目前世界上最先进的分布式版本控制系统.&lt;/p&gt;
&lt;h3 id=&quot;创建分支&quot;&gt;&lt;a href=&quot;#创建分支&quot;
      
    
    </summary>
    
      <category term="GIT" scheme="https://blog.loong.io/categories/GIT/"/>
    
    
      <category term="GIT" scheme="https://blog.loong.io/tags/GIT/"/>
    
      <category term="GitHub" scheme="https://blog.loong.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Github的使用</title>
    <link href="https://blog.loong.io/2017/08/11/github/"/>
    <id>https://blog.loong.io/2017/08/11/github/</id>
    <published>2017-08-11T00:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.097Z</updated>
    
    <content type="html"><![CDATA[<p>gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</p><p>gitHub于2008年4月10日正式上线，除了git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。</p><h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h3><p>我们打开<a href="https://github.com" target="_blank" rel="noopener">Github</a>, 输入邮箱和密码, 就可以完成简单的注册功能.</p><p><img src="http://oujvmc3la.bkt.clouddn.com/github.png" alt></p><h3 id="创建一个仓库"><a href="#创建一个仓库" class="headerlink" title="创建一个仓库"></a>创建一个仓库</h3><p>那我们现在就去创建一个仓库.</p><p><img src="http://oujvmc3la.bkt.clouddn.com/repo.png" alt></p><p>Repository name: 要创建git仓库的名字</p><p>Description: 这个仓库的简单描述, 让别人很快的了解这个库是做什么用的.</p><p>Public: 表示这个仓库是公开的, 任何人都可看到, 可以随意下载, 这就是传说中的开源.</p><p>Private: 私有库, 只能指定相关的人员才能看到并能下载. 这一般是公司或组织使用的私有项目, 这需要每个月向github交$7.</p><p>Initialze this Repository with a README: 初始生成<code>README</code>文件.</p><p><code>.gitignore</code>和<code>license</code>文件. <code>.gitignore</code>会屏蔽掉不想上传github的文件,不建议使用.<code>license</code> 证书类型，对应生成文件 LICENSE</p><h3 id="使用github仓库"><a href="#使用github仓库" class="headerlink" title="使用github仓库"></a>使用github仓库</h3><p>创建github仓库后, 我有3种方法可以下载使用它.</p><ol><li>如果我们本地没有git仓库, 可以先在本地创建一个git仓库, 并做一个提交. 然后再互github远程仓库进行关联.</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"# abc"</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git <span class="keyword">add</span><span class="bash"> README.md</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"first commit"</span></span></span><br><span class="line"><span class="bash">git remote add origin https://github.com/7666/freeBook-H5.git</span></span><br><span class="line"><span class="bash">git push -u origin master</span></span><br></pre></td></tr></table></figure><ol start="2"><li>我们本地已经有git仓库了, 那我们现在就直接与github仓库进行关联就可以了.</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin https://github.com/7666/freeBook-H5.git</span></span><br><span class="line"><span class="bash">git push -u origin master</span></span><br></pre></td></tr></table></figure><ol start="3"><li>我们还可以用clone直接去下载这个项目, 这也是最常用下载或拉取github仓库的方法.</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/<span class="number">7666</span>/freeBook-H5.git</span><br></pre></td></tr></table></figure><p><img src="http://oujvmc3la.bkt.clouddn.com/repo1.png" alt></p><h3 id="本地提交给Github"><a href="#本地提交给Github" class="headerlink" title="本地提交给Github"></a>本地提交给Github</h3><p>如果你已经完成了本地仓库的添加,那么接下来就是</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin https://github.com/7666/freeBook-H5.git   <span class="comment">#连接github远程仓库,已经连接的话,第二次提交就不用再次输入此命令,直接git push</span></span></span><br><span class="line"><span class="bash">git push -u origin master                                       <span class="comment">#将本地仓库文件推送到远程仓库</span></span></span><br></pre></td></tr></table></figure><p>如果你不想提交到这个仓库了,想连接其他远程仓库,并把本地仓库的文件提交上去<br><code>git remote rm &lt;主机名&gt;</code>命令用于删除远程主机<br><code>git remote add &lt;主机名&gt; &lt;网址&gt;</code>命令用于添加远程主机。<br>当然你也可以直接进入<code>.git</code>文件,修改<code>config</code>文件,将<code>url</code>字段修改为你远程仓库的网址即可.</p><h3 id="疑难问题"><a href="#疑难问题" class="headerlink" title="疑难问题"></a>疑难问题</h3><p>如果你在github直接更改仓库内容,会导致github的远程仓库有本地仓库没有的文件或是修改.<br>就会导致<code>git push -u origin master</code>这个命令报错</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">linux<span class="variable">@os</span><span class="symbol">:~/Desktop/Tkinter</span><span class="variable">$ </span>git push origin master</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: <span class="number">7666</span></span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'https://7666@github.com'</span><span class="symbol">:</span></span><br><span class="line">To <span class="symbol">http:</span>/<span class="regexp">/github.com/</span><span class="number">7666</span>/tkinter_study.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line"><span class="symbol">error:</span> 无法推送一些引用到 <span class="string">'http://github.com/7666/tkinter_study.git'</span></span><br><span class="line">提示：更新被拒绝，因为远程仓库包含您本地尚不存在的提交。这通常是因为另外</span><br><span class="line">提示：一个仓库已向该引用进行了推送。再次推送前，您可能需要先整合远程变更</span><br><span class="line">提示：（如 <span class="string">'git pull ...'</span>）。</span><br><span class="line">提示：详见 <span class="string">'git push --help'</span> 中的 <span class="string">'Note about fast-forwards'</span> 小节。</span><br></pre></td></tr></table></figure><p>有以下两种解决方法:</p><ol><li><p><code>git push -u origin +master</code>强制push上去,这种方法会导致你在github远程仓库所做的修改丢失.就是把远程仓库清空,然后上传本地仓库.</p></li><li><p>建议使用这种方法,先把远程仓库的更新同步下来,然后合并到本地分支.这样远程仓库的修改和本地的修改都不会丢失</p></li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin <span class="keyword">master</span>  <span class="title">#相当于是从远程获取最新版本到本地，不会自动merge</span></span><br><span class="line">$ git pull  origin <span class="keyword">master</span>  <span class="title">#相当于是从远程获取最新版本并merge</span>到本地</span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">linux<span class="variable">@os</span><span class="symbol">:~/wangkai/</span><span class="number">7666</span>.github.io<span class="variable">$ </span>git fetch origin</span><br><span class="line"><span class="symbol">remote:</span> Counting <span class="symbol">objects:</span> <span class="number">3</span>, done.</span><br><span class="line"><span class="symbol">remote:</span> Compressing <span class="symbol">objects:</span> <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</span><br><span class="line"><span class="symbol">remote:</span> Total <span class="number">3</span> (delta <span class="number">1</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">0</span></span><br><span class="line">展开对象中: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), 完成.</span><br><span class="line">来自 <span class="symbol">https:</span>/<span class="regexp">/github.com/</span><span class="number">7666</span>/<span class="number">7666</span>.github.io</span><br><span class="line">   d7f7b09..d62355a  master     -&gt; origin/master</span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~/wangkai/</span><span class="number">7666</span>.github.io<span class="variable">$ </span>git pull</span><br><span class="line">更新 d7f7b09..d62355a</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | <span class="number">2</span> ++</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">2</span> insertions(+)</span><br><span class="line"> create mode <span class="number">100644</span> README.md</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。&lt;/p&gt;
&lt;p&gt;gitHub于2008年4月10日正式上线，除了git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑
      
    
    </summary>
    
      <category term="GIT" scheme="https://blog.loong.io/categories/GIT/"/>
    
    
      <category term="GIT" scheme="https://blog.loong.io/tags/GIT/"/>
    
      <category term="GitHub" scheme="https://blog.loong.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>GIT 源码管理(2)</title>
    <link href="https://blog.loong.io/2017/08/09/git-2/"/>
    <id>https://blog.loong.io/2017/08/09/git-2/</id>
    <published>2017-08-09T09:20:54.000Z</published>
    <updated>2020-06-03T02:37:45.093Z</updated>
    
    <content type="html"><![CDATA[<p>GIT 是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。是目前世界上最先进的分布式版本控制系统.</p><h3 id="状态比较"><a href="#状态比较" class="headerlink" title="状态比较"></a>状态比较</h3><p>我们刚才一直还不太明白, 什么时候用git add. 什么时候不需要使用. 那我们现在就来一起来看一下文件的状态是怎么回事.</p><p>untracked: 文件未被加入的版本库中.<br>unmodified: 文件未被修改过.<br>modified: 文件已经被修改过了.<br>staged: 准备好, 可以提交到版本库中了.</p><h3 id="删除文件恢复"><a href="#删除文件恢复" class="headerlink" title="删除文件恢复"></a>删除文件恢复</h3><p>有时候, 我们不小心把文件给删除了. 想恢复这个文件时, 需要用到下面的命令.</p><p>我现在把仓库里的README这个文件给删除了. 然后再使用ls命令查看文件, 看看这个文件是否还存在.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm README</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -al</span></span><br></pre></td></tr></table></figure><p>文件已经被删除了, 这是我们使用linux基本命令去查看文件是不是还存在这个目录中.现在我们使用git去查看一下现在仓库是什么状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">linux<span class="variable">@os</span><span class="symbol">:~/wangkai/git/demo</span><span class="variable">$ </span>git status</span><br><span class="line">位于分支 master</span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 <span class="string">"git add/rm &lt;文件&gt;..."</span> 更新要提交的内容）</span><br><span class="line">  （使用 <span class="string">"git checkout -- &lt;文件&gt;..."</span> 丢弃工作区的改动）</span><br><span class="line"></span><br><span class="line">删除：     README</span><br><span class="line"></span><br><span class="line">修改尚未加入提交（使用 <span class="string">"git add"</span> 和/或 <span class="string">"git commit -a"</span>）</span><br></pre></td></tr></table></figure><p>发现这个文件是误删了, 我们想把它恢复回来, 现在我们有办法吗? 如果没有将这个文件提交到仓库里, 我们是没有办法将它恢复的.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout README</span></span><br></pre></td></tr></table></figure><p>然后我们再用ls查看一下文件是否存在.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -al</span></span><br></pre></td></tr></table></figure><p>再查看git仓库是状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br></pre></td></tr></table></figure><p>说明, 只要将文件提交到git仓库中,即使删除了，还是可以通过git恢复过来的．</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>什么叫版本, 一次提交就相当于一个版本. 如果更准确的说是提交的回退. 每一次提交都会将修改的状态提交到仓库中保存着, 这些信息都保存那里呢?都保存在.git的目录下.</p><p>如果想回退到上次提交的版本, 那么需要使用git reset命令.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard commitID</span></span><br></pre></td></tr></table></figure><p>这里的commitID是版本的编码，只需要<code>git log</code>即可得到这个版本之前的版本编码．<br>注意: 使用这个命令后,再使用git log命令不会查看到所有log的相关信息, 那么我们没有办法获取到后一个提交的CommitID.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure><p>在这里我们需要使用git reflog命令查看后一次提交的CommitID, 如果已经有了后一次提交的CommitID, 那么我们需要使用git reset命令恢复到前面提交版本.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">linux<span class="variable">@os</span><span class="symbol">:~/wangkai/git/demo</span><span class="variable">$ </span>git reflog</span><br><span class="line">e6d965a HEAD@&#123;<span class="number">0</span>&#125;: <span class="symbol">commit:</span> add hello.py</span><br><span class="line">d06a1a<span class="number">0</span> HEAD@&#123;<span class="number">1</span>&#125;: <span class="symbol">commit:</span> Init commit</span><br><span class="line"><span class="number">01</span>b66e6 HEAD@&#123;<span class="number">2</span>&#125;: <span class="symbol">commit:</span> Init.commit</span><br><span class="line">c1401f3 HEAD@&#123;<span class="number">3</span>&#125;: commit (initial): Init commit</span><br></pre></td></tr></table></figure><h3 id="从仓库中删除文件"><a href="#从仓库中删除文件" class="headerlink" title="从仓库中删除文件"></a>从仓库中删除文件</h3><p>如果将文件从仓库中删除这个文件, 需要使用git rm.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm filename</span></span><br></pre></td></tr></table></figure><p>这只是做了删除操作, 但没有真正的从仓库中删除, 我们只要将删除再做一次提交到仓库.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit</span></span><br></pre></td></tr></table></figure><h3 id="从版本库中忽略文件"><a href="#从版本库中忽略文件" class="headerlink" title="从版本库中忽略文件"></a>从版本库中忽略文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch .gitignore</span></span><br></pre></td></tr></table></figure><p>建立.gitignore文件，注意这个文件前面有个<code>.</code>，在里面写入你不想添加到仓库的文件，每行一个．</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">README</span></span><br></pre></td></tr></table></figure><p>像上面这样写，git就会忽略<code>README</code>这个文件．</p><h3 id="版本之间对比"><a href="#版本之间对比" class="headerlink" title="版本之间对比"></a>版本之间对比</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff commitID1 commitID2</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">linux@os:~/wangkai/git/demo$ git diff e6d965a d06a1a0</span><br><span class="line">diff --git a/hello<span class="selector-class">.py</span> b/hello.py</span><br><span class="line">index <span class="number">4</span>b314f9..<span class="number">062360</span>e <span class="number">100644</span></span><br><span class="line">--- a/hello.py</span><br><span class="line">+++ b/hello.py</span><br><span class="line">@@ -<span class="number">1</span>,<span class="number">5</span> +<span class="number">1</span>,<span class="number">3</span> @@</span><br><span class="line"> #! /usr/bin/env python</span><br><span class="line"></span><br><span class="line">-<span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">-    print i</span><br><span class="line"> print (<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure><h3 id="什么是patch"><a href="#什么是patch" class="headerlink" title="什么是patch"></a>什么是patch</h3><p>patch多指补丁的意思, 在这里更多的指程序有一些bug, 需要我们进行fixed, 那fixed源码文件就是patch.</p><p>patch实际上是保存两个文件的差异.</p><h3 id="git生成patch"><a href="#git生成patch" class="headerlink" title="git生成patch"></a>git生成patch</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git format-patch -p1</span></span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">linux<span class="variable">@os</span><span class="symbol">:~/wangkai/git/demo</span><span class="variable">$ </span>git format-patch -p2</span><br><span class="line"><span class="number">0001</span>-Init-commit.patch</span><br><span class="line"><span class="number">0002</span>-add-hello.py.patch</span><br></pre></td></tr></table></figure><p>可以看到<code>-p</code>后面的数字是生成文件的数量,如果生成一个的文件,是最近的一次提交的信息.<br>如果有两个,那么依次是倒数第二次提交的信息和最近提交的信息.<br>打开文件,里面就是更改的信息,如下:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">linux@os:~/wangkai/git/demo$ cat <span class="number">0001</span>-add-hello<span class="selector-class">.py</span><span class="selector-class">.patch</span></span><br><span class="line">From e6d965a532d4660802af0e7a5fe3e3a1d680a7be Mon Sep <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">2001</span></span><br><span class="line">From: Key &lt;xkw@live.com&gt;</span><br><span class="line">Date: Thu, <span class="number">10</span> Aug <span class="number">2017</span> <span class="number">20</span>:<span class="number">22</span>:<span class="number">44</span> +<span class="number">0800</span></span><br><span class="line">Subject: [PATCH] add hello.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">diff --git a/hello<span class="selector-class">.py</span> b/hello.py</span><br><span class="line">index <span class="number">062360</span>e..<span class="number">4</span>b314f9 <span class="number">100644</span></span><br><span class="line">--- a/hello.py</span><br><span class="line">+++ b/hello.py</span><br><span class="line">@@ -<span class="number">1</span>,<span class="number">3</span> +<span class="number">1</span>,<span class="number">5</span> @@</span><br><span class="line"> #! /usr/bin/env python</span><br><span class="line"></span><br><span class="line">+<span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">+    print i</span><br><span class="line"> print (<span class="string">'hello world'</span>)</span><br><span class="line">--</span><br><span class="line"><span class="number">2.7</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GIT 是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。是目前世界上最先进的分布式版本控制系统.&lt;/p&gt;
&lt;h3 id=&quot;状态比较&quot;&gt;&lt;a href=&quot;#状态比较&quot;
      
    
    </summary>
    
      <category term="GIT" scheme="https://blog.loong.io/categories/GIT/"/>
    
    
      <category term="GIT" scheme="https://blog.loong.io/tags/GIT/"/>
    
      <category term="GitHub" scheme="https://blog.loong.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>GIT 源码管理(1)</title>
    <link href="https://blog.loong.io/2017/08/09/git/"/>
    <id>https://blog.loong.io/2017/08/09/git/</id>
    <published>2017-08-09T09:16:54.000Z</published>
    <updated>2020-06-03T02:37:45.094Z</updated>
    
    <content type="html"><![CDATA[<p>GIT 是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。是目前世界上最先进的分布式版本控制系统.</p><h2 id="GIT-源码管理"><a href="#GIT-源码管理" class="headerlink" title="GIT 源码管理"></a>GIT 源码管理</h2><h3 id="GIT-诞生"><a href="#GIT-诞生" class="headerlink" title="GIT 诞生"></a>GIT 诞生</h3><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p><p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h3 id="什么是版本控制"><a href="#什么是版本控制" class="headerlink" title="什么是版本控制"></a>什么是版本控制</h3><p>版本控制（Revision control）是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一代码文件案都得到同步。</p><h3 id="集中式和分布式"><a href="#集中式和分布式" class="headerlink" title="集中式和分布式"></a>集中式和分布式</h3><h4 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h4><p>集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。</p><h4 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h4><p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><h3 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h3><p>ubuntu安装GIT</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install git</span><br></pre></td></tr></table></figure><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。<br>第一步, 先要创建一个目录, 这个目录就是用来存放仓库的.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir html</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> html</span></span><br></pre></td></tr></table></figure><p>第二步, 使用git init命令, 将当前目录创建成git仓库.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> <span class="regexp">/home/u</span>ser<span class="regexp">/html/</span>.git<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>马上就把仓库创建成功了, 并提示这是一个空仓库.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">ls</span> -al</span><br><span class="line"><span class="string">.git</span></span><br></pre></td></tr></table></figure><p>我们看一下当前目录有什么东西? 会发现有一个隐藏的.git目录. 这个目录就是存放着git管理工具用到的所有信息和基本配置信息. 没事千万不要手动修改这个目录, 不然改乱了, git仓库就给破坏了.</p><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>提交就是要把需要git管理的文件保存到仓库里, 这种保存类似前面所讲的一个版本的保存.<br>只有把修改的的状态提供到仓库里, 才方便把仓库中把它取出来.</p><h4 id="增加文件"><a href="#增加文件" class="headerlink" title="增加文件"></a>增加文件</h4><p>提交前需要先把需要关注它修改有文件或是需要提交到仓库的文件加到管理列表里来.</p><p>当前目录里没有文件, 那么我们先创建一个文件README.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch README</span></span><br></pre></td></tr></table></figure><p>编辑这个文件, 写一点东西在里面.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim README</span></span><br></pre></td></tr></table></figure><p>先用查看当前状态的命令, 查看一下现在目录下文件的状态.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br></pre></td></tr></table></figure><p>把文件加到仓库中去, 只有加到仓库中了, 才可能看一下文件的变化.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">add</span><span class="bash"> README</span></span><br></pre></td></tr></table></figure><p>现在使用查看状态的命令, 看一下是目录下文件的状态.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br></pre></td></tr></table></figure><h4 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit</span></span><br></pre></td></tr></table></figure><p>如果你已经配置完下面的用户信息，那么他会弹出一个vim窗口，让你填写这次提交的描述.</p><p>当然有更快捷的方式不需要弹出窗口．如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'描述信息'</span></span></span><br></pre></td></tr></table></figure><h4 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h4><p>配置用户名, 这个用户名是你的提交patch的名字, 最好写真的名字, 不是网名, 如果有一天你成为名人了,那这个东西会一直印着你的足迹.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name</span><br></pre></td></tr></table></figure><p>配置用户邮箱, 这个邮箱最好写你最常用的邮箱, 说不定会有人给你写邮件的, 这个是可能来自世界的任何角落, 可能是任何肤色和眼睛.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.email</span><br></pre></td></tr></table></figure><p>配置编辑提交信息的编辑器, 我们熟悉的编辑器是vim. 使用这个去编辑提交信息, 最好把每一次提交信息填写写的全面, 不是为了给别人看, 万一那天自己想回顾一下. 也需要详细的信息.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global core.editor vim</span><br></pre></td></tr></table></figure><h3 id="查看提交信息"><a href="#查看提交信息" class="headerlink" title="查看提交信息"></a>查看提交信息</h3><p>我们刚才学习了提交信息, 那现在查看一下我们提交的信息.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">linux@os:~/wangkai/git/demo$ git log</span><br><span class="line"><span class="keyword">commit</span> d06a1a0dce655cea5b6eaa312dc0326f3a754eb4</span><br><span class="line">Author: <span class="keyword">Key</span> &lt;xkw@live.com&gt;</span><br><span class="line"><span class="built_in">Date</span>:   Thu Aug <span class="number">10</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">00</span> <span class="number">2017</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    Init <span class="keyword">commit</span></span><br><span class="line"></span><br><span class="line">    third <span class="keyword">commit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span> <span class="number">01</span>b66e6e7780217b2d3ebfe6f4388a7fecca8149</span><br><span class="line">Author: <span class="keyword">Key</span> &lt;xkw@live.com&gt;</span><br><span class="line"><span class="built_in">Date</span>:   Thu Aug <span class="number">10</span> <span class="number">11</span>:<span class="number">49</span>:<span class="number">51</span> <span class="number">2017</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    Init.commit</span><br><span class="line"></span><br><span class="line">    <span class="keyword">second</span> <span class="keyword">commit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span> c1401f3d0f635b2f23b4edbc7e70473042d2c5cc</span><br><span class="line">Author: <span class="keyword">Key</span> &lt;xkw@live.com&gt;</span><br><span class="line"><span class="built_in">Date</span>:   Thu Aug <span class="number">10</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">32</span> <span class="number">2017</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    Init <span class="keyword">commit</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">first</span> commit.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GIT 是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。是目前世界上最先进的分布式版本控制系统.&lt;/p&gt;
&lt;h2 id=&quot;GIT-源码管理&quot;&gt;&lt;a href=&quot;#G
      
    
    </summary>
    
      <category term="GIT" scheme="https://blog.loong.io/categories/GIT/"/>
    
    
      <category term="GIT" scheme="https://blog.loong.io/tags/GIT/"/>
    
      <category term="GitHub" scheme="https://blog.loong.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>原生和jQuery的Ajax用法</title>
    <link href="https://blog.loong.io/2017/06/29/ajax/"/>
    <id>https://blog.loong.io/2017/06/29/ajax/</id>
    <published>2017-06-29T09:14:54.000Z</published>
    <updated>2020-06-03T02:37:45.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="form数据的序列化："><a href="#form数据的序列化：" class="headerlink" title="form数据的序列化："></a>form数据的序列化：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#submit'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#form'</span>).serialize();        <span class="comment">//会根据input里面的name，把数据序列化成字符串；eg：name=yang</span></span><br><span class="line">    $(<span class="string">'#form'</span>).serializeArray();    <span class="comment">//会根据input里面的name，把数据序列化成数组；eg：[object]</span></span><br><span class="line">  <span class="comment">//注意：没有name会获取不到值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面两种不是jQuery的方法</span></span><br><span class="line">    <span class="built_in">JSON</span>.parse()    <span class="comment">//json字符串转化为json对象</span></span><br><span class="line">    <span class="built_in">JSON</span>.stringify()    <span class="comment">//json对象转化为json字符串</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="jQuery的ajax方法："><a href="#jQuery的ajax方法：" class="headerlink" title="jQuery的ajax方法："></a>jQuery的ajax方法：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/comm/test1.php'</span>,</span><br><span class="line">    type:<span class="string">'POST'</span>, <span class="comment">//GET</span></span><br><span class="line">    <span class="keyword">async</span>:<span class="literal">true</span>,    <span class="comment">//或false,是否异步</span></span><br><span class="line">    data:&#123;</span><br><span class="line">        name:<span class="string">'yang'</span>,<span class="attr">age</span>:<span class="number">25</span></span><br><span class="line">    &#125;,</span><br><span class="line">    timeout:<span class="number">5000</span>,    <span class="comment">//超时时间</span></span><br><span class="line">    dataType:<span class="string">'json'</span>,    <span class="comment">//返回的数据格式：json/xml/html/script/jsonp/text</span></span><br><span class="line">    beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'发送前'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data,textStatus,jqXHR</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="built_in">console</span>.log(textStatus)</span><br><span class="line">        <span class="built_in">console</span>.log(jqXHR)</span><br><span class="line">    &#125;,</span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params">xhr,textStatus</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'错误'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(xhr)</span><br><span class="line">        <span class="built_in">console</span>.log(textStatus)</span><br><span class="line">    &#125;,</span><br><span class="line">    complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'结束'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="原生的ajax方法："><a href="#原生的ajax方法：" class="headerlink" title="原生的ajax方法："></a>原生的ajax方法：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#send'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//请求的5个阶段，对应readyState的值</span></span><br><span class="line">        <span class="comment">//0: 未初始化，send方法未调用；</span></span><br><span class="line">        <span class="comment">//1: 正在发送请求，send方法已调用；</span></span><br><span class="line">        <span class="comment">//2: 请求发送完毕，send方法执行完毕；</span></span><br><span class="line">        <span class="comment">//3: 正在解析响应内容；</span></span><br><span class="line">        <span class="comment">//4: 响应内容解析完毕；</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">'name=yang'</span>;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();        <span class="comment">//创建一个ajax对象</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;    <span class="comment">//对ajax对象进行监听</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;    <span class="comment">//4表示解析完毕</span></span><br><span class="line">            <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;    <span class="comment">//200为正常返回</span></span><br><span class="line">                <span class="built_in">console</span>.log(xhr)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.open(<span class="string">'POST'</span>,<span class="string">'url'</span>,<span class="literal">true</span>);    <span class="comment">//建立连接，参数一：发送方式，二：请求地址，三：是否异步，true为异步</span></span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);    <span class="comment">//可有可无</span></span><br><span class="line">    xhr.send(data);        <span class="comment">//发送</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意。</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 - 非IE6 - 第一步</span></span><br><span class="line">        <span class="keyword">if</span> (window.XMLHttpRequest) &#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="type">XMLHttpRequest</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//IE6及其以下版本浏览器</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="type">ActiveXObject</span>(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;form数据的序列化：&quot;&gt;&lt;a href=&quot;#form数据的序列化：&quot; class=&quot;headerlink&quot; title=&quot;form数据的序列化：&quot;&gt;&lt;/a&gt;form数据的序列化：&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.loong.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.loong.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://blog.loong.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell脚本-3</title>
    <link href="https://blog.loong.io/2017/06/28/shell/"/>
    <id>https://blog.loong.io/2017/06/28/shell/</id>
    <published>2017-06-28T09:14:54.000Z</published>
    <updated>2020-06-03T02:37:45.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">filelist=`ls`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$filelist</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$filelist</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>从上述代码可以看出,for循环的基本结构:</p><p>for 变量 in 列表</p><p>do</p><p>  语句</p><p>done</p><p>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100..2&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">  <span class="built_in">let</span> <span class="string">"sum += <span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> sum = <span class="variable">$sum</span></span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> value</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"value = <span class="variable">$value</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面的代码,如果没有位置参数不会有任何结果,但是如果你输入位置参数,每一个位置参数的值都会赋给value,每个都会输出一次.</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>检索该文件夹下的文件,实现   find.sh filename 找到该文件输出已找到,没找到输出未找到的功能.</p><p>代码如下:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne <span class="number">1</span> ]</span><br><span class="line">then</span><br><span class="line">  <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line">filelist=`ls`</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$filelist</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$i</span> = <span class="variable">$1</span> ]</span><br><span class="line">  then</span><br><span class="line">    echo <span class="string">"已找到该文件"</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line">echo <span class="string">"未找到"</span></span><br></pre></td></tr></table></figure><p>for循环也可以实现c一样的写法,如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((i=0;i&lt;10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>该代码是输出0-9,成功执行.</p><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><p>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">i=1</span><br><span class="line">sum=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 100 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">let</span> <span class="string">"sum+=i"</span></span><br><span class="line">  <span class="built_in">let</span> <span class="string">"i++"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"和为<span class="variable">$sum</span>"</span></span><br></pre></td></tr></table></figure><p>这是个用bash shell写的简单的while循环,他会输出1到100的加和.</p><p>当然也可以用下面的这种.</p><p>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">i=1</span><br><span class="line">sum=0</span><br><span class="line"><span class="keyword">while</span>((i&lt;=100))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  ((sum+=i))</span><br><span class="line">  ((i++))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"sum is <span class="variable">$sum</span>"</span></span><br></pre></td></tr></table></figure><h1 id="until语句"><a href="#until语句" class="headerlink" title="until语句"></a>until语句</h1><p>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">i=1</span><br><span class="line">until [ <span class="variable">$i</span> -gt 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>"</span></span><br><span class="line">  ((i++))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>当[]中语句为假时持续执行,直到为真才会停止,和while语句正好相反.</p><h1 id="select语句-挑选语句"><a href="#select语句-挑选语句" class="headerlink" title="select语句(挑选语句)"></a>select语句(挑选语句)</h1><p>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"what is your favrition color?"</span></span><br><span class="line">select color <span class="keyword">in</span> <span class="string">"blue"</span> <span class="string">"red"</span> <span class="string">"balck"</span> <span class="string">"white"</span> <span class="string">"pink"</span> <span class="string">"green"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"you selected color is <span class="variable">$color</span>"</span></span><br><span class="line">  <span class="built_in">break</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>这个代码是列出几个选项,输入你想选的选项前面的数字确认结果,然后输出你所选的颜色.</p><h1 id="函数-function"><a href="#函数-function" class="headerlink" title="函数(function)"></a>函数(function)</h1><p>对功能代码进行封装</p><p>优点:</p><ol><li>实现代码封装,更有条理</li><li>代码更加安全</li><li>重复调用</li></ol><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"hello world"</span></span><br><span class="line">&#125;</span><br><span class="line">fun              <span class="comment">#调用函数只需要给出函数名，不需要加括号。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"你们好我是 `fun`"</span></span><br></pre></td></tr></table></figure><p>函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。</p><p>Shell 函数返回值只能是整数，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。如果 return 其他数据，比如一个字符串，往往会得到错误提示：“numeric argument required”。</p><p>如果一定要让函数返回字符串，那么可以先定义一个变量，用来接收函数的计算结果，脚本在需要的时候访问这个变量来获得函数返回值。</p><p>函数返回值在调用该函数后通过<code>$?</code> 来获得。</p><p>声明为内部变量:如果需要定义自己变量，可以在函数中定义：local 变量=值 ，这时变量就是内部变量，它的修改，不会影响函数外部相同变量的值 。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">array=(1 2 3 4 5 6 7)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[*]&#125;</span>   <span class="comment">#列出列表中的全部元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[@]&#125;</span>  <span class="comment">#统计元素的个数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[*]:4&#125;</span>   <span class="comment">#第5个数到最后的元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[@]:1:3&#125;</span>  <span class="comment">#第2个元素到第四个元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[3]&#125;</span>   <span class="comment">#第四个元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[3]&#125;</span>       <span class="comment">#第四个元素的字节数</span></span><br></pre></td></tr></table></figure><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p><code>set -e</code> :在”set -e”之后出现的代码，一旦出现了返回值非零，整个脚本就会立即退出。</p><p><code>set -x</code>:set -x是交互形式执行脚本，告诉你脚本做了些什么</p><p><code>+&lt;参数&gt;</code>: 　取消某个set曾启动的参数。</p><h1 id="作业"><a href="#作业" class="headerlink" title="作业:"></a>作业:</h1><p>用shell写冒泡排序.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">i=0</span><br><span class="line">j=0</span><br><span class="line">a=(6 4 2 8 9 1 7 3)</span><br><span class="line"><span class="keyword">while</span> ((i&lt;7))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"++++++++++"</span></span><br><span class="line">  j=0</span><br><span class="line">  <span class="keyword">while</span> ((j&lt;7-i))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"----------"</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;a[j]&#125;</span> -lt <span class="variable">$&#123;a[j+1]&#125;</span> ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      t=<span class="variable">$&#123;a[j]&#125;</span></span><br><span class="line">      a[j]=<span class="variable">$&#123;a[j+1]&#125;</span></span><br><span class="line">      a[j+1]=<span class="variable">$t</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ((j++))</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  ((i++))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a[*]&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h1&gt;&lt;p&gt;代码:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="Linux" scheme="https://blog.loong.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.loong.io/tags/Linux/"/>
    
      <category term="Shell" scheme="https://blog.loong.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell脚本-2</title>
    <link href="https://blog.loong.io/2017/06/27/bashshell/"/>
    <id>https://blog.loong.io/2017/06/27/bashshell/</id>
    <published>2017-06-27T09:14:54.000Z</published>
    <updated>2020-06-03T02:37:45.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>单行注释用   #    注释</p><p>多行注释:前面加  :&lt;&lt;!   后面加  !</p><h1 id="expr运算"><a href="#expr运算" class="headerlink" title="expr运算"></a>expr运算</h1><p>代码:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">b</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">sum</span>=`expr <span class="variable">$a</span> + <span class="variable">$b</span>`   #加法    反引号用来引用语句执行结果</span><br><span class="line"><span class="attr">min</span>=`expr <span class="variable">$a</span> - <span class="variable">$b</span>`   #减法</span><br><span class="line"><span class="attr">mul</span>=`expr <span class="variable">$a</span> \* <span class="variable">$b</span>` #乘法</span><br><span class="line"><span class="attr">div</span>=`expr <span class="variable">$a</span> / <span class="variable">$b</span>` #除法</span><br><span class="line"><span class="attr">yu</span>=`expr <span class="variable">$a</span> % <span class="variable">$b</span>` #取余</span><br></pre></td></tr></table></figure><p>关于运算优先级,要加括号,不然只会先乘除后加减.括号必须如下加上  <code>\</code> 反义字符.还有表达式两边是    (反撇)  并不是 <code>&#39;</code> (引号).</p><p>deshu=<code>expr \( $a \* $b + $c  - $d \) / $b</code></p><h1 id="let运算"><a href="#let运算" class="headerlink" title="let运算"></a>let运算</h1><p>代码:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">read <span class="selector-tag">a</span> b</span><br><span class="line">let <span class="string">" c = a * b "</span></span><br><span class="line">echo <span class="variable">$c</span></span><br></pre></td></tr></table></figure><p>let ：用来执行算数运算和数值表达式测试。</p><p>let 命令的替代表示形式是: ((算术表达式)) ，这样做的好处是如果表达式中含有特殊的字符，可以告示shell 进行特殊处理.</p><p>特点:</p><ol><li><p>在双括号结构中，所有表达式可以像c语言一样，如：a++,b–等。</p></li><li><p>在双括号结构中，所有变量可以不加入：“$”符号前缀。</p></li><li><p>双括号可以进行逻辑运算，四则运算</p></li><li><p>双括号结构 扩展了for，while,if条件测试运算</p></li><li><p>支持多个表达式运算，各个表达式之间用“，”分开</p></li></ol><h1 id="逻辑判断语句"><a href="#逻辑判断语句" class="headerlink" title="逻辑判断语句"></a>逻辑判断语句</h1><p>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> 4 -gt 3                     <span class="comment">#也可以用   if [ 4 -gt 3 ]              -gt :是前一个数如果大于后一个数,输出true</span></span><br><span class="line"><span class="keyword">then</span>  <span class="built_in">echo</span> <span class="string">"4 大于 3"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>必须用  if   倒过来结尾即:   fi</p><p> 1）判断表达式</p><ul><li><p>if test     (表达式为真)</p></li><li><p>if !test     !表达式为假</p></li><li><p>test 表达式1 –a 表达式2                  两个表达式都为真</p></li><li><p>test 表达式1 –o 表达式2                 两个表达式有一个为真</p></li></ul><p>2）判断字符串</p><ul><li><p>test –n 字符串                                   字符串的长度非零</p></li><li><p>test –z 字符串                                    字符串的长度为零</p></li><li><p>test 字符串1＝字符串2                    字符串相等</p></li><li><p>test 字符串1 !＝ 字符串2               字符串不等</p></li></ul><p>3）判断整数</p><ul><li><p>test 整数1 –eq 整数2                        整数相等</p></li><li><p>test 整数1 –ge 整数2                        整数1大于等于整数2</p></li><li><p>test 整数1 –gt 整数2                         整数1大于整数2</p></li><li><p>test 整数1 –le 整数2                         整数1小于等于整数2</p></li><li><p>test 整数1 –lt 整数2                          整数1小于整数2</p></li><li><p>test 整数1 –ne 整数2                        整数1不等于整数2</p></li></ul><p>4）判断文件</p><ul><li><p>test  File1 –nt  File2　　　　　　　　文件1比文件2 新</p></li><li><p>test  File1 –ot  File2　　　　　　　　文件1比文件2 旧</p></li><li><p>test –d File　　　　　　　　文件存在并且是目录</p></li><li><p>test –f File 　　　　　　　 文件存在并且是正规文件</p></li><li><p>test –e File　　　　　　　　文件存在</p></li><li>test –r File　　　　　　　　文件存在并且可读</li><li><p>test –w File　　　　　　　　文件存在并且可写</p></li><li><p>test –x File　　　　　　　　文件存在并且可执行</p></li><li><p>test  File1 –ef  File2　　　　　　　　两个文件具有同样的设备号和i结点号</p></li></ul><ul><li><p>test –b File　　　　　　　　文件存在并且是块设备文件</p></li><li><p>test –c File　　　　　　　　文件存在并且是字符设备文件</p></li><li><p>test –g File　　　　　　　　文件存在并且是设置了组ID</p></li><li><p>test –G File　　　　　　　　文件存在并且属于有效组I</p></li><li><p>test –h File　　　　　　　　文件存在并且是一个符号链接（同-L）</p></li><li><p>test –k File　　　　　　　　文件存在并且设置了sticky位</p></li><li><p>test –b File　　　　　　　　文件存在并且是块设备文件</p></li><li><p>test –L File　　　　　　　　文件存在并且是一个符号链接（同-h）</p></li><li><p>test –o File　　　　　　　　文件存在并且属于有效用户ID</p></li><li><p>test –p File　　　　　　　　文件存在并且是一个命名管道</p></li><li><p>test –s File　　　　　　　　文件存在并且是一个套接字</p></li><li><p>test –t FD　　　　　　　　  文件描述符是在一个终端打开的</p></li><li><p>test –u File　　　　　　　　文件存在并且设置了它的set-user-id位</p></li></ul><p>if_else语句:</p><p>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> ! [ -e <span class="variable">$1</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"该文件是个目录"</span></span><br><span class="line"><span class="keyword">elif</span> [ -f <span class="variable">$1</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"该文件是个普通文件"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"该文件是个其他类型的文件"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><p>在家目录下创建一个文件夹 dir,在此文件夹中创建一个文件, if_file判断这个文件是否创建成功并打印这个文件的读写执行权限.</p></li><li><p>当前系统时间,判断是闰年还是平年.</p></li></ol><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码:"></a>1.代码:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">mkdir dir</span><br><span class="line"><span class="built_in">cd</span> dir</span><br><span class="line">touch if_file</span><br><span class="line"><span class="keyword">if</span> [ -e if_file ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"创建成功!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -r if_file ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"可读"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"不可读"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -w if_file ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"可写"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"不可读"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -x if_file ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"可执行"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"不可执行"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码:"></a>2.代码:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DATE=`date`</span><br><span class="line">y=<span class="variable">$&#123;DATE:0:4&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$y</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"nl = y % 4 "</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"nw = y % 100"</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"nc = y % 400"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$nl</span> -eq 0 -a <span class="variable">$nw</span> -ne 0 ] || [ <span class="variable">$nc</span> -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"是闰年"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"不是闰年"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1 id="小数运算"><a href="#小数运算" class="headerlink" title="小数运算"></a>小数运算</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value = `<span class="built_in">echo</span> <span class="string">"1.1 + 2.2"</span> | bc`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$value</span></span><br></pre></td></tr></table></figure><h1 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h1><p>比如:输入一个成绩,根据分数给出ABCD评级</p><p>代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> i</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$i</span> -gt 100 -o <span class="variable">$i</span>  -lt  0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"您输入的不是成绩吧,你妈的,好好输"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">let</span> <span class="string">" g = <span class="variable">$i</span> / 10 "</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$g</span> <span class="keyword">in</span></span><br><span class="line">    9 | 10 )             <span class="comment">#用 | 可以添加多个常量</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"A"</span></span><br><span class="line">    ;;                    <span class="comment">#语句结束必须;;结尾</span></span><br><span class="line">    8 )</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"B"</span></span><br><span class="line">    ;;</span><br><span class="line">    7 )</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"C"</span></span><br><span class="line">    ;;</span><br><span class="line">    * )                  <span class="comment"># 这就是其他</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"D"</span></span><br><span class="line">  <span class="keyword">esac</span>           <span class="comment"># case反过来结尾,即:esac</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h1&gt;&lt;p&gt;单行注释用   #    注释&lt;/p&gt;
&lt;p&gt;多行注释:前面加  :&amp;lt;&amp;lt;!   后面加  !&lt;/p&gt;
&lt;h1 id=&quot;expr运
      
    
    </summary>
    
      <category term="Linux" scheme="https://blog.loong.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.loong.io/tags/Linux/"/>
    
      <category term="Shell" scheme="https://blog.loong.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell脚本</title>
    <link href="https://blog.loong.io/2017/06/26/shell/"/>
    <id>https://blog.loong.io/2017/06/26/shell/</id>
    <published>2017-06-26T09:14:54.000Z</published>
    <updated>2020-06-03T02:37:45.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件信息"><a href="#文件信息" class="headerlink" title="文件信息"></a>文件信息</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw-r--<span class="number"> 1 </span>linux linux  <span class="number"> 43 </span>6月 <span class="number"> 26 </span>13:45  file</span><br></pre></td></tr></table></figure><ul><li><code>rw-rw-r--</code><br><code>-rw-rw-r--</code>一共十个字符，分成四段。<br>第一个字符<code>-</code>表示普通文件；这个位置还可能会出现<code>l</code>链接；<code>d</code>表示目录 <code>b</code>块设备文件  <code>c</code>字符设备文件   <code>s</code>套接字文件  <code>p</code>管道文件<br>第二三四个字符“rw-”表示当前所属用户的权限。   所以用数值表示为4+2=6<br>第五六七个字符“rw-”表示当前所属组的权限。      所以用数值表示为4+2=6<br>第八九十个字符“r–”表示其他用户权限。              所以用数值表示为2<br>所以操作此文件的权限用数值表示为662<br>更改权限<br>sudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名<br>例如：有一个文件filename，权限为“-rw-r—-x” ,将权限值改为”-rwxrw-r-x”，用数值表示为765<br>sudo chmod u+x g+w o+r  filename<br>上面的例子可以用数值表示<br>sudo chmod 765 filename</li><li>两个<code>linux</code>,第一个代表所属用户,第二个代表所属用户组</li><li><code>43</code>代表着文件或者文件夹的大小</li><li><code>6月  26 13:45</code> 代表着文件的创建日期或者文件的最后修改日期</li><li><code>file</code> 代表着文件的名字</li></ul><h1 id="linux基础命令"><a href="#linux基础命令" class="headerlink" title="linux基础命令"></a>linux基础命令</h1><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"hello world hello kitty"</span> &gt; filename</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat filename</span></span><br><span class="line">hello world hello kitty</span><br></pre></td></tr></table></figure><p>简单创建一个文件,用<code>gerp</code>命令搜索文本.<br><code>grep</code>Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep hello filename</span></span><br><span class="line">hello world hello kitty</span><br></pre></td></tr></table></figure></p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linux<span class="variable">@os</span><span class="symbol">:~/kai/shell</span><span class="variable">$ </span>ls</span><br><span class="line">date.sh  file  file1  file1<span class="number">0</span>  file3  file4  filename  test.sh  日期</span><br></pre></td></tr></table></figure><p>shell文件夹下有一个叫filename的普通文件,用find命令查找到它<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linux@os:~/kai$ find <span class="keyword">shell</span><span class="bash"> -name filename</span></span><br><span class="line"><span class="bash">shell/filename</span></span><br></pre></td></tr></table></figure></p><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>whoami               <span class="comment">#用于查看当前有效用户名的命令</span></span><br><span class="line">linux</span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>which atom          <span class="comment">#which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</span></span><br><span class="line">/usr/bin/atom</span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>whereis atom             <span class="comment">#whereis命令只能用于程序名的搜索,如果省略参数，则返回所有信息。</span></span><br><span class="line"><span class="symbol">atom:</span> /usr/bin/atom</span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>ifconfig                       <span class="comment">#ifconfig 命令用来查看和配置网络设备。</span></span><br><span class="line">enp3s<span class="number">0</span>    Link <span class="symbol">encap:</span>以太网  硬件地址 <span class="number">38</span><span class="symbol">:d5</span><span class="symbol">:</span><span class="number">47</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">c:</span><span class="symbol">e0:</span>b<span class="number">0</span>  </span><br><span class="line">          inet 地址<span class="symbol">:</span><span class="number">10.2</span>.<span class="number">1.102</span>  广播<span class="symbol">:</span><span class="number">10.2</span>.<span class="number">1.255</span>  掩码<span class="symbol">:</span><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          inet6 地址: <span class="symbol">fe80:</span><span class="symbol">:bd5b</span><span class="symbol">:</span><span class="number">999</span><span class="symbol">b:</span><span class="number">4</span><span class="symbol">f29:</span><span class="number">7361</span>/<span class="number">64</span> <span class="symbol">Scope:</span>Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  <span class="symbol">MTU:</span><span class="number">1500</span>  跃点数<span class="symbol">:</span><span class="number">1</span></span><br><span class="line">          接收数据包<span class="symbol">:</span><span class="number">183918</span> 错误<span class="symbol">:</span><span class="number">0</span> 丢弃<span class="symbol">:</span><span class="number">0</span> 过载<span class="symbol">:</span><span class="number">0</span> 帧数<span class="symbol">:</span><span class="number">0</span></span><br><span class="line">          发送数据包<span class="symbol">:</span><span class="number">132203</span> 错误<span class="symbol">:</span><span class="number">0</span> 丢弃<span class="symbol">:</span><span class="number">0</span> 过载<span class="symbol">:</span><span class="number">0</span> 载波<span class="symbol">:</span><span class="number">0</span></span><br><span class="line">          碰撞<span class="symbol">:</span><span class="number">0</span> 发送队列长度<span class="symbol">:</span><span class="number">1000</span></span><br><span class="line">          接收字节<span class="symbol">:</span><span class="number">218562131</span> (<span class="number">218.5</span> MB)  发送字节<span class="symbol">:</span><span class="number">17921553</span> (<span class="number">17.9</span> MB)</span><br><span class="line"></span><br><span class="line">lo        Link <span class="symbol">encap:</span>本地环回  </span><br><span class="line">          inet 地址<span class="symbol">:</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>  掩码<span class="symbol">:</span><span class="number">255.0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line">          inet6 地址: <span class="symbol">:</span><span class="symbol">:</span><span class="number">1</span>/<span class="number">128</span> <span class="symbol">Scope:</span>Host</span><br><span class="line">          UP LOOPBACK RUNNING  <span class="symbol">MTU:</span><span class="number">65536</span>  跃点数<span class="symbol">:</span><span class="number">1</span></span><br><span class="line">          接收数据包<span class="symbol">:</span><span class="number">2829</span> 错误<span class="symbol">:</span><span class="number">0</span> 丢弃<span class="symbol">:</span><span class="number">0</span> 过载<span class="symbol">:</span><span class="number">0</span> 帧数<span class="symbol">:</span><span class="number">0</span></span><br><span class="line">          发送数据包<span class="symbol">:</span><span class="number">2829</span> 错误<span class="symbol">:</span><span class="number">0</span> 丢弃<span class="symbol">:</span><span class="number">0</span> 过载<span class="symbol">:</span><span class="number">0</span> 载波<span class="symbol">:</span><span class="number">0</span></span><br><span class="line">          碰撞<span class="symbol">:</span><span class="number">0</span> 发送队列长度<span class="symbol">:</span><span class="number">1</span></span><br><span class="line">          接收字节<span class="symbol">:</span><span class="number">408470</span> (<span class="number">408.4</span> KB)  发送字节<span class="symbol">:</span><span class="number">408470</span> (<span class="number">408.4</span> KB)</span><br><span class="line"></span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>ping fangcun.net                  <span class="comment">#它通常用来测试与目标主机的连通性</span></span><br><span class="line">PING fangcun.net (<span class="number">118.89</span>.<span class="number">227.74</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">118.89</span>.<span class="number">227.74</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">52</span> time=<span class="number">6.71</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">118.89</span>.<span class="number">227.74</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">52</span> time=<span class="number">6.64</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">118.89</span>.<span class="number">227.74</span>: icmp_seq=<span class="number">3</span> ttl=<span class="number">52</span> time=<span class="number">6.40</span> ms</span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>wc zhuye.html</span><br><span class="line"> <span class="number">103</span>  <span class="number">273</span> <span class="number">6377</span> zhuye.html</span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>sudo su                      <span class="comment">#进入超级用户权限</span></span><br><span class="line">[sudo] linux 的密码：</span><br><span class="line">root<span class="variable">@os</span><span class="symbol">:/home/linux</span><span class="comment"># exit                    #输入exit退出超级用户权限</span></span><br><span class="line">exit</span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>echo <span class="string">"hello world"</span> &gt; file            <span class="comment">#用echo创建一个简单的文件,里面有hello world的简单语句.</span></span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>ls                                                                                                 <span class="comment">#列出家目录下的文件</span></span><br><span class="line">blog              file         my-awesome-site    zhuye.html  视频  下载</span><br><span class="line">Desktop           jekyll_demo  package-lock.json  公共的      图片  音乐</span><br><span class="line">examples.desktop  kai          software           模板        文档  桌面</span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>ln file link                                                                                       <span class="comment">#给file文件加一个硬链接</span></span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>ls</span><br><span class="line">blog              file         link               software    模板  文档  桌面</span><br><span class="line">Desktop           jekyll_demo  my-awesome-site    zhuye.html  视频  下载</span><br><span class="line">examples.desktop  kai          package-lock.json  公共的      图片  音乐</span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>cat link                                                                                              <span class="comment">#可以看到链接文件的输出同file文件一样</span></span><br><span class="line">hello world</span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>ln -s  file link1                                                                        <span class="comment">#这是给file文件创建一个软链接,当file文件被删除时,软链接会没有输出,而硬链接则不会.</span></span><br><span class="line">linux<span class="variable">@os</span><span class="symbol">:~</span><span class="variable">$ </span>ls</span><br><span class="line">blog              jekyll_demo  my-awesome-site    公共的  文档</span><br><span class="line">Desktop           kai          package-lock.json  模板    下载</span><br><span class="line">examples.desktop  link         software           视频    音乐</span><br><span class="line">file              link1        zhuye.html         图片    桌面</span><br></pre></td></tr></table></figure><h2 id="deb文件"><a href="#deb文件" class="headerlink" title="deb文件"></a>deb文件</h2><p>1.本地安装 2.在线安装<br>相关配置文件：</p><ul><li>/etc/apt/sources.list  包含deb软件包源的文件</li><li>/var/lib/apt/list/* 对软件源进行更新之后的本地文件</li><li>/var/cache/apt/archive  在线安装时软件包的下载目录</li><li>/var/log/dpkg.log , 本地软件包管理的日志文件</li><li>/var/log/apt/×,log, 在线软件包管理的日志文件<h3 id="名称组成"><a href="#名称组成" class="headerlink" title="名称组成"></a>名称组成</h3>比如：sl_3.03-17_amd64.deb<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sl</span> 软件包名称   <span class="number">3.03</span>-<span class="number">17</span> 表示版本号和修订版本号  amd64 表示 运行平台的架构 <span class="keyword">deb</span>，表示<span class="keyword">deb</span>软件包的后缀名</span><br></pre></td></tr></table></figure></li></ul><h3 id="本地deb软件包的操作命令"><a href="#本地deb软件包的操作命令" class="headerlink" title="本地deb软件包的操作命令"></a>本地deb软件包的操作命令</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 软件包的安装  dpkg -i sl_3.<span class="number">03</span>-<span class="number">17</span>_amd64.<span class="keyword">deb</span></span><br><span class="line">软件包的卸载  dpkg -r <span class="keyword">sl</span></span><br><span class="line"> 软件包的彻底卸载，移除所有配置文件 dpkg -<span class="keyword">P</span> <span class="keyword">sl</span></span><br><span class="line">查看软件包的安装状态 dpkg -s <span class="keyword">sl</span></span><br><span class="line">查看软件包的安装路径 dpkg -L <span class="keyword">sl</span></span><br><span class="line"> 列出所有安装的软件包 dpkg --<span class="built_in">get</span>-selections</span><br></pre></td></tr></table></figure><h3 id="在线管理操作命令"><a href="#在线管理操作命令" class="headerlink" title="在线管理操作命令"></a>在线管理操作命令</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">更新本地软件包  apt-<span class="builtin-name">get</span> update</span><br><span class="line">软件包的安装 apt-<span class="builtin-name">get</span> install sl</span><br><span class="line">软件包的卸载 apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> sl</span><br><span class="line">软件包的彻底卸载 apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> --purge sl</span><br><span class="line">二进制软件包的下载 apt-<span class="builtin-name">get</span> download sl</span><br><span class="line"> 软件包源码下载  apt-<span class="builtin-name">get</span> source sl</span><br><span class="line">查看软件包的安装状态 apt-cache<span class="built_in"> policy </span>sl</span><br><span class="line">查看软件包的信息 apt-cache show sl</span><br><span class="line">升级软件包  apt-<span class="builtin-name">get</span> upgrade</span><br></pre></td></tr></table></figure><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><p><code>*</code>代表着任意字符<br><code>?</code>代表着任一字符</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm <span class="built_in">file</span>[<span class="number">1</span>,<span class="number">3</span>]                 <span class="comment">#文件列表中file1和file3会被删除</span></span><br><span class="line">rm <span class="built_in">file</span>[!<span class="number">1</span>,<span class="number">3</span>]               <span class="comment">#文件列表中除了file1和file3不会被删除,其他file?都会被删.</span></span><br><span class="line">rm <span class="built_in">file</span>[<span class="number">1</span><span class="number">-9</span>]                   <span class="comment">#文件列表中file1到file9都会被删除</span></span><br><span class="line">rm <span class="built_in">file</span>[<span class="keyword">a</span>-zA-Z]             <span class="comment">#与上面类似</span></span><br></pre></td></tr></table></figure><h1 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"hello world"</span> &gt; file           #创建一个file文件,里面第一行有hello world的文本.`&gt;`的作用是覆盖第一行文本.</span><br><span class="line">echo <span class="string">"hello world"</span> &gt;&gt; file           #`&gt;&gt;`会在第二行追加hello world文本</span><br></pre></td></tr></table></figure><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> | grep <span class="string">"music"</span>            <span class="comment">#把第一个命令的输出作为第二个命令的输入</span></span><br></pre></td></tr></table></figure><h1 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h1><p>shell脚本:shell命令的有序结合</p><h2 id="创建一个shell脚本"><a href="#创建一个shell脚本" class="headerlink" title="创建一个shell脚本"></a>创建一个shell脚本</h2><p>shell脚本是一个以<code>.sh</code>为结尾的文件,比如:test.sh<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash      #指明解释器所在的位置</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure></p><p>以上就是一个最简单的shell脚本.</p><h2 id="执行shell脚本"><a href="#执行shell脚本" class="headerlink" title="执行shell脚本"></a>执行shell脚本</h2><ol><li>bash test.sh</li><li>修改文件权限  chomd 755 test.sh      然后<code>./test.sh</code>执行.<h2 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h2></li></ol><ul><li>数字字母下划线(有的编程语言可以用$)</li><li>不能以数字开头(但是我们也不鼓励普通标识符用_开头)</li><li>不能和当前使用的语言的关键字(保留字)重名<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vlaue=1                       <span class="comment">#给变量赋值,等号两边不能有空格</span></span><br><span class="line">value1=2</span><br><span class="line"><span class="built_in">unset</span> value                    <span class="comment">#用unset来注销一个变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$value</span> <span class="variable">$value1</span>           <span class="comment">#用echo输出两个变量</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果:<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">bash </span>value.<span class="keyword">sh</span></span><br><span class="line"><span class="keyword">2</span></span><br></pre></td></tr></table></figure></p><p>echo 后面的语句不加引号和加<code>&#39;`</code>“`截然不同.例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value1=1</span><br><span class="line"><span class="built_in">echo</span> hello          kitty  <span class="variable">$value1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello            kitty  <span class="variable">$value1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello           kitty $value1'</span></span><br></pre></td></tr></table></figure></p><p>输出结果:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hello</span> kitty <span class="number">1</span>                      <span class="comment">#没有加引号,可以看出把多个空格缩为一个,把变量解释了</span></span><br><span class="line">hello            kitty  <span class="number">1</span>                 <span class="comment">#双引号,把变量解释了</span></span><br><span class="line">hello           kitty <span class="variable">$value1</span>              <span class="comment">#单引号,直接引用原句</span></span><br></pre></td></tr></table></figure></p><h3 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$1 = <span class="variable">$1</span>"</span></span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$10 = <span class="variable">$&#123;10&#125;</span>"</span></span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$# = <span class="variable">$#</span>"</span> <span class="comment">#输入参数的个数</span></span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$@ = <span class="variable">$@</span>"</span> <span class="comment">#输出所有参数</span></span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$* = $*"</span>     <span class="comment">#同上面类似</span></span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$$ = $$"</span>        <span class="comment">#打印当前进程的进程号</span></span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$? = $?"</span>        <span class="comment">#$?是上一个命令的运行结果，0表示成功，其他值是失败。</span></span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">linux@os:~/kai/shell$ bash date.sh<span class="number"> 1 </span>2<span class="number"> 3 </span>4<span class="number"> 5 </span>6<span class="number"> 7 </span>8<span class="number"> 9 </span>10</span><br><span class="line">$1 = 1</span><br><span class="line">$10 = 10</span><br><span class="line">$<span class="comment"># = 10</span></span><br><span class="line">$@ =<span class="number"> 1 </span>2<span class="number"> 3 </span>4<span class="number"> 5 </span>6<span class="number"> 7 </span>8<span class="number"> 9 </span>10</span><br><span class="line">$* =<span class="number"> 1 </span>2<span class="number"> 3 </span>4<span class="number"> 5 </span>6<span class="number"> 7 </span>8<span class="number"> 9 </span>10</span><br><span class="line">$$ = 6647</span><br><span class="line">$? = 0</span><br></pre></td></tr></table></figure><h3 id="关键字read"><a href="#关键字read" class="headerlink" title="关键字read"></a>关键字read</h3><p>一个read对应一个回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> value</span><br><span class="line"><span class="built_in">read</span> value1</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$value</span> <span class="variable">$value1</span></span><br></pre></td></tr></table></figure><p>他会等待输入两个参数,然后一行打印出来.</p><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><ol><li>理解进制转换  学会chmod修改权限的命令</li><li>环境变量.ip.dns.子网掩码.网关 这些词的含义</li><li>从那几个方面解决电脑卡顿,为什么?</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件信息&quot;&gt;&lt;a href=&quot;#文件信息&quot; class=&quot;headerlink&quot; title=&quot;文件信息&quot;&gt;&lt;/a&gt;文件信息&lt;/h1&gt;&lt;figure class=&quot;highlight tap&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="https://blog.loong.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.loong.io/tags/Linux/"/>
    
      <category term="Shell" scheme="https://blog.loong.io/tags/Shell/"/>
    
  </entry>
  
</feed>
